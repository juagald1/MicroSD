
FW_MicroSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc0  08004fc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc8  08004fc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000009a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009b4  200009b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff84  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025cb  00000000  00000000  0002ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad8  00000000  00000000  00032590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009b0  00000000  00000000  00033068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022162  00000000  00000000  00033a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea52  00000000  00000000  00055b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6461  00000000  00000000  000645cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012aa2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a90  00000000  00000000  0012aa80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ea4 	.word	0x08004ea4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004ea4 	.word	0x08004ea4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <SystemClock_Config>:
 */

#include "stm32f4xx_hal.h"

void SystemClock_Config	(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b094      	sub	sp, #80	; 0x50
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0320 	add.w	r3, r7, #32
 80004ca:	2230      	movs	r2, #48	; 0x30
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f004 fce0 	bl	8004e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e4:	2300      	movs	r3, #0
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <SystemClock_Config+0xb8>)
 80004ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ec:	4a22      	ldr	r2, [pc, #136]	; (8000578 <SystemClock_Config+0xb8>)
 80004ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f2:	6413      	str	r3, [r2, #64]	; 0x40
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <SystemClock_Config+0xb8>)
 80004f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <SystemClock_Config+0xbc>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a1c      	ldr	r2, [pc, #112]	; (800057c <SystemClock_Config+0xbc>)
 800050a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <SystemClock_Config+0xbc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800051c:	2301      	movs	r3, #1
 800051e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800052e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000530:	2308      	movs	r3, #8
 8000532:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000534:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000538:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800053a:	2302      	movs	r3, #2
 800053c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800053e:	2307      	movs	r3, #7
 8000540:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fcd6 	bl	8000ef8 <HAL_RCC_OscConfig>
  {
	   //JGD Generar Error
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	230f      	movs	r3, #15
 800054e:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2302      	movs	r3, #2
 8000552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000558:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800055e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000562:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2105      	movs	r1, #5
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ff3c 	bl	80013e8 <HAL_RCC_ClockConfig>
  {
	   //JGD Generar Error
  }
}
 8000570:	bf00      	nop
 8000572:	3750      	adds	r7, #80	; 0x50
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	40007000 	.word	0x40007000

08000580 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init	(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <GPIO_Init+0x84>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <GPIO_Init+0x84>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <GPIO_Init+0x84>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <GPIO_Init+0x84>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <GPIO_Init+0x84>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <GPIO_Init+0x84>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <GPIO_Init+0x84>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <GPIO_Init+0x84>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <GPIO_Init+0x84>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <GPIO_Init+0x84>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <GPIO_Init+0x84>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <GPIO_Init+0x84>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <Init_HW>:

void Init_HW (void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_Init();
 800060c:	f000 f95c 	bl	80008c8 <HAL_Init>
	SystemClock_Config();
 8000610:	f7ff ff56 	bl	80004c0 <SystemClock_Config>
	GPIO_Init();
 8000614:	f7ff ffb4 	bl	8000580 <GPIO_Init>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void SDIO_SD_Init(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <SDIO_SD_Init+0x38>)
 8000622:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <SDIO_SD_Init+0x3c>)
 8000624:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <SDIO_SD_Init+0x38>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <SDIO_SD_Init+0x38>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <SDIO_SD_Init+0x38>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SDIO_SD_Init+0x38>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <SDIO_SD_Init+0x38>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <SDIO_SD_Init+0x38>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]

}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	200004bc 	.word	0x200004bc
 8000658:	40012c00 	.word	0x40012c00

0800065c <Init_MicroSD>:

void Init_MicroSD (void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	  SDIO_SD_Init();
 8000660:	f7ff ffdc 	bl	800061c <SDIO_SD_Init>
	  FATFS_Init();
 8000664:	f002 fd3e 	bl	80030e4 <FATFS_Init>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <Crea_Carpeta>:
/**
  * @brief  Función que permite crear una carpeta en una ruta concreta de la tarjeta Micro SD.
  * @param  TCHAR*: "/RUTA/Nombre de la Carpeta/".
  * @retval None
  */
void Crea_Carpeta (const TCHAR* nombre_carpeta){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

	if(f_mount(&FAT_FS, SDPath, 1) == FR_OK)
 8000674:	2201      	movs	r2, #1
 8000676:	490b      	ldr	r1, [pc, #44]	; (80006a4 <Crea_Carpeta+0x38>)
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <Crea_Carpeta+0x3c>)
 800067a:	f004 fa3d 	bl	8004af8 <f_mount>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10a      	bne.n	800069a <Crea_Carpeta+0x2e>
	{
		if(f_mkdir(nombre_carpeta) != FR_OK)
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f004 fa7d 	bl	8004b84 <f_mkdir>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d004      	beq.n	800069a <Crea_Carpeta+0x2e>
		{
			MicroSD.Flags.Error.Crea_Carpeta = 1;
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <Crea_Carpeta+0x40>)
 8000692:	7813      	ldrb	r3, [r2, #0]
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	7013      	strb	r3, [r2, #0]
		}
	}
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000550 	.word	0x20000550
 80006a8:	2000028c 	.word	0x2000028c
 80006ac:	20000540 	.word	0x20000540

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  Init_HW();
 80006b4:	f7ff ffa8 	bl	8000608 <Init_HW>
  Init_MicroSD();
 80006b8:	f7ff ffd0 	bl	800065c <Init_MicroSD>

  //Test_1();

  Crea_Carpeta ("/TEST");
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <main+0x20>)
 80006be:	f7ff ffd5 	bl	800066c <Crea_Carpeta>
  Crea_Carpeta ("/AMUNT");
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <main+0x24>)
 80006c4:	f7ff ffd2 	bl	800066c <Crea_Carpeta>
  Crea_Carpeta ("/VALENCIA");
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <main+0x28>)
 80006ca:	f7ff ffcf 	bl	800066c <Crea_Carpeta>

  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0x1e>
 80006d0:	08004ebc 	.word	0x08004ebc
 80006d4:	08004ec4 	.word	0x08004ec4
 80006d8:	08004ecc 	.word	0x08004ecc

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_MspInit+0x4c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <HAL_MspInit+0x4c>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f0:	6453      	str	r3, [r2, #68]	; 0x44
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x4c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x4c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800071a:	2007      	movs	r0, #7
 800071c:	f000 fa1c 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800

0800072c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <HAL_SD_MspInit+0xc0>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d14a      	bne.n	80007e4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <HAL_SD_MspInit+0xc4>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <HAL_SD_MspInit+0xc4>)
 8000758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <HAL_SD_MspInit+0xc4>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_SD_MspInit+0xc4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <HAL_SD_MspInit+0xc4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_SD_MspInit+0xc4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_SD_MspInit+0xc4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <HAL_SD_MspInit+0xc4>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_SD_MspInit+0xc4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80007a2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80007a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007b4:	230c      	movs	r3, #12
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480d      	ldr	r0, [pc, #52]	; (80007f4 <HAL_SD_MspInit+0xc8>)
 80007c0:	f000 f9fe 	bl	8000bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c4:	2304      	movs	r3, #4
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007d4:	230c      	movs	r3, #12
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <HAL_SD_MspInit+0xcc>)
 80007e0:	f000 f9ee 	bl	8000bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40012c00 	.word	0x40012c00
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020c00 	.word	0x40020c00

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <MemManage_Handler+0x4>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler+0x4>

0800081a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 f890 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800087a:	490e      	ldr	r1, [pc, #56]	; (80008b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800087c:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000890:	4c0b      	ldr	r4, [pc, #44]	; (80008c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800089e:	f7ff ffd7 	bl	8000850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a2:	f004 fad3 	bl	8004e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a6:	f7ff ff03 	bl	80006b0 <main>
  bx  lr    
 80008aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b8:	08004fd0 	.word	0x08004fd0
  ldr r2, =_sbss
 80008bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c0:	200009b4 	.word	0x200009b4

080008c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <HAL_Init+0x40>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_Init+0x40>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <HAL_Init+0x40>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f931 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff feee 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023c00 	.word	0x40023c00

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f93b 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f911 	bl	8000b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	20000548 	.word	0x20000548

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000548 	.word	0x20000548

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff ffee 	bl	8000994 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_Delay+0x44>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffde 	bl	8000994 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff47 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff5c 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffb0 	bl	8000b14 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	e16b      	b.n	8000eb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bdc:	2201      	movs	r2, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f040 815a 	bne.w	8000eae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d130      	bne.n	8000c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	f003 0201 	and.w	r2, r3, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d017      	beq.n	8000cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d123      	bne.n	8000d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	69b9      	ldr	r1, [r7, #24]
 8000d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0203 	and.w	r2, r3, #3
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80b4 	beq.w	8000eae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <HAL_GPIO_Init+0x30c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a5f      	ldr	r2, [pc, #380]	; (8000ecc <HAL_GPIO_Init+0x30c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <HAL_GPIO_Init+0x30c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d62:	4a5b      	ldr	r2, [pc, #364]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a52      	ldr	r2, [pc, #328]	; (8000ed4 <HAL_GPIO_Init+0x314>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d02b      	beq.n	8000de6 <HAL_GPIO_Init+0x226>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <HAL_GPIO_Init+0x318>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d025      	beq.n	8000de2 <HAL_GPIO_Init+0x222>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a50      	ldr	r2, [pc, #320]	; (8000edc <HAL_GPIO_Init+0x31c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d01f      	beq.n	8000dde <HAL_GPIO_Init+0x21e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4f      	ldr	r2, [pc, #316]	; (8000ee0 <HAL_GPIO_Init+0x320>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d019      	beq.n	8000dda <HAL_GPIO_Init+0x21a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4e      	ldr	r2, [pc, #312]	; (8000ee4 <HAL_GPIO_Init+0x324>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x216>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_GPIO_Init+0x328>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00d      	beq.n	8000dd2 <HAL_GPIO_Init+0x212>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <HAL_GPIO_Init+0x32c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x20e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4b      	ldr	r2, [pc, #300]	; (8000ef0 <HAL_GPIO_Init+0x330>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_GPIO_Init+0x20a>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e00e      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dca:	2308      	movs	r3, #8
 8000dcc:	e00c      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dce:	2306      	movs	r3, #6
 8000dd0:	e00a      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e008      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e004      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000de6:	2300      	movs	r3, #0
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	f002 0203 	and.w	r2, r2, #3
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	4093      	lsls	r3, r2
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df8:	4935      	ldr	r1, [pc, #212]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e2a:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e54:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	f67f ae90 	bls.w	8000bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40021c00 	.word	0x40021c00
 8000ef4:	40013c00 	.word	0x40013c00

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e264      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d075      	beq.n	8001002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f16:	4ba3      	ldr	r3, [pc, #652]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d00c      	beq.n	8000f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f22:	4ba0      	ldr	r3, [pc, #640]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d112      	bne.n	8000f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f2e:	4b9d      	ldr	r3, [pc, #628]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f3a:	d10b      	bne.n	8000f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	4b99      	ldr	r3, [pc, #612]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d05b      	beq.n	8001000 <HAL_RCC_OscConfig+0x108>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d157      	bne.n	8001000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e23f      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d106      	bne.n	8000f6c <HAL_RCC_OscConfig+0x74>
 8000f5e:	4b91      	ldr	r3, [pc, #580]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a90      	ldr	r2, [pc, #576]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e01d      	b.n	8000fa8 <HAL_RCC_OscConfig+0xb0>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x98>
 8000f76:	4b8b      	ldr	r3, [pc, #556]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a8a      	ldr	r2, [pc, #552]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b88      	ldr	r3, [pc, #544]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a87      	ldr	r2, [pc, #540]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_RCC_OscConfig+0xb0>
 8000f90:	4b84      	ldr	r3, [pc, #528]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a83      	ldr	r2, [pc, #524]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b81      	ldr	r3, [pc, #516]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a80      	ldr	r2, [pc, #512]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d013      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fcf0 	bl	8000994 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fcec 	bl	8000994 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b64      	cmp	r3, #100	; 0x64
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e204      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fca:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f0      	beq.n	8000fb8 <HAL_RCC_OscConfig+0xc0>
 8000fd6:	e014      	b.n	8001002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fcdc 	bl	8000994 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fcd8 	bl	8000994 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b64      	cmp	r3, #100	; 0x64
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e1f0      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff2:	4b6c      	ldr	r3, [pc, #432]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f0      	bne.n	8000fe0 <HAL_RCC_OscConfig+0xe8>
 8000ffe:	e000      	b.n	8001002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d063      	beq.n	80010d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800100e:	4b65      	ldr	r3, [pc, #404]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00b      	beq.n	8001032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800101a:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001022:	2b08      	cmp	r3, #8
 8001024:	d11c      	bne.n	8001060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001026:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d116      	bne.n	8001060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001032:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d005      	beq.n	800104a <HAL_RCC_OscConfig+0x152>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d001      	beq.n	800104a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e1c4      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104a:	4b56      	ldr	r3, [pc, #344]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4952      	ldr	r1, [pc, #328]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 800105a:	4313      	orrs	r3, r2
 800105c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105e:	e03a      	b.n	80010d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d020      	beq.n	80010aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001068:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <HAL_RCC_OscConfig+0x2b0>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106e:	f7ff fc91 	bl	8000994 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001076:	f7ff fc8d 	bl	8000994 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e1a5      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001088:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001094:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4940      	ldr	r1, [pc, #256]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
 80010a8:	e015      	b.n	80010d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010aa:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <HAL_RCC_OscConfig+0x2b0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b0:	f7ff fc70 	bl	8000994 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc6c 	bl	8000994 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e184      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ca:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f0      	bne.n	80010b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d030      	beq.n	8001144 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d016      	beq.n	8001118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_RCC_OscConfig+0x2b4>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f0:	f7ff fc50 	bl	8000994 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc4c 	bl	8000994 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e164      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x200>
 8001116:	e015      	b.n	8001144 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_OscConfig+0x2b4>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111e:	f7ff fc39 	bl	8000994 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001126:	f7ff fc35 	bl	8000994 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e14d      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80a0 	beq.w	8001292 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10f      	bne.n	8001182 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800117e:	2301      	movs	r3, #1
 8001180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_OscConfig+0x2b8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118a:	2b00      	cmp	r3, #0
 800118c:	d121      	bne.n	80011d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_RCC_OscConfig+0x2b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_RCC_OscConfig+0x2b8>)
 8001194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119a:	f7ff fbfb 	bl	8000994 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a0:	e011      	b.n	80011c6 <HAL_RCC_OscConfig+0x2ce>
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	42470000 	.word	0x42470000
 80011ac:	42470e80 	.word	0x42470e80
 80011b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b4:	f7ff fbee 	bl	8000994 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e106      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c6:	4b85      	ldr	r3, [pc, #532]	; (80013dc <HAL_RCC_OscConfig+0x4e4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d106      	bne.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
 80011da:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80011dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011de:	4a80      	ldr	r2, [pc, #512]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6713      	str	r3, [r2, #112]	; 0x70
 80011e6:	e01c      	b.n	8001222 <HAL_RCC_OscConfig+0x32a>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d10c      	bne.n	800120a <HAL_RCC_OscConfig+0x312>
 80011f0:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f4:	4a7a      	ldr	r2, [pc, #488]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6713      	str	r3, [r2, #112]	; 0x70
 80011fc:	4b78      	ldr	r3, [pc, #480]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001200:	4a77      	ldr	r2, [pc, #476]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6713      	str	r3, [r2, #112]	; 0x70
 8001208:	e00b      	b.n	8001222 <HAL_RCC_OscConfig+0x32a>
 800120a:	4b75      	ldr	r3, [pc, #468]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800120c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120e:	4a74      	ldr	r2, [pc, #464]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	6713      	str	r3, [r2, #112]	; 0x70
 8001216:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121a:	4a71      	ldr	r2, [pc, #452]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800121c:	f023 0304 	bic.w	r3, r3, #4
 8001220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d015      	beq.n	8001256 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122a:	f7ff fbb3 	bl	8000994 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7ff fbaf 	bl	8000994 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e0c5      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001248:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800124a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0ee      	beq.n	8001232 <HAL_RCC_OscConfig+0x33a>
 8001254:	e014      	b.n	8001280 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff fb9d 	bl	8000994 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800125e:	f7ff fb99 	bl	8000994 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e0af      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001274:	4b5a      	ldr	r3, [pc, #360]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1ee      	bne.n	800125e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d105      	bne.n	8001292 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001286:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a55      	ldr	r2, [pc, #340]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800128c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 809b 	beq.w	80013d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d05c      	beq.n	8001362 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d141      	bne.n	8001334 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b0:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <HAL_RCC_OscConfig+0x4ec>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fb6d 	bl	8000994 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff fb69 	bl	8000994 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e081      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69da      	ldr	r2, [r3, #28]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	019b      	lsls	r3, r3, #6
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	3b01      	subs	r3, #1
 80012f6:	041b      	lsls	r3, r3, #16
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	061b      	lsls	r3, r3, #24
 8001300:	4937      	ldr	r1, [pc, #220]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <HAL_RCC_OscConfig+0x4ec>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fb42 	bl	8000994 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff fb3e 	bl	8000994 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e056      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x41c>
 8001332:	e04e      	b.n	80013d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <HAL_RCC_OscConfig+0x4ec>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fb2b 	bl	8000994 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff fb27 	bl	8000994 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e03f      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x44a>
 8001360:	e037      	b.n	80013d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e032      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d028      	beq.n	80013ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d121      	bne.n	80013ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d11a      	bne.n	80013ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800139e:	4013      	ands	r3, r2
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d111      	bne.n	80013ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	3b01      	subs	r3, #1
 80013b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40007000 	.word	0x40007000
 80013e0:	40023800 	.word	0x40023800
 80013e4:	42470060 	.word	0x42470060

080013e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0cc      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013fc:	4b68      	ldr	r3, [pc, #416]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d90c      	bls.n	8001424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b65      	ldr	r3, [pc, #404]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0b8      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143c:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a58      	ldr	r2, [pc, #352]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800145e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	494d      	ldr	r1, [pc, #308]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d044      	beq.n	8001508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d119      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e07f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d003      	beq.n	80014a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e06f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e067      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f023 0203 	bic.w	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4934      	ldr	r1, [pc, #208]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d8:	f7ff fa5c 	bl	8000994 <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e0:	f7ff fa58 	bl	8000994 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e04f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 020c 	and.w	r2, r3, #12
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	429a      	cmp	r2, r3
 8001506:	d1eb      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d20c      	bcs.n	8001530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e032      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4916      	ldr	r1, [pc, #88]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	490e      	ldr	r1, [pc, #56]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800156e:	f000 f821 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8001572:	4602      	mov	r2, r0
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	490a      	ldr	r1, [pc, #40]	; (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	5ccb      	ldrb	r3, [r1, r3]
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_ClockConfig+0x1c8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f9bc 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00
 80015a4:	40023800 	.word	0x40023800
 80015a8:	08004f1c 	.word	0x08004f1c
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015cc:	4b67      	ldr	r3, [pc, #412]	; (800176c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d00d      	beq.n	80015f4 <HAL_RCC_GetSysClockFreq+0x40>
 80015d8:	2b08      	cmp	r3, #8
 80015da:	f200 80bd 	bhi.w	8001758 <HAL_RCC_GetSysClockFreq+0x1a4>
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0x34>
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d003      	beq.n	80015ee <HAL_RCC_GetSysClockFreq+0x3a>
 80015e6:	e0b7      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e8:	4b61      	ldr	r3, [pc, #388]	; (8001770 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80015ea:	60bb      	str	r3, [r7, #8]
       break;
 80015ec:	e0b7      	b.n	800175e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ee:	4b61      	ldr	r3, [pc, #388]	; (8001774 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80015f0:	60bb      	str	r3, [r7, #8]
      break;
 80015f2:	e0b4      	b.n	800175e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f4:	4b5d      	ldr	r3, [pc, #372]	; (800176c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d04d      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	099b      	lsrs	r3, r3, #6
 8001610:	461a      	mov	r2, r3
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	f240 10ff 	movw	r0, #511	; 0x1ff
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	ea02 0800 	and.w	r8, r2, r0
 8001622:	ea03 0901 	and.w	r9, r3, r1
 8001626:	4640      	mov	r0, r8
 8001628:	4649      	mov	r1, r9
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	014b      	lsls	r3, r1, #5
 8001634:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001638:	0142      	lsls	r2, r0, #5
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	ebb0 0008 	subs.w	r0, r0, r8
 8001642:	eb61 0109 	sbc.w	r1, r1, r9
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	018b      	lsls	r3, r1, #6
 8001650:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001654:	0182      	lsls	r2, r0, #6
 8001656:	1a12      	subs	r2, r2, r0
 8001658:	eb63 0301 	sbc.w	r3, r3, r1
 800165c:	f04f 0000 	mov.w	r0, #0
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	00d9      	lsls	r1, r3, #3
 8001666:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800166a:	00d0      	lsls	r0, r2, #3
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	eb12 0208 	adds.w	r2, r2, r8
 8001674:	eb43 0309 	adc.w	r3, r3, r9
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	f04f 0100 	mov.w	r1, #0
 8001680:	0259      	lsls	r1, r3, #9
 8001682:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001686:	0250      	lsls	r0, r2, #9
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	461a      	mov	r2, r3
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	f7fe fd96 	bl	80001c8 <__aeabi_uldivmod>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4613      	mov	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e04a      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	461a      	mov	r2, r3
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	ea02 0400 	and.w	r4, r2, r0
 80016be:	ea03 0501 	and.w	r5, r3, r1
 80016c2:	4620      	mov	r0, r4
 80016c4:	4629      	mov	r1, r5
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	014b      	lsls	r3, r1, #5
 80016d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016d4:	0142      	lsls	r2, r0, #5
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	1b00      	subs	r0, r0, r4
 80016dc:	eb61 0105 	sbc.w	r1, r1, r5
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	018b      	lsls	r3, r1, #6
 80016ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016ee:	0182      	lsls	r2, r0, #6
 80016f0:	1a12      	subs	r2, r2, r0
 80016f2:	eb63 0301 	sbc.w	r3, r3, r1
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	00d9      	lsls	r1, r3, #3
 8001700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001704:	00d0      	lsls	r0, r2, #3
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	1912      	adds	r2, r2, r4
 800170c:	eb45 0303 	adc.w	r3, r5, r3
 8001710:	f04f 0000 	mov.w	r0, #0
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	0299      	lsls	r1, r3, #10
 800171a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800171e:	0290      	lsls	r0, r2, #10
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	461a      	mov	r2, r3
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	f7fe fd4a 	bl	80001c8 <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4613      	mov	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0c1b      	lsrs	r3, r3, #16
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	3301      	adds	r3, #1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	60bb      	str	r3, [r7, #8]
      break;
 8001756:	e002      	b.n	800175e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800175a:	60bb      	str	r3, [r7, #8]
      break;
 800175c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800175e:	68bb      	ldr	r3, [r7, #8]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	00f42400 	.word	0x00f42400
 8001774:	007a1200 	.word	0x007a1200

08001778 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e022      	b.n	80017d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d105      	bne.n	80017a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7fe ffc5 	bl	800072c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f814 	bl	80017d8 <HAL_SD_InitCard>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00a      	b.n	80017d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b08e      	sub	sp, #56	; 0x38
 80017dc:	af04      	add	r7, sp, #16
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80017f4:	2376      	movs	r3, #118	; 0x76
 80017f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681d      	ldr	r5, [r3, #0]
 80017fc:	466c      	mov	r4, sp
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001810:	4628      	mov	r0, r5
 8001812:	f000 ff35 	bl	8002680 <SDIO_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800181c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e04c      	b.n	80018c2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_SD_InitCard+0xf4>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 ff6d 	bl	8002712 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_SD_InitCard+0xf4>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fe68 	bl	8002514 <SD_PowerON>
 8001844:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00b      	beq.n	8001864 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e02e      	b.n	80018c2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fd89 	bl	800237c <SD_InitCard>
 800186a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e01b      	b.n	80018c2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001892:	4618      	mov	r0, r3
 8001894:	f000 ffd0 	bl	8002838 <SDMMC_CmdBlockLength>
 8001898:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00f      	beq.n	80018c0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_SD_InitCard+0xf8>)
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	422580a0 	.word	0x422580a0
 80018d0:	004005ff 	.word	0x004005ff

080018d4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b092      	sub	sp, #72	; 0x48
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80018e2:	f7ff f857 	bl	8000994 <HAL_GetTick>
 80018e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d107      	bne.n	8001906 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e1bd      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b01      	cmp	r3, #1
 8001910:	f040 81b0 	bne.w	8001c74 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800191a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	441a      	add	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	429a      	cmp	r2, r3
 8001926:	d907      	bls.n	8001938 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e1a4      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2203      	movs	r2, #3
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2200      	movs	r2, #0
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	2b01      	cmp	r3, #1
 800194e:	d002      	beq.n	8001956 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001962:	2390      	movs	r3, #144	; 0x90
 8001964:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001966:	2302      	movs	r3, #2
 8001968:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800196e:	2301      	movs	r3, #1
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f107 0214 	add.w	r2, r7, #20
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f000 ff2f 	bl	80027e0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d90a      	bls.n	800199e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2202      	movs	r2, #2
 800198c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001994:	4618      	mov	r0, r3
 8001996:	f000 ff93 	bl	80028c0 <SDMMC_CmdReadMultiBlock>
 800199a:	6478      	str	r0, [r7, #68]	; 0x44
 800199c:	e009      	b.n	80019b2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2201      	movs	r2, #1
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 ff66 	bl	800287c <SDMMC_CmdReadSingleBlock>
 80019b0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80019b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d012      	beq.n	80019de <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a7a      	ldr	r2, [pc, #488]	; (8001ba8 <HAL_SD_ReadBlocks+0x2d4>)
 80019be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e151      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80019e2:	e061      	b.n	8001aa8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d03c      	beq.n	8001a6c <HAL_SD_ReadBlocks+0x198>
 80019f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d039      	beq.n	8001a6c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
 80019fc:	e033      	b.n	8001a66 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fe67 	bl	80026d6 <SDIO_ReadFIFO>
 8001a08:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a14:	3301      	adds	r3, #1
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a30:	3b01      	subs	r3, #1
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a40:	3301      	adds	r3, #1
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a46:	3b01      	subs	r3, #1
 8001a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4c:	0e1b      	lsrs	r3, r3, #24
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	3301      	adds	r3, #1
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a62:	3301      	adds	r3, #1
 8001a64:	643b      	str	r3, [r7, #64]	; 0x40
 8001a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a68:	2b07      	cmp	r3, #7
 8001a6a:	d9c8      	bls.n	80019fe <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001a6c:	f7fe ff92 	bl	8000994 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d902      	bls.n	8001a82 <HAL_SD_ReadBlocks+0x1ae>
 8001a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d112      	bne.n	8001aa8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a48      	ldr	r2, [pc, #288]	; (8001ba8 <HAL_SD_ReadBlocks+0x2d4>)
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0ec      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aae:	f240 332a 	movw	r3, #810	; 0x32a
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d095      	beq.n	80019e4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d022      	beq.n	8001b0c <HAL_SD_ReadBlocks+0x238>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d91f      	bls.n	8001b0c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d01b      	beq.n	8001b0c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 ff57 	bl	800298c <SDMMC_CmdStopTransfer>
 8001ade:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d012      	beq.n	8001b0c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <HAL_SD_ReadBlocks+0x2d4>)
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af4:	431a      	orrs	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0ba      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d012      	beq.n	8001b40 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_SD_ReadBlocks+0x2d4>)
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	f043 0208 	orr.w	r2, r3, #8
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0a0      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d012      	beq.n	8001b74 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <HAL_SD_ReadBlocks+0x2d4>)
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e086      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_SD_ReadBlocks+0x2d4>)
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8e:	f043 0220 	orr.w	r2, r3, #32
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e06c      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
 8001ba8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fd90 	bl	80026d6 <SDIO_ReadFIFO>
 8001bb6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	3301      	adds	r3, #1
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bde:	3b01      	subs	r3, #1
 8001be0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bee:	3301      	adds	r3, #1
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	0e1b      	lsrs	r3, r3, #24
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c04:	3301      	adds	r3, #1
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001c0e:	f7fe fec1 	bl	8000994 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d902      	bls.n	8001c24 <HAL_SD_ReadBlocks+0x350>
 8001c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d112      	bne.n	8001c4a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <HAL_SD_ReadBlocks+0x3b8>)
 8001c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e01b      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_SD_ReadBlocks+0x38a>
 8001c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1a6      	bne.n	8001bac <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f240 523a 	movw	r2, #1338	; 0x53a
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e006      	b.n	8001c82 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3748      	adds	r7, #72	; 0x48
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	004005ff 	.word	0x004005ff

08001c90 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b092      	sub	sp, #72	; 0x48
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001c9e:	f7fe fe79 	bl	8000994 <HAL_GetTick>
 8001ca2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e166      	b.n	8001f90 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	f040 8159 	bne.w	8001f82 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	441a      	add	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d907      	bls.n	8001cf4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e14d      	b.n	8001f90 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d002      	beq.n	8001d12 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0e:	025b      	lsls	r3, r3, #9
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	025b      	lsls	r3, r3, #9
 8001d1c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d1e:	2390      	movs	r3, #144	; 0x90
 8001d20:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f107 0218 	add.w	r2, r7, #24
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fd51 	bl	80027e0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d90a      	bls.n	8001d5a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fdf9 	bl	8002948 <SDMMC_CmdWriteMultiBlock>
 8001d56:	6478      	str	r0, [r7, #68]	; 0x44
 8001d58:	e009      	b.n	8001d6e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fdcc 	bl	8002904 <SDMMC_CmdWriteSingleBlock>
 8001d6c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d012      	beq.n	8001d9a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <HAL_SD_WriteBlocks+0x308>)
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d82:	431a      	orrs	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0fa      	b.n	8001f90 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001d9e:	e065      	b.n	8001e6c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d040      	beq.n	8001e30 <HAL_SD_WriteBlocks+0x1a0>
 8001dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d03d      	beq.n	8001e30 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	643b      	str	r3, [r7, #64]	; 0x40
 8001db8:	e037      	b.n	8001e2a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8001dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	021a      	lsls	r2, r3, #8
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dda:	3301      	adds	r3, #1
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de0:	3b01      	subs	r3, #1
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	041a      	lsls	r2, r3, #16
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	3301      	adds	r3, #1
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	061a      	lsls	r2, r3, #24
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e10:	3b01      	subs	r3, #1
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f107 0214 	add.w	r2, r7, #20
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fc66 	bl	80026f0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e26:	3301      	adds	r3, #1
 8001e28:	643b      	str	r3, [r7, #64]	; 0x40
 8001e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	d9c4      	bls.n	8001dba <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001e30:	f7fe fdb0 	bl	8000994 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d902      	bls.n	8001e46 <HAL_SD_WriteBlocks+0x1b6>
 8001e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d112      	bne.n	8001e6c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a53      	ldr	r2, [pc, #332]	; (8001f98 <HAL_SD_WriteBlocks+0x308>)
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e091      	b.n	8001f90 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e72:	f240 331a 	movw	r3, #794	; 0x31a
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d091      	beq.n	8001da0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d022      	beq.n	8001ed0 <HAL_SD_WriteBlocks+0x240>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d91f      	bls.n	8001ed0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d01b      	beq.n	8001ed0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fd75 	bl	800298c <SDMMC_CmdStopTransfer>
 8001ea2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d012      	beq.n	8001ed0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <HAL_SD_WriteBlocks+0x308>)
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e05f      	b.n	8001f90 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	; (8001f98 <HAL_SD_WriteBlocks+0x308>)
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	f043 0208 	orr.w	r2, r3, #8
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e045      	b.n	8001f90 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d012      	beq.n	8001f38 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <HAL_SD_WriteBlocks+0x308>)
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	f043 0202 	orr.w	r2, r3, #2
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e02b      	b.n	8001f90 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <HAL_SD_WriteBlocks+0x308>)
 8001f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	f043 0210 	orr.w	r2, r3, #16
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e011      	b.n	8001f90 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f240 523a 	movw	r2, #1338	; 0x53a
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e006      	b.n	8001f90 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
  }
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3748      	adds	r7, #72	; 0x48
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	004005ff 	.word	0x004005ff

08001f9c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001faa:	0f9b      	lsrs	r3, r3, #30
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb6:	0e9b      	lsrs	r3, r3, #26
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc8:	0e1b      	lsrs	r3, r3, #24
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fda:	0c1b      	lsrs	r3, r3, #16
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ffc:	0d1b      	lsrs	r3, r3, #20
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	b2da      	uxtb	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800201a:	0bdb      	lsrs	r3, r3, #15
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800202c:	0b9b      	lsrs	r3, r3, #14
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800203e:	0b5b      	lsrs	r3, r3, #13
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002050:	0b1b      	lsrs	r3, r3, #12
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	b2da      	uxtb	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	2b00      	cmp	r3, #0
 800206a:	d163      	bne.n	8002134 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002070:	009a      	lsls	r2, r3, #2
 8002072:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002076:	4013      	ands	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800207c:	0f92      	lsrs	r2, r2, #30
 800207e:	431a      	orrs	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002088:	0edb      	lsrs	r3, r3, #27
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	b2da      	uxtb	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800209a:	0e1b      	lsrs	r3, r3, #24
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ac:	0d5b      	lsrs	r3, r3, #21
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020be:	0c9b      	lsrs	r3, r3, #18
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d0:	0bdb      	lsrs	r3, r3, #15
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	7e1b      	ldrb	r3, [r3, #24]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	3302      	adds	r3, #2
 80020f4:	2201      	movs	r2, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80020fe:	fb02 f203 	mul.w	r2, r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	7a1b      	ldrb	r3, [r3, #8]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	2201      	movs	r2, #1
 8002112:	409a      	lsls	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002120:	0a52      	lsrs	r2, r2, #9
 8002122:	fb02 f203 	mul.w	r2, r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002130:	661a      	str	r2, [r3, #96]	; 0x60
 8002132:	e031      	b.n	8002198 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	2b01      	cmp	r3, #1
 800213a:	d11d      	bne.n	8002178 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	431a      	orrs	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	3301      	adds	r3, #1
 8002158:	029a      	lsls	r2, r3, #10
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	661a      	str	r2, [r3, #96]	; 0x60
 8002176:	e00f      	b.n	8002198 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <HAL_SD_GetCardCSD+0x344>)
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e09d      	b.n	80022d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219c:	0b9b      	lsrs	r3, r3, #14
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ae:	09db      	lsrs	r3, r3, #7
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	0fdb      	lsrs	r3, r3, #31
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	0f5b      	lsrs	r3, r3, #29
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	0e9b      	lsrs	r3, r3, #26
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	0d9b      	lsrs	r3, r3, #22
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	b2da      	uxtb	r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	0d5b      	lsrs	r3, r3, #21
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	0bdb      	lsrs	r3, r3, #15
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	0b9b      	lsrs	r3, r3, #14
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	b2da      	uxtb	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	0b5b      	lsrs	r3, r3, #13
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	b2da      	uxtb	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	0b1b      	lsrs	r3, r3, #12
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	0a9b      	lsrs	r3, r3, #10
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	b2da      	uxtb	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	004005ff 	.word	0x004005ff

080022e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f96e 	bl	8002630 <SD_SendStatus>
 8002354:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	0a5b      	lsrs	r3, r3, #9
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002372:	693b      	ldr	r3, [r7, #16]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800237c:	b5b0      	push	{r4, r5, r7, lr}
 800237e:	b094      	sub	sp, #80	; 0x50
 8002380:	af04      	add	r7, sp, #16
 8002382:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002384:	2301      	movs	r3, #1
 8002386:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f9cf 	bl	8002730 <SDIO_GetPowerState>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002398:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800239c:	e0b6      	b.n	800250c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d02f      	beq.n	8002406 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fbb5 	bl	8002b1a <SDMMC_CmdSendCID>
 80023b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SD_InitCard+0x40>
    {
      return errorstate;
 80023b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ba:	e0a7      	b.n	800250c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f9f9 	bl	80027ba <SDIO_GetResponse>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2104      	movs	r1, #4
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f9f0 	bl	80027ba <SDIO_GetResponse>
 80023da:	4602      	mov	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2108      	movs	r1, #8
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f9e7 	bl	80027ba <SDIO_GetResponse>
 80023ec:	4602      	mov	r2, r0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	210c      	movs	r1, #12
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f9de 	bl	80027ba <SDIO_GetResponse>
 80023fe:	4602      	mov	r2, r0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	2b03      	cmp	r3, #3
 800240c:	d00d      	beq.n	800242a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f107 020e 	add.w	r2, r7, #14
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fbbb 	bl	8002b94 <SDMMC_CmdSetRelAdd>
 800241e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <SD_InitCard+0xae>
    {
      return errorstate;
 8002426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002428:	e070      	b.n	800250c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	2b03      	cmp	r3, #3
 8002430:	d036      	beq.n	80024a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	461a      	mov	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f000 fb85 	bl	8002b56 <SDMMC_CmdSendCSD>
 800244c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800244e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	e059      	b.n	800250c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f9ab 	bl	80027ba <SDIO_GetResponse>
 8002464:	4602      	mov	r2, r0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2104      	movs	r1, #4
 8002470:	4618      	mov	r0, r3
 8002472:	f000 f9a2 	bl	80027ba <SDIO_GetResponse>
 8002476:	4602      	mov	r2, r0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2108      	movs	r1, #8
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f999 	bl	80027ba <SDIO_GetResponse>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	210c      	movs	r1, #12
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f990 	bl	80027ba <SDIO_GetResponse>
 800249a:	4602      	mov	r2, r0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2104      	movs	r1, #4
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f987 	bl	80027ba <SDIO_GetResponse>
 80024ac:	4603      	mov	r3, r0
 80024ae:	0d1a      	lsrs	r2, r3, #20
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fd6e 	bl	8001f9c <HAL_SD_GetCardCSD>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80024c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80024ca:	e01f      	b.n	800250c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6819      	ldr	r1, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	461a      	mov	r2, r3
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	4608      	mov	r0, r1
 80024de:	f000 fa77 	bl	80029d0 <SDMMC_CmdSelDesel>
 80024e2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80024e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <SD_InitCard+0x172>
  {
    return errorstate;
 80024ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ec:	e00e      	b.n	800250c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681d      	ldr	r5, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	466c      	mov	r4, sp
 80024f6:	f103 0210 	add.w	r2, r3, #16
 80024fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80024fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002500:	3304      	adds	r3, #4
 8002502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002504:	4628      	mov	r0, r5
 8002506:	f000 f8bb 	bl	8002680 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3740      	adds	r7, #64	; 0x40
 8002510:	46bd      	mov	sp, r7
 8002512:	bdb0      	pop	{r4, r5, r7, pc}

08002514 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fa72 	bl	8002a16 <SDMMC_CmdGoIdleState>
 8002532:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <SD_PowerON+0x2a>
  {
    return errorstate;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	e072      	b.n	8002624 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fa85 	bl	8002a52 <SDMMC_CmdOperCond>
 8002548:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00d      	beq.n	800256c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fa5b 	bl	8002a16 <SDMMC_CmdGoIdleState>
 8002560:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	e05b      	b.n	8002624 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002576:	2b01      	cmp	r3, #1
 8002578:	d137      	bne.n	80025ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fa85 	bl	8002a90 <SDMMC_CmdAppCommand>
 8002586:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d02d      	beq.n	80025ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800258e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002592:	e047      	b.n	8002624 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fa78 	bl	8002a90 <SDMMC_CmdAppCommand>
 80025a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <SD_PowerON+0x98>
    {
      return errorstate;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	e03b      	b.n	8002624 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	491e      	ldr	r1, [pc, #120]	; (800262c <SD_PowerON+0x118>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fa8e 	bl	8002ad4 <SDMMC_CmdAppOperCommand>
 80025b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025c4:	e02e      	b.n	8002624 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f8f4 	bl	80027ba <SDIO_GetResponse>
 80025d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	0fdb      	lsrs	r3, r3, #31
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <SD_PowerON+0xcc>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <SD_PowerON+0xce>
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]

    count++;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3301      	adds	r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d802      	bhi.n	80025fa <SD_PowerON+0xe6>
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0cc      	beq.n	8002594 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002600:	4293      	cmp	r3, r2
 8002602:	d902      	bls.n	800260a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002608:	e00c      	b.n	8002624 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
 800261a:	e002      	b.n	8002622 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	c1100000 	.word	0xc1100000

08002630 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002640:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002644:	e018      	b.n	8002678 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 fabf 	bl	8002bd6 <SDMMC_CmdSendStatus>
 8002658:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	e009      	b.n	8002678 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f8a5 	bl	80027ba <SDIO_GetResponse>
 8002670:	4602      	mov	r2, r0
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002680:	b084      	sub	sp, #16
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	f107 001c 	add.w	r0, r7, #28
 800268e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002696:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002698:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800269a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800269e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80026a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80026a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80026aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80026ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	b004      	add	sp, #16
 80026d4:	4770      	bx	lr

080026d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2203      	movs	r2, #3
 800271e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8002720:	2002      	movs	r0, #2
 8002722:	f7fe f943 	bl	80009ac <HAL_Delay>
  
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0303 	and.w	r3, r3, #3
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800276a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002770:	431a      	orrs	r2, r3
                       Command->CPSM);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8002776:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002786:	f023 030f 	bic.w	r3, r3, #15
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	b2db      	uxtb	r3, r3
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3314      	adds	r3, #20
 80027c8:	461a      	mov	r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
}  
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002806:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800280c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8002812:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800282a:	2300      	movs	r3, #0

}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002846:	2310      	movs	r3, #16
 8002848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800284a:	2340      	movs	r3, #64	; 0x40
 800284c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002856:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff74 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	2110      	movs	r1, #16
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa02 	bl	8002c74 <SDMMC_GetCmdResp1>
 8002870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002872:	69fb      	ldr	r3, [r7, #28]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800288a:	2311      	movs	r3, #17
 800288c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800288e:	2340      	movs	r3, #64	; 0x40
 8002890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ff52 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	2111      	movs	r1, #17
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f9e0 	bl	8002c74 <SDMMC_GetCmdResp1>
 80028b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80028b6:	69fb      	ldr	r3, [r7, #28]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80028ce:	2312      	movs	r3, #18
 80028d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80028d2:	2340      	movs	r3, #64	; 0x40
 80028d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028e0:	f107 0308 	add.w	r3, r7, #8
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ff30 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	2112      	movs	r1, #18
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f9be 	bl	8002c74 <SDMMC_GetCmdResp1>
 80028f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80028fa:	69fb      	ldr	r3, [r7, #28]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3720      	adds	r7, #32
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002912:	2318      	movs	r3, #24
 8002914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002916:	2340      	movs	r3, #64	; 0x40
 8002918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800291e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002922:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002924:	f107 0308 	add.w	r3, r7, #8
 8002928:	4619      	mov	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff0e 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	2118      	movs	r1, #24
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f99c 	bl	8002c74 <SDMMC_GetCmdResp1>
 800293c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800293e:	69fb      	ldr	r3, [r7, #28]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002956:	2319      	movs	r3, #25
 8002958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800295a:	2340      	movs	r3, #64	; 0x40
 800295c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002966:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002968:	f107 0308 	add.w	r3, r7, #8
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff feec 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	2119      	movs	r1, #25
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f97a 	bl	8002c74 <SDMMC_GetCmdResp1>
 8002980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002982:	69fb      	ldr	r3, [r7, #28]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002998:	230c      	movs	r3, #12
 800299a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800299c:	2340      	movs	r3, #64	; 0x40
 800299e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fecb 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80029b6:	4a05      	ldr	r2, [pc, #20]	; (80029cc <SDMMC_CmdStopTransfer+0x40>)
 80029b8:	210c      	movs	r1, #12
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f95a 	bl	8002c74 <SDMMC_GetCmdResp1>
 80029c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029c2:	69fb      	ldr	r3, [r7, #28]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	05f5e100 	.word	0x05f5e100

080029d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80029e0:	2307      	movs	r3, #7
 80029e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029e4:	2340      	movs	r3, #64	; 0x40
 80029e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029f2:	f107 0310 	add.w	r3, r7, #16
 80029f6:	4619      	mov	r1, r3
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff fea7 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	2107      	movs	r1, #7
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f935 	bl	8002c74 <SDMMC_GetCmdResp1>
 8002a0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b088      	sub	sp, #32
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a34:	f107 0308 	add.w	r3, r7, #8
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fe86 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f8eb 	bl	8002c1c <SDMMC_GetCmdError>
 8002a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a48:	69fb      	ldr	r3, [r7, #28]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b088      	sub	sp, #32
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002a5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002a60:	2308      	movs	r3, #8
 8002a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a64:	2340      	movs	r3, #64	; 0x40
 8002a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a72:	f107 0308 	add.w	r3, r7, #8
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fe67 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fae2 	bl	8003048 <SDMMC_GetCmdResp7>
 8002a84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a86:	69fb      	ldr	r3, [r7, #28]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002a9e:	2337      	movs	r3, #55	; 0x37
 8002aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002aa2:	2340      	movs	r3, #64	; 0x40
 8002aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ab0:	f107 0308 	add.w	r3, r7, #8
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fe48 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	2137      	movs	r1, #55	; 0x37
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8d6 	bl	8002c74 <SDMMC_GetCmdResp1>
 8002ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002aca:	69fb      	ldr	r3, [r7, #28]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002aea:	2329      	movs	r3, #41	; 0x29
 8002aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002aee:	2340      	movs	r3, #64	; 0x40
 8002af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002afa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002afc:	f107 0308 	add.w	r3, r7, #8
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fe22 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f9e9 	bl	8002ee0 <SDMMC_GetCmdResp3>
 8002b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b10:	69fb      	ldr	r3, [r7, #28]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b088      	sub	sp, #32
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002b26:	2302      	movs	r3, #2
 8002b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002b2a:	23c0      	movs	r3, #192	; 0xc0
 8002b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b38:	f107 0308 	add.w	r3, r7, #8
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fe04 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f983 	bl	8002e50 <SDMMC_GetCmdResp2>
 8002b4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b088      	sub	sp, #32
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002b64:	2309      	movs	r3, #9
 8002b66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002b68:	23c0      	movs	r3, #192	; 0xc0
 8002b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b76:	f107 0308 	add.w	r3, r7, #8
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff fde5 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f964 	bl	8002e50 <SDMMC_GetCmdResp2>
 8002b88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ba6:	2340      	movs	r3, #64	; 0x40
 8002ba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	4619      	mov	r1, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff fdc6 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	2103      	movs	r1, #3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f9c9 	bl	8002f5c <SDMMC_GetCmdResp6>
 8002bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b088      	sub	sp, #32
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002be4:	230d      	movs	r3, #13
 8002be6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002be8:	2340      	movs	r3, #64	; 0x40
 8002bea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff fda5 	bl	800274c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	210d      	movs	r1, #13
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f833 	bl	8002c74 <SDMMC_GetCmdResp1>
 8002c0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c10:	69fb      	ldr	r3, [r7, #28]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <SDMMC_GetCmdError+0x50>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <SDMMC_GetCmdError+0x54>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	60fa      	str	r2, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002c44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c48:	e009      	b.n	8002c5e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f1      	beq.n	8002c3a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	22c5      	movs	r2, #197	; 0xc5
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	10624dd3 	.word	0x10624dd3

08002c74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002c82:	4b70      	ldr	r3, [pc, #448]	; (8002e44 <SDMMC_GetCmdResp1+0x1d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a70      	ldr	r2, [pc, #448]	; (8002e48 <SDMMC_GetCmdResp1+0x1d4>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	0a5a      	lsrs	r2, r3, #9
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	1e5a      	subs	r2, r3, #1
 8002c9a:	61fa      	str	r2, [r7, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002ca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ca4:	e0c9      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ef      	beq.n	8002c96 <SDMMC_GetCmdResp1+0x22>
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ea      	bne.n	8002c96 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d004      	beq.n	8002cd6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2204      	movs	r2, #4
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	e0b1      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0a6      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	22c5      	movs	r2, #197	; 0xc5
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7ff fd54 	bl	80027a0 <SDIO_GetCommandResponse>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	7afb      	ldrb	r3, [r7, #11]
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d001      	beq.n	8002d06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e099      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002d06:	2100      	movs	r1, #0
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f7ff fd56 	bl	80027ba <SDIO_GetResponse>
 8002d0e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4b4e      	ldr	r3, [pc, #312]	; (8002e4c <SDMMC_GetCmdResp1+0x1d8>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e08d      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	da02      	bge.n	8002d2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002d24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d28:	e087      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002d34:	2340      	movs	r3, #64	; 0x40
 8002d36:	e080      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	e079      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d54:	e071      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d64:	e069      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d74:	e061      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d84:	e059      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d94:	e051      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da4:	e049      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002db0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002db4:	e041      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8002dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc4:	e039      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd4:	e031      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002de0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002de4:	e029      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002df0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002df4:	e021      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002e00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e04:	e019      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002e10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e14:	e011      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8002e20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e24:	e009      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002e30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002e34:	e001      	b.n	8002e3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000000 	.word	0x20000000
 8002e48:	10624dd3 	.word	0x10624dd3
 8002e4c:	fdffe008 	.word	0xfdffe008

08002e50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e58:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <SDMMC_GetCmdResp2+0x88>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <SDMMC_GetCmdResp2+0x8c>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	0a5b      	lsrs	r3, r3, #9
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1e5a      	subs	r2, r3, #1
 8002e72:	60fa      	str	r2, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002e78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e7c:	e026      	b.n	8002ecc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ef      	beq.n	8002e6e <SDMMC_GetCmdResp2+0x1e>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ea      	bne.n	8002e6e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	e00e      	b.n	8002ecc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e003      	b.n	8002ecc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	22c5      	movs	r2, #197	; 0xc5
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	10624dd3 	.word	0x10624dd3

08002ee0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <SDMMC_GetCmdResp3+0x74>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <SDMMC_GetCmdResp3+0x78>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0a5b      	lsrs	r3, r3, #9
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e5a      	subs	r2, r3, #1
 8002f02:	60fa      	str	r2, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002f08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f0c:	e01b      	b.n	8002f46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ef      	beq.n	8002efe <SDMMC_GetCmdResp3+0x1e>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ea      	bne.n	8002efe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2204      	movs	r2, #4
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e003      	b.n	8002f46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	22c5      	movs	r2, #197	; 0xc5
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000
 8002f58:	10624dd3 	.word	0x10624dd3

08002f5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	460b      	mov	r3, r1
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002f6a:	4b35      	ldr	r3, [pc, #212]	; (8003040 <SDMMC_GetCmdResp6+0xe4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a35      	ldr	r2, [pc, #212]	; (8003044 <SDMMC_GetCmdResp6+0xe8>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	0a5b      	lsrs	r3, r3, #9
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	1e5a      	subs	r2, r3, #1
 8002f84:	61fa      	str	r2, [r7, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002f8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f8e:	e052      	b.n	8003036 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ef      	beq.n	8002f80 <SDMMC_GetCmdResp6+0x24>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ea      	bne.n	8002f80 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	e03a      	b.n	8003036 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d004      	beq.n	8002fd6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e02f      	b.n	8003036 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff fbe2 	bl	80027a0 <SDIO_GetCommandResponse>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d001      	beq.n	8002fea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e025      	b.n	8003036 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22c5      	movs	r2, #197	; 0xc5
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff fbe1 	bl	80027ba <SDIO_GetResponse>
 8002ff8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800300e:	2300      	movs	r3, #0
 8003010:	e011      	b.n	8003036 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800301c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003020:	e009      	b.n	8003036 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800302c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003030:	e001      	b.n	8003036 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003036:	4618      	mov	r0, r3
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000
 8003044:	10624dd3 	.word	0x10624dd3

08003048 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <SDMMC_GetCmdResp7+0x94>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <SDMMC_GetCmdResp7+0x98>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0a5b      	lsrs	r3, r3, #9
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1e5a      	subs	r2, r3, #1
 800306a:	60fa      	str	r2, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003074:	e02c      	b.n	80030d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ef      	beq.n	8003066 <SDMMC_GetCmdResp7+0x1e>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ea      	bne.n	8003066 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d004      	beq.n	80030a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2204      	movs	r2, #4
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80030a2:	2304      	movs	r3, #4
 80030a4:	e014      	b.n	80030d0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e009      	b.n	80030d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2240      	movs	r2, #64	; 0x40
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80030ce:	2300      	movs	r3, #0
  
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	20000000 	.word	0x20000000
 80030e0:	10624dd3 	.word	0x10624dd3

080030e4 <FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void FATFS_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80030e8:	4904      	ldr	r1, [pc, #16]	; (80030fc <FATFS_Init+0x18>)
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <FATFS_Init+0x1c>)
 80030ec:	f001 fe9e 	bl	8004e2c <FATFS_LinkDriver>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <FATFS_Init+0x20>)
 80030f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000550 	.word	0x20000550
 8003100:	08004f2c 	.word	0x08004f2c
 8003104:	2000054c 	.word	0x2000054c

08003108 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800310c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003122:	f000 f86b 	bl	80031fc <BSP_SD_IsDetected>
 8003126:	4603      	mov	r3, r0
 8003128:	2b01      	cmp	r3, #1
 800312a:	d001      	beq.n	8003130 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e005      	b.n	800313c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003130:	4804      	ldr	r0, [pc, #16]	; (8003144 <BSP_SD_Init+0x2c>)
 8003132:	f7fe fb21 	bl	8001778 <HAL_SD_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800313a:	79fb      	ldrb	r3, [r7, #7]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200004bc 	.word	0x200004bc

08003148 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	4806      	ldr	r0, [pc, #24]	; (8003180 <BSP_SD_ReadBlocks+0x38>)
 8003166:	f7fe fbb5 	bl	80018d4 <HAL_SD_ReadBlocks>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003174:	7dfb      	ldrb	r3, [r7, #23]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200004bc 	.word	0x200004bc

08003184 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	68f9      	ldr	r1, [r7, #12]
 80031a0:	4806      	ldr	r0, [pc, #24]	; (80031bc <BSP_SD_WriteBlocks+0x38>)
 80031a2:	f7fe fd75 	bl	8001c90 <HAL_SD_WriteBlocks>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200004bc 	.word	0x200004bc

080031c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80031c4:	4805      	ldr	r0, [pc, #20]	; (80031dc <BSP_SD_GetCardState+0x1c>)
 80031c6:	f7ff f8b9 	bl	800233c <HAL_SD_GetCardState>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200004bc 	.word	0x200004bc

080031e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4803      	ldr	r0, [pc, #12]	; (80031f8 <BSP_SD_GetCardInfo+0x18>)
 80031ec:	f7ff f87a 	bl	80022e4 <HAL_SD_GetCardInfo>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200004bc 	.word	0x200004bc

080031fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003202:	2301      	movs	r3, #1
 8003204:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	b2db      	uxtb	r3, r3
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <SD_CheckStatus+0x38>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003228:	f7ff ffca 	bl	80031c0 <BSP_SD_GetCardState>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <SD_CheckStatus+0x38>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <SD_CheckStatus+0x38>)
 8003240:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003242:	4b03      	ldr	r3, [pc, #12]	; (8003250 <SD_CheckStatus+0x38>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000009 	.word	0x20000009

08003254 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <SD_initialize+0x38>)
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003264:	f7ff ff58 	bl	8003118 <BSP_SD_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d107      	bne.n	800327e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ffd1 	bl	8003218 <SD_CheckStatus>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <SD_initialize+0x38>)
 800327c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800327e:	4b03      	ldr	r3, [pc, #12]	; (800328c <SD_initialize+0x38>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000009 	.word	0x20000009

08003290 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ffbb 	bl	8003218 <SD_CheckStatus>
 80032a2:	4603      	mov	r3, r0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	4603      	mov	r3, r0
 80032ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	68b8      	ldr	r0, [r7, #8]
 80032ca:	f7ff ff3d 	bl	8003148 <BSP_SD_ReadBlocks>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80032d4:	bf00      	nop
 80032d6:	f7ff ff73 	bl	80031c0 <BSP_SD_GetCardState>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1fa      	bne.n	80032d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003302:	f04f 33ff 	mov.w	r3, #4294967295
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	68b8      	ldr	r0, [r7, #8]
 800330c:	f7ff ff3a 	bl	8003184 <BSP_SD_WriteBlocks>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003316:	bf00      	nop
 8003318:	f7ff ff52 	bl	80031c0 <BSP_SD_GetCardState>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1fa      	bne.n	8003318 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003326:	7dfb      	ldrb	r3, [r7, #23]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	603a      	str	r2, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
 800333c:	460b      	mov	r3, r1
 800333e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <SD_ioctl+0xac>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <SD_ioctl+0x28>
 8003354:	2303      	movs	r3, #3
 8003356:	e03c      	b.n	80033d2 <SD_ioctl+0xa2>

  switch (cmd)
 8003358:	79bb      	ldrb	r3, [r7, #6]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d834      	bhi.n	80033c8 <SD_ioctl+0x98>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <SD_ioctl+0x34>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003375 	.word	0x08003375
 8003368:	0800337d 	.word	0x0800337d
 800336c:	08003395 	.word	0x08003395
 8003370:	080033af 	.word	0x080033af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800337a:	e028      	b.n	80033ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff2d 	bl	80031e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003392:	e01c      	b.n	80033ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003394:	f107 030c 	add.w	r3, r7, #12
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff21 	bl	80031e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80033ac:	e00f      	b.n	80033ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80033ae:	f107 030c 	add.w	r3, r7, #12
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff14 	bl	80031e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	0a5a      	lsrs	r2, r3, #9
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80033c6:	e002      	b.n	80033ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80033c8:	2304      	movs	r3, #4
 80033ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80033ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3730      	adds	r7, #48	; 0x30
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000009 	.word	0x20000009

080033e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	4a08      	ldr	r2, [pc, #32]	; (8003410 <disk_status+0x30>)
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	79fa      	ldrb	r2, [r7, #7]
 80033f8:	4905      	ldr	r1, [pc, #20]	; (8003410 <disk_status+0x30>)
 80033fa:	440a      	add	r2, r1
 80033fc:	7a12      	ldrb	r2, [r2, #8]
 80033fe:	4610      	mov	r0, r2
 8003400:	4798      	blx	r3
 8003402:	4603      	mov	r3, r0
 8003404:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000050 	.word	0x20000050

08003414 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	4a0d      	ldr	r2, [pc, #52]	; (800345c <disk_initialize+0x48>)
 8003426:	5cd3      	ldrb	r3, [r2, r3]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d111      	bne.n	8003450 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	4a0b      	ldr	r2, [pc, #44]	; (800345c <disk_initialize+0x48>)
 8003430:	2101      	movs	r1, #1
 8003432:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	4a09      	ldr	r2, [pc, #36]	; (800345c <disk_initialize+0x48>)
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	79fa      	ldrb	r2, [r7, #7]
 8003442:	4906      	ldr	r1, [pc, #24]	; (800345c <disk_initialize+0x48>)
 8003444:	440a      	add	r2, r1
 8003446:	7a12      	ldrb	r2, [r2, #8]
 8003448:	4610      	mov	r0, r2
 800344a:	4798      	blx	r3
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000050 	.word	0x20000050

08003460 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4603      	mov	r3, r0
 800346e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <disk_read+0x3c>)
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	689c      	ldr	r4, [r3, #8]
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	4a07      	ldr	r2, [pc, #28]	; (800349c <disk_read+0x3c>)
 8003480:	4413      	add	r3, r2
 8003482:	7a18      	ldrb	r0, [r3, #8]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	47a0      	blx	r4
 800348c:	4603      	mov	r3, r0
 800348e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003490:	7dfb      	ldrb	r3, [r7, #23]
}
 8003492:	4618      	mov	r0, r3
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd90      	pop	{r4, r7, pc}
 800349a:	bf00      	nop
 800349c:	20000050 	.word	0x20000050

080034a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4603      	mov	r3, r0
 80034ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <disk_write+0x3c>)
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	68dc      	ldr	r4, [r3, #12]
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <disk_write+0x3c>)
 80034c0:	4413      	add	r3, r2
 80034c2:	7a18      	ldrb	r0, [r3, #8]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	47a0      	blx	r4
 80034cc:	4603      	mov	r3, r0
 80034ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd90      	pop	{r4, r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000050 	.word	0x20000050

080034e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	603a      	str	r2, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
 80034ec:	460b      	mov	r3, r1
 80034ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <disk_ioctl+0x38>)
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	79fa      	ldrb	r2, [r7, #7]
 80034fe:	4906      	ldr	r1, [pc, #24]	; (8003518 <disk_ioctl+0x38>)
 8003500:	440a      	add	r2, r1
 8003502:	7a10      	ldrb	r0, [r2, #8]
 8003504:	79b9      	ldrb	r1, [r7, #6]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	4798      	blx	r3
 800350a:	4603      	mov	r3, r0
 800350c:	73fb      	strb	r3, [r7, #15]
  return res;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000050 	.word	0x20000050

0800351c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3301      	adds	r3, #1
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800352c:	89fb      	ldrh	r3, [r7, #14]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	b21a      	sxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b21b      	sxth	r3, r3
 8003538:	4313      	orrs	r3, r2
 800353a:	b21b      	sxth	r3, r3
 800353c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800353e:	89fb      	ldrh	r3, [r7, #14]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3303      	adds	r3, #3
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	3202      	adds	r2, #2
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	3201      	adds	r2, #1
 8003572:	7812      	ldrb	r2, [r2, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
	return rv;
 8003584:	68fb      	ldr	r3, [r7, #12]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	887a      	ldrh	r2, [r7, #2]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	887b      	ldrh	r3, [r7, #2]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	0a1b      	lsrs	r3, r3, #8
 8003606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	1c53      	adds	r3, r2, #1
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	1c59      	adds	r1, r3, #1
 8003644:	6179      	str	r1, [r7, #20]
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3b01      	subs	r3, #1
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f1      	bne.n	800363a <mem_cpy+0x1a>
	}
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003662:	b480      	push	{r7}
 8003664:	b087      	sub	sp, #28
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	617a      	str	r2, [r7, #20]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3b01      	subs	r3, #1
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f3      	bne.n	8003672 <mem_set+0x10>
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	61fa      	str	r2, [r7, #28]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	61ba      	str	r2, [r7, #24]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	1acb      	subs	r3, r1, r3
 80036c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <mem_cmp+0x40>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0eb      	beq.n	80036b0 <mem_cmp+0x18>

	return r;
 80036d8:	697b      	ldr	r3, [r7, #20]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3724      	adds	r7, #36	; 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80036f0:	e002      	b.n	80036f8 <chk_chr+0x12>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3301      	adds	r3, #1
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <chk_chr+0x26>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	4293      	cmp	r3, r2
 800370a:	d1f2      	bne.n	80036f2 <chk_chr+0xc>
	return *str;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	781b      	ldrb	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e010      	b.n	800374c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800372a:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <clear_lock+0x44>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	4413      	add	r3, r2
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	429a      	cmp	r2, r3
 8003738:	d105      	bne.n	8003746 <clear_lock+0x2a>
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <clear_lock+0x44>)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	4413      	add	r3, r2
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3301      	adds	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d9eb      	bls.n	800372a <clear_lock+0xe>
	}
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	20000030 	.word	0x20000030

08003764 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	78db      	ldrb	r3, [r3, #3]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d034      	beq.n	80037e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7858      	ldrb	r0, [r3, #1]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003788:	2301      	movs	r3, #1
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	f7ff fe88 	bl	80034a0 <disk_write>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <sync_window+0x38>
			res = FR_DISK_ERR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e022      	b.n	80037e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	1ad2      	subs	r2, r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d217      	bcs.n	80037e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	789b      	ldrb	r3, [r3, #2]
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	e010      	b.n	80037dc <sync_window+0x78>
					wsect += fs->fsize;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4413      	add	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7858      	ldrb	r0, [r3, #1]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80037ce:	2301      	movs	r3, #1
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	f7ff fe65 	bl	80034a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3b01      	subs	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d8eb      	bhi.n	80037ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d01b      	beq.n	800383c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ffad 	bl	8003764 <sync_window>
 800380a:	4603      	mov	r3, r0
 800380c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d113      	bne.n	800383c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7858      	ldrb	r0, [r3, #1]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800381e:	2301      	movs	r3, #1
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	f7ff fe1d 	bl	8003460 <disk_read>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d004      	beq.n	8003836 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff87 	bl	8003764 <sync_window>
 8003856:	4603      	mov	r3, r0
 8003858:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d158      	bne.n	8003912 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d148      	bne.n	80038fa <sync_fs+0xb2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	791b      	ldrb	r3, [r3, #4]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d144      	bne.n	80038fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3330      	adds	r3, #48	; 0x30
 8003874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fef1 	bl	8003662 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3330      	adds	r3, #48	; 0x30
 8003884:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003888:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fe80 	bl	8003592 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3330      	adds	r3, #48	; 0x30
 8003896:	4921      	ldr	r1, [pc, #132]	; (800391c <sync_fs+0xd4>)
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fe95 	bl	80035c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3330      	adds	r3, #48	; 0x30
 80038a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80038a6:	491e      	ldr	r1, [pc, #120]	; (8003920 <sync_fs+0xd8>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fe8d 	bl	80035c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3330      	adds	r3, #48	; 0x30
 80038b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f7ff fe83 	bl	80035c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3330      	adds	r3, #48	; 0x30
 80038c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7ff fe79 	bl	80035c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7858      	ldrb	r0, [r3, #1]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	2301      	movs	r3, #1
 80038f0:	f7ff fdd6 	bl	80034a0 <disk_write>
			fs->fsi_flag = 0;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	785b      	ldrb	r3, [r3, #1]
 80038fe:	2200      	movs	r2, #0
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fdec 	bl	80034e0 <disk_ioctl>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <sync_fs+0xca>
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	41615252 	.word	0x41615252
 8003920:	61417272 	.word	0x61417272

08003924 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	3b02      	subs	r3, #2
 8003932:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	3b02      	subs	r3, #2
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d301      	bcc.n	8003944 <clust2sect+0x20>
 8003940:	2300      	movs	r3, #0
 8003942:	e008      	b.n	8003956 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	895b      	ldrh	r3, [r3, #10]
 8003948:	461a      	mov	r2, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	fb03 f202 	mul.w	r2, r3, r2
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	4413      	add	r3, r2
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d904      	bls.n	8003982 <get_fat+0x20>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003982:	2301      	movs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	e08f      	b.n	8003aa8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d062      	beq.n	8003a5c <get_fat+0xfa>
 8003996:	2b03      	cmp	r3, #3
 8003998:	dc7c      	bgt.n	8003a94 <get_fat+0x132>
 800399a:	2b01      	cmp	r3, #1
 800399c:	d002      	beq.n	80039a4 <get_fat+0x42>
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d042      	beq.n	8003a28 <get_fat+0xc6>
 80039a2:	e077      	b.n	8003a94 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6a1a      	ldr	r2, [r3, #32]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	0a5b      	lsrs	r3, r3, #9
 80039ba:	4413      	add	r3, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	6938      	ldr	r0, [r7, #16]
 80039c0:	f7ff ff14 	bl	80037ec <move_window>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d167      	bne.n	8003a9a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	60fa      	str	r2, [r7, #12]
 80039d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	0a5b      	lsrs	r3, r3, #9
 80039e6:	4413      	add	r3, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	6938      	ldr	r0, [r7, #16]
 80039ec:	f7ff fefe 	bl	80037ec <move_window>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d153      	bne.n	8003a9e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <get_fat+0xbc>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	e002      	b.n	8003a24 <get_fat+0xc2>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	617b      	str	r3, [r7, #20]
			break;
 8003a26:	e03f      	b.n	8003aa8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6a1a      	ldr	r2, [r3, #32]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	4413      	add	r3, r2
 8003a32:	4619      	mov	r1, r3
 8003a34:	6938      	ldr	r0, [r7, #16]
 8003a36:	f7ff fed9 	bl	80037ec <move_window>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d130      	bne.n	8003aa2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003a4e:	4413      	add	r3, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fd63 	bl	800351c <ld_word>
 8003a56:	4603      	mov	r3, r0
 8003a58:	617b      	str	r3, [r7, #20]
			break;
 8003a5a:	e025      	b.n	8003aa8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	09db      	lsrs	r3, r3, #7
 8003a64:	4413      	add	r3, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	6938      	ldr	r0, [r7, #16]
 8003a6a:	f7ff febf 	bl	80037ec <move_window>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d118      	bne.n	8003aa6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003a82:	4413      	add	r3, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fd61 	bl	800354c <ld_dword>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a90:	617b      	str	r3, [r7, #20]
			break;
 8003a92:	e009      	b.n	8003aa8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003a94:	2301      	movs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	e006      	b.n	8003aa8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a9a:	bf00      	nop
 8003a9c:	e004      	b.n	8003aa8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a9e:	bf00      	nop
 8003aa0:	e002      	b.n	8003aa8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003aa6:	bf00      	nop
		}
	}

	return val;
 8003aa8:	697b      	ldr	r3, [r7, #20]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003ab2:	b590      	push	{r4, r7, lr}
 8003ab4:	b089      	sub	sp, #36	; 0x24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	f240 80d2 	bls.w	8003c6e <put_fat+0x1bc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	f080 80cc 	bcs.w	8003c6e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	f000 8096 	beq.w	8003c0c <put_fat+0x15a>
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	f300 80cd 	bgt.w	8003c80 <put_fat+0x1ce>
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d002      	beq.n	8003af0 <put_fat+0x3e>
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d06e      	beq.n	8003bcc <put_fat+0x11a>
 8003aee:	e0c7      	b.n	8003c80 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4413      	add	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1a      	ldr	r2, [r3, #32]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	0a5b      	lsrs	r3, r3, #9
 8003b06:	4413      	add	r3, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff fe6e 	bl	80037ec <move_window>
 8003b10:	4603      	mov	r3, r0
 8003b12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b14:	7ffb      	ldrb	r3, [r7, #31]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 80ab 	bne.w	8003c72 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1c59      	adds	r1, r3, #1
 8003b26:	61b9      	str	r1, [r7, #24]
 8003b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2c:	4413      	add	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <put_fat+0xa4>
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b25b      	sxtb	r3, r3
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	b25a      	sxtb	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	e001      	b.n	8003b5a <put_fat+0xa8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	0a5b      	lsrs	r3, r3, #9
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff fe3b 	bl	80037ec <move_window>
 8003b76:	4603      	mov	r3, r0
 8003b78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b7a:	7ffb      	ldrb	r3, [r7, #31]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d17a      	bne.n	8003c76 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8c:	4413      	add	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <put_fat+0xf0>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	e00e      	b.n	8003bc0 <put_fat+0x10e>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b25b      	sxtb	r3, r3
 8003ba8:	f023 030f 	bic.w	r3, r3, #15
 8003bac:	b25a      	sxtb	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	b25b      	sxtb	r3, r3
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	70da      	strb	r2, [r3, #3]
			break;
 8003bca:	e059      	b.n	8003c80 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff fe07 	bl	80037ec <move_window>
 8003bde:	4603      	mov	r3, r0
 8003be0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d148      	bne.n	8003c7a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003bf6:	4413      	add	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	b292      	uxth	r2, r2
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fcc7 	bl	8003592 <st_word>
			fs->wflag = 1;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	70da      	strb	r2, [r3, #3]
			break;
 8003c0a:	e039      	b.n	8003c80 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	09db      	lsrs	r3, r3, #7
 8003c14:	4413      	add	r3, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff fde7 	bl	80037ec <move_window>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d12a      	bne.n	8003c7e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003c3c:	4413      	add	r3, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fc84 	bl	800354c <ld_dword>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c4a:	4323      	orrs	r3, r4
 8003c4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003c5c:	4413      	add	r3, r2
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fcb1 	bl	80035c8 <st_dword>
			fs->wflag = 1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	70da      	strb	r2, [r3, #3]
			break;
 8003c6c:	e008      	b.n	8003c80 <put_fat+0x1ce>
		}
	}
 8003c6e:	bf00      	nop
 8003c70:	e006      	b.n	8003c80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003c72:	bf00      	nop
 8003c74:	e004      	b.n	8003c80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003c76:	bf00      	nop
 8003c78:	e002      	b.n	8003c80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003c7e:	bf00      	nop
	return res;
 8003c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	; 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd90      	pop	{r4, r7, pc}

08003c8a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b088      	sub	sp, #32
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d904      	bls.n	8003cb0 <remove_chain+0x26>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d301      	bcc.n	8003cb4 <remove_chain+0x2a>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e04b      	b.n	8003d4c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	69b8      	ldr	r0, [r7, #24]
 8003cc2:	f7ff fef6 	bl	8003ab2 <put_fat>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003cca:	7ffb      	ldrb	r3, [r7, #31]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <remove_chain+0x4a>
 8003cd0:	7ffb      	ldrb	r3, [r7, #31]
 8003cd2:	e03b      	b.n	8003d4c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff fe43 	bl	8003962 <get_fat>
 8003cdc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d031      	beq.n	8003d48 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <remove_chain+0x64>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e02e      	b.n	8003d4c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d101      	bne.n	8003cfa <remove_chain+0x70>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e028      	b.n	8003d4c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	69b8      	ldr	r0, [r7, #24]
 8003d00:	f7ff fed7 	bl	8003ab2 <put_fat>
 8003d04:	4603      	mov	r3, r0
 8003d06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <remove_chain+0x88>
 8003d0e:	7ffb      	ldrb	r3, [r7, #31]
 8003d10:	e01c      	b.n	8003d4c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	3b02      	subs	r3, #2
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d20b      	bcs.n	8003d38 <remove_chain+0xae>
			fs->free_clst++;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	791b      	ldrb	r3, [r3, #4]
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3c6      	bcc.n	8003cd4 <remove_chain+0x4a>
 8003d46:	e000      	b.n	8003d4a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003d48:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10d      	bne.n	8003d86 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <create_chain+0x2c>
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d31b      	bcc.n	8003db8 <create_chain+0x64>
 8003d80:	2301      	movs	r3, #1
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	e018      	b.n	8003db8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003d86:	6839      	ldr	r1, [r7, #0]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fdea 	bl	8003962 <get_fat>
 8003d8e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d801      	bhi.n	8003d9a <create_chain+0x46>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e070      	b.n	8003e7c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d101      	bne.n	8003da6 <create_chain+0x52>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	e06a      	b.n	8003e7c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d201      	bcs.n	8003db4 <create_chain+0x60>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	e063      	b.n	8003e7c <create_chain+0x128>
		scl = clst;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d307      	bcc.n	8003ddc <create_chain+0x88>
				ncl = 2;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d901      	bls.n	8003ddc <create_chain+0x88>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e04f      	b.n	8003e7c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003ddc:	69f9      	ldr	r1, [r7, #28]
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff fdbf 	bl	8003962 <get_fat>
 8003de4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d003      	beq.n	8003dfa <create_chain+0xa6>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d101      	bne.n	8003dfe <create_chain+0xaa>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	e03e      	b.n	8003e7c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d1da      	bne.n	8003dbc <create_chain+0x68>
 8003e06:	2300      	movs	r3, #0
 8003e08:	e038      	b.n	8003e7c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003e0a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e10:	69f9      	ldr	r1, [r7, #28]
 8003e12:	6938      	ldr	r0, [r7, #16]
 8003e14:	f7ff fe4d 	bl	8003ab2 <put_fat>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <create_chain+0xe2>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	6839      	ldr	r1, [r7, #0]
 8003e2c:	6938      	ldr	r0, [r7, #16]
 8003e2e:	f7ff fe40 	bl	8003ab2 <put_fat>
 8003e32:	4603      	mov	r3, r0
 8003e34:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <create_chain+0x116>
		fs->last_clst = ncl;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	3b02      	subs	r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d804      	bhi.n	8003e5a <create_chain+0x106>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	791b      	ldrb	r3, [r3, #4]
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	711a      	strb	r2, [r3, #4]
 8003e68:	e007      	b.n	8003e7a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d102      	bne.n	8003e76 <create_chain+0x122>
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
 8003e74:	e000      	b.n	8003e78 <create_chain+0x124>
 8003e76:	2301      	movs	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003e7a:	69fb      	ldr	r3, [r7, #28]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e9a:	d204      	bcs.n	8003ea6 <dir_sdi+0x22>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <dir_sdi+0x26>
		return FR_INT_ERR;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e063      	b.n	8003f72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <dir_sdi+0x46>
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d902      	bls.n	8003eca <dir_sdi+0x46>
		clst = fs->dirbase;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10c      	bne.n	8003eea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	8912      	ldrh	r2, [r2, #8]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d301      	bcc.n	8003ee0 <dir_sdi+0x5c>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e048      	b.n	8003f72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	61da      	str	r2, [r3, #28]
 8003ee8:	e029      	b.n	8003f3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	895b      	ldrh	r3, [r3, #10]
 8003eee:	025b      	lsls	r3, r3, #9
 8003ef0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003ef2:	e019      	b.n	8003f28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6979      	ldr	r1, [r7, #20]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fd32 	bl	8003962 <get_fat>
 8003efe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d101      	bne.n	8003f0c <dir_sdi+0x88>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e032      	b.n	8003f72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d904      	bls.n	8003f1c <dir_sdi+0x98>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d301      	bcc.n	8003f20 <dir_sdi+0x9c>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e028      	b.n	8003f72 <dir_sdi+0xee>
			ofs -= csz;
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d2e1      	bcs.n	8003ef4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003f30:	6979      	ldr	r1, [r7, #20]
 8003f32:	6938      	ldr	r0, [r7, #16]
 8003f34:	f7ff fcf6 	bl	8003924 <clust2sect>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <dir_sdi+0xcc>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e010      	b.n	8003f72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	0a5b      	lsrs	r3, r3, #9
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6a:	441a      	add	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	3320      	adds	r3, #32
 8003f90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <dir_next+0x28>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa0:	d301      	bcc.n	8003fa6 <dir_next+0x2c>
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	e0aa      	b.n	80040fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 8098 	bne.w	80040e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	8912      	ldrh	r2, [r2, #8]
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	f0c0 8088 	bcc.w	80040e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	61da      	str	r2, [r3, #28]
 8003fd8:	2304      	movs	r3, #4
 8003fda:	e08f      	b.n	80040fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	0a5b      	lsrs	r3, r3, #9
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	8952      	ldrh	r2, [r2, #10]
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d17a      	bne.n	80040e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7ff fcb4 	bl	8003962 <get_fat>
 8003ffa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d801      	bhi.n	8004006 <dir_next+0x8c>
 8004002:	2302      	movs	r3, #2
 8004004:	e07a      	b.n	80040fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d101      	bne.n	8004012 <dir_next+0x98>
 800400e:	2301      	movs	r3, #1
 8004010:	e074      	b.n	80040fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	429a      	cmp	r2, r3
 800401a:	d358      	bcc.n	80040ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	61da      	str	r2, [r3, #28]
 8004028:	2304      	movs	r3, #4
 800402a:	e067      	b.n	80040fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7ff fe8d 	bl	8003d54 <create_chain>
 800403a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <dir_next+0xcc>
 8004042:	2307      	movs	r3, #7
 8004044:	e05a      	b.n	80040fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <dir_next+0xd6>
 800404c:	2302      	movs	r3, #2
 800404e:	e055      	b.n	80040fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d101      	bne.n	800405c <dir_next+0xe2>
 8004058:	2301      	movs	r3, #1
 800405a:	e04f      	b.n	80040fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff fb81 	bl	8003764 <sync_window>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <dir_next+0xf2>
 8004068:	2301      	movs	r3, #1
 800406a:	e047      	b.n	80040fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3330      	adds	r3, #48	; 0x30
 8004070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff faf3 	bl	8003662 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	6979      	ldr	r1, [r7, #20]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fc4e 	bl	8003924 <clust2sect>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c
 800408e:	e012      	b.n	80040b6 <dir_next+0x13c>
						fs->wflag = 1;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff fb64 	bl	8003764 <sync_window>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <dir_next+0x12c>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e02a      	b.n	80040fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	3301      	adds	r3, #1
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	895b      	ldrh	r3, [r3, #10]
 80040ba:	461a      	mov	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4293      	cmp	r3, r2
 80040c0:	d3e6      	bcc.n	8004090 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad2      	subs	r2, r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80040d4:	6979      	ldr	r1, [r7, #20]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f7ff fc24 	bl	8003924 <clust2sect>
 80040dc:	4602      	mov	r2, r0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004114:	2100      	movs	r1, #0
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff feb4 	bl	8003e84 <dir_sdi>
 800411c:	4603      	mov	r3, r0
 800411e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d12b      	bne.n	800417e <dir_alloc+0x7a>
		n = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	4619      	mov	r1, r3
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7ff fb5b 	bl	80037ec <move_window>
 8004136:	4603      	mov	r3, r0
 8004138:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11d      	bne.n	800417c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2be5      	cmp	r3, #229	; 0xe5
 8004148:	d004      	beq.n	8004154 <dir_alloc+0x50>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d107      	bne.n	8004164 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3301      	adds	r3, #1
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d102      	bne.n	8004168 <dir_alloc+0x64>
 8004162:	e00c      	b.n	800417e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004168:	2101      	movs	r1, #1
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff ff05 	bl	8003f7a <dir_next>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0d7      	beq.n	800412a <dir_alloc+0x26>
 800417a:	e000      	b.n	800417e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800417c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d101      	bne.n	8004188 <dir_alloc+0x84>
 8004184:	2307      	movs	r3, #7
 8004186:	75fb      	strb	r3, [r7, #23]
	return res;
 8004188:	7dfb      	ldrb	r3, [r7, #23]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	331a      	adds	r3, #26
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff f9bb 	bl	800351c <ld_word>
 80041a6:	4603      	mov	r3, r0
 80041a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d109      	bne.n	80041c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff f9b0 	bl	800351c <ld_word>
 80041bc:	4603      	mov	r3, r0
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	331a      	adds	r3, #26
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	b292      	uxth	r2, r2
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff f9d3 	bl	8003592 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d109      	bne.n	8004208 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f103 0214 	add.w	r2, r3, #20
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	b29b      	uxth	r3, r3
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f7ff f9c5 	bl	8003592 <st_word>
	}
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800421e:	2100      	movs	r1, #0
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fe2f 	bl	8003e84 <dir_sdi>
 8004226:	4603      	mov	r3, r0
 8004228:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <dir_find+0x24>
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	e03e      	b.n	80042b2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	4619      	mov	r1, r3
 800423a:	6938      	ldr	r0, [r7, #16]
 800423c:	f7ff fad6 	bl	80037ec <move_window>
 8004240:	4603      	mov	r3, r0
 8004242:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d12f      	bne.n	80042aa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <dir_find+0x4e>
 8004258:	2304      	movs	r3, #4
 800425a:	75fb      	strb	r3, [r7, #23]
 800425c:	e028      	b.n	80042b0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	330b      	adds	r3, #11
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800426a:	b2da      	uxtb	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	330b      	adds	r3, #11
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <dir_find+0x86>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a18      	ldr	r0, [r3, #32]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3324      	adds	r3, #36	; 0x24
 8004288:	220b      	movs	r2, #11
 800428a:	4619      	mov	r1, r3
 800428c:	f7ff fa04 	bl	8003698 <mem_cmp>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004296:	2100      	movs	r1, #0
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff fe6e 	bl	8003f7a <dir_next>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0c5      	beq.n	8004234 <dir_find+0x24>
 80042a8:	e002      	b.n	80042b0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80042ae:	bf00      	nop

	return res;
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80042c8:	2101      	movs	r1, #1
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff1a 	bl	8004104 <dir_alloc>
 80042d0:	4603      	mov	r3, r0
 80042d2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d11c      	bne.n	8004314 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4619      	mov	r1, r3
 80042e0:	68b8      	ldr	r0, [r7, #8]
 80042e2:	f7ff fa83 	bl	80037ec <move_window>
 80042e6:	4603      	mov	r3, r0
 80042e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d111      	bne.n	8004314 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	2220      	movs	r2, #32
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff f9b2 	bl	8003662 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a18      	ldr	r0, [r3, #32]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	220b      	movs	r2, #11
 8004308:	4619      	mov	r1, r3
 800430a:	f7ff f989 	bl	8003620 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2201      	movs	r2, #1
 8004312:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3324      	adds	r3, #36	; 0x24
 8004334:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004336:	220b      	movs	r2, #11
 8004338:	2120      	movs	r1, #32
 800433a:	68b8      	ldr	r0, [r7, #8]
 800433c:	f7ff f991 	bl	8003662 <mem_set>
	si = i = 0; ni = 8;
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	2308      	movs	r3, #8
 800434a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	61fa      	str	r2, [r7, #28]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800435a:	7efb      	ldrb	r3, [r7, #27]
 800435c:	2b20      	cmp	r3, #32
 800435e:	d94e      	bls.n	80043fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004360:	7efb      	ldrb	r3, [r7, #27]
 8004362:	2b2f      	cmp	r3, #47	; 0x2f
 8004364:	d006      	beq.n	8004374 <create_name+0x54>
 8004366:	7efb      	ldrb	r3, [r7, #27]
 8004368:	2b5c      	cmp	r3, #92	; 0x5c
 800436a:	d110      	bne.n	800438e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800436c:	e002      	b.n	8004374 <create_name+0x54>
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3301      	adds	r3, #1
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b2f      	cmp	r3, #47	; 0x2f
 800437e:	d0f6      	beq.n	800436e <create_name+0x4e>
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b5c      	cmp	r3, #92	; 0x5c
 800438a:	d0f0      	beq.n	800436e <create_name+0x4e>
			break;
 800438c:	e038      	b.n	8004400 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800438e:	7efb      	ldrb	r3, [r7, #27]
 8004390:	2b2e      	cmp	r3, #46	; 0x2e
 8004392:	d003      	beq.n	800439c <create_name+0x7c>
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	d30c      	bcc.n	80043b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b0b      	cmp	r3, #11
 80043a0:	d002      	beq.n	80043a8 <create_name+0x88>
 80043a2:	7efb      	ldrb	r3, [r7, #27]
 80043a4:	2b2e      	cmp	r3, #46	; 0x2e
 80043a6:	d001      	beq.n	80043ac <create_name+0x8c>
 80043a8:	2306      	movs	r3, #6
 80043aa:	e044      	b.n	8004436 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80043ac:	2308      	movs	r3, #8
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	230b      	movs	r3, #11
 80043b2:	617b      	str	r3, [r7, #20]
			continue;
 80043b4:	e022      	b.n	80043fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80043b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da04      	bge.n	80043c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80043be:	7efb      	ldrb	r3, [r7, #27]
 80043c0:	3b80      	subs	r3, #128	; 0x80
 80043c2:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <create_name+0x120>)
 80043c4:	5cd3      	ldrb	r3, [r2, r3]
 80043c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80043c8:	7efb      	ldrb	r3, [r7, #27]
 80043ca:	4619      	mov	r1, r3
 80043cc:	481d      	ldr	r0, [pc, #116]	; (8004444 <create_name+0x124>)
 80043ce:	f7ff f98a 	bl	80036e6 <chk_chr>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <create_name+0xbc>
 80043d8:	2306      	movs	r3, #6
 80043da:	e02c      	b.n	8004436 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80043dc:	7efb      	ldrb	r3, [r7, #27]
 80043de:	2b60      	cmp	r3, #96	; 0x60
 80043e0:	d905      	bls.n	80043ee <create_name+0xce>
 80043e2:	7efb      	ldrb	r3, [r7, #27]
 80043e4:	2b7a      	cmp	r3, #122	; 0x7a
 80043e6:	d802      	bhi.n	80043ee <create_name+0xce>
 80043e8:	7efb      	ldrb	r3, [r7, #27]
 80043ea:	3b20      	subs	r3, #32
 80043ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	613a      	str	r2, [r7, #16]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	4413      	add	r3, r2
 80043f8:	7efa      	ldrb	r2, [r7, #27]
 80043fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80043fc:	e7a6      	b.n	800434c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80043fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	441a      	add	r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <create_name+0xf4>
 8004410:	2306      	movs	r3, #6
 8004412:	e010      	b.n	8004436 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2be5      	cmp	r3, #229	; 0xe5
 800441a:	d102      	bne.n	8004422 <create_name+0x102>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2205      	movs	r2, #5
 8004420:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004422:	7efb      	ldrb	r3, [r7, #27]
 8004424:	2b20      	cmp	r3, #32
 8004426:	d801      	bhi.n	800442c <create_name+0x10c>
 8004428:	2204      	movs	r2, #4
 800442a:	e000      	b.n	800442e <create_name+0x10e>
 800442c:	2200      	movs	r2, #0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	330b      	adds	r3, #11
 8004432:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004434:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	08004f40 	.word	0x08004f40
 8004444:	08004ed8 	.word	0x08004ed8

08004448 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800445c:	e002      	b.n	8004464 <follow_path+0x1c>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b2f      	cmp	r3, #47	; 0x2f
 800446a:	d0f8      	beq.n	800445e <follow_path+0x16>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b5c      	cmp	r3, #92	; 0x5c
 8004472:	d0f4      	beq.n	800445e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b1f      	cmp	r3, #31
 8004480:	d80a      	bhi.n	8004498 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800448a:	2100      	movs	r1, #0
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff fcf9 	bl	8003e84 <dir_sdi>
 8004492:	4603      	mov	r3, r0
 8004494:	75fb      	strb	r3, [r7, #23]
 8004496:	e043      	b.n	8004520 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004498:	463b      	mov	r3, r7
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff3f 	bl	8004320 <create_name>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d134      	bne.n	8004516 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff feaf 	bl	8004210 <dir_find>
 80044b2:	4603      	mov	r3, r0
 80044b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80044bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d127      	bne.n	800451a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80044ca:	7afb      	ldrb	r3, [r7, #11]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d122      	bne.n	800451a <follow_path+0xd2>
 80044d4:	2305      	movs	r3, #5
 80044d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80044d8:	e01f      	b.n	800451a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80044da:	7afb      	ldrb	r3, [r7, #11]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d11c      	bne.n	800451e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	799b      	ldrb	r3, [r3, #6]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80044f0:	2305      	movs	r3, #5
 80044f2:	75fb      	strb	r3, [r7, #23]
 80044f4:	e014      	b.n	8004520 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004504:	4413      	add	r3, r2
 8004506:	4619      	mov	r1, r3
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fe42 	bl	8004192 <ld_clust>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004514:	e7c0      	b.n	8004498 <follow_path+0x50>
			if (res != FR_OK) break;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <follow_path+0xd8>
				break;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800451e:	bf00      	nop
			}
		}
	}

	return res;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800452a:	b480      	push	{r7}
 800452c:	b087      	sub	sp, #28
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004532:	f04f 33ff 	mov.w	r3, #4294967295
 8004536:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d031      	beq.n	80045a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e002      	b.n	800454e <get_ldnumber+0x24>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3301      	adds	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b20      	cmp	r3, #32
 8004554:	d903      	bls.n	800455e <get_ldnumber+0x34>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b3a      	cmp	r3, #58	; 0x3a
 800455c:	d1f4      	bne.n	8004548 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b3a      	cmp	r3, #58	; 0x3a
 8004564:	d11c      	bne.n	80045a0 <get_ldnumber+0x76>
			tp = *path;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	60fa      	str	r2, [r7, #12]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	3b30      	subs	r3, #48	; 0x30
 8004576:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b09      	cmp	r3, #9
 800457c:	d80e      	bhi.n	800459c <get_ldnumber+0x72>
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	429a      	cmp	r2, r3
 8004584:	d10a      	bne.n	800459c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d107      	bne.n	800459c <get_ldnumber+0x72>
					vol = (int)i;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	3301      	adds	r3, #1
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	e002      	b.n	80045a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80045a4:	693b      	ldr	r3, [r7, #16]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	70da      	strb	r2, [r3, #3]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff f90c 	bl	80037ec <move_window>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <check_fs+0x2a>
 80045da:	2304      	movs	r3, #4
 80045dc:	e038      	b.n	8004650 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3330      	adds	r3, #48	; 0x30
 80045e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe ff98 	bl	800351c <ld_word>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <check_fs+0x48>
 80045f8:	2303      	movs	r3, #3
 80045fa:	e029      	b.n	8004650 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004602:	2be9      	cmp	r3, #233	; 0xe9
 8004604:	d009      	beq.n	800461a <check_fs+0x66>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800460c:	2beb      	cmp	r3, #235	; 0xeb
 800460e:	d11e      	bne.n	800464e <check_fs+0x9a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004616:	2b90      	cmp	r3, #144	; 0x90
 8004618:	d119      	bne.n	800464e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3330      	adds	r3, #48	; 0x30
 800461e:	3336      	adds	r3, #54	; 0x36
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe ff93 	bl	800354c <ld_dword>
 8004626:	4603      	mov	r3, r0
 8004628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <check_fs+0xa4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <check_fs+0x82>
 8004632:	2300      	movs	r3, #0
 8004634:	e00c      	b.n	8004650 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3330      	adds	r3, #48	; 0x30
 800463a:	3352      	adds	r3, #82	; 0x52
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe ff85 	bl	800354c <ld_dword>
 8004642:	4603      	mov	r3, r0
 8004644:	4a05      	ldr	r2, [pc, #20]	; (800465c <check_fs+0xa8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d101      	bne.n	800464e <check_fs+0x9a>
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800464e:	2302      	movs	r3, #2
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	00544146 	.word	0x00544146
 800465c:	33544146 	.word	0x33544146

08004660 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b096      	sub	sp, #88	; 0x58
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff ff58 	bl	800452a <get_ldnumber>
 800467a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	da01      	bge.n	8004686 <find_volume+0x26>
 8004682:	230b      	movs	r3, #11
 8004684:	e22e      	b.n	8004ae4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004686:	4aa8      	ldr	r2, [pc, #672]	; (8004928 <find_volume+0x2c8>)
 8004688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <find_volume+0x3a>
 8004696:	230c      	movs	r3, #12
 8004698:	e224      	b.n	8004ae4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800469e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01a      	beq.n	80046e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe fe93 	bl	80033e0 <disk_status>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80046c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10c      	bne.n	80046e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <find_volume+0x82>
 80046d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80046de:	230a      	movs	r3, #10
 80046e0:	e200      	b.n	8004ae4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80046e2:	2300      	movs	r3, #0
 80046e4:	e1fe      	b.n	8004ae4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fe8b 	bl	8003414 <disk_initialize>
 80046fe:	4603      	mov	r3, r0
 8004700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004710:	2303      	movs	r3, #3
 8004712:	e1e7      	b.n	8004ae4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <find_volume+0xca>
 800471a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004726:	230a      	movs	r3, #10
 8004728:	e1dc      	b.n	8004ae4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800472e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004730:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004732:	f7ff ff3f 	bl	80045b4 <check_fs>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800473c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004740:	2b02      	cmp	r3, #2
 8004742:	d14b      	bne.n	80047dc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004744:	2300      	movs	r3, #0
 8004746:	643b      	str	r3, [r7, #64]	; 0x40
 8004748:	e01f      	b.n	800478a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004758:	4413      	add	r3, r2
 800475a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	3304      	adds	r3, #4
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <find_volume+0x114>
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	3308      	adds	r3, #8
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe feee 	bl	800354c <ld_dword>
 8004770:	4602      	mov	r2, r0
 8004772:	e000      	b.n	8004776 <find_volume+0x116>
 8004774:	2200      	movs	r2, #0
 8004776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800477e:	440b      	add	r3, r1
 8004780:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004786:	3301      	adds	r3, #1
 8004788:	643b      	str	r3, [r7, #64]	; 0x40
 800478a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478c:	2b03      	cmp	r3, #3
 800478e:	d9dc      	bls.n	800474a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004790:	2300      	movs	r3, #0
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <find_volume+0x140>
 800479a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479c:	3b01      	subs	r3, #1
 800479e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80047a8:	4413      	add	r3, r2
 80047aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80047ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80047b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <find_volume+0x162>
 80047b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047ba:	f7ff fefb 	bl	80045b4 <check_fs>
 80047be:	4603      	mov	r3, r0
 80047c0:	e000      	b.n	80047c4 <find_volume+0x164>
 80047c2:	2303      	movs	r3, #3
 80047c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80047c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d905      	bls.n	80047dc <find_volume+0x17c>
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	3301      	adds	r3, #1
 80047d4:	643b      	str	r3, [r7, #64]	; 0x40
 80047d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d9e1      	bls.n	80047a0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80047dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d101      	bne.n	80047e8 <find_volume+0x188>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e17d      	b.n	8004ae4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80047e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d901      	bls.n	80047f4 <find_volume+0x194>
 80047f0:	230d      	movs	r3, #13
 80047f2:	e177      	b.n	8004ae4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	3330      	adds	r3, #48	; 0x30
 80047f8:	330b      	adds	r3, #11
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe fe8e 	bl	800351c <ld_word>
 8004800:	4603      	mov	r3, r0
 8004802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004806:	d001      	beq.n	800480c <find_volume+0x1ac>
 8004808:	230d      	movs	r3, #13
 800480a:	e16b      	b.n	8004ae4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	3330      	adds	r3, #48	; 0x30
 8004810:	3316      	adds	r3, #22
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fe82 	bl	800351c <ld_word>
 8004818:	4603      	mov	r3, r0
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800481c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <find_volume+0x1d0>
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	3330      	adds	r3, #48	; 0x30
 8004826:	3324      	adds	r3, #36	; 0x24
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe fe8f 	bl	800354c <ld_dword>
 800482e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004834:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	789b      	ldrb	r3, [r3, #2]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d005      	beq.n	8004854 <find_volume+0x1f4>
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	789b      	ldrb	r3, [r3, #2]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d001      	beq.n	8004854 <find_volume+0x1f4>
 8004850:	230d      	movs	r3, #13
 8004852:	e147      	b.n	8004ae4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	789b      	ldrb	r3, [r3, #2]
 8004858:	461a      	mov	r2, r3
 800485a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b29a      	uxth	r2, r3
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	895b      	ldrh	r3, [r3, #10]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <find_volume+0x228>
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	895b      	ldrh	r3, [r3, #10]
 800487a:	461a      	mov	r2, r3
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	895b      	ldrh	r3, [r3, #10]
 8004880:	3b01      	subs	r3, #1
 8004882:	4013      	ands	r3, r2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <find_volume+0x22c>
 8004888:	230d      	movs	r3, #13
 800488a:	e12b      	b.n	8004ae4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	3330      	adds	r3, #48	; 0x30
 8004890:	3311      	adds	r3, #17
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fe42 	bl	800351c <ld_word>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	891b      	ldrh	r3, [r3, #8]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <find_volume+0x252>
 80048ae:	230d      	movs	r3, #13
 80048b0:	e118      	b.n	8004ae4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	3330      	adds	r3, #48	; 0x30
 80048b6:	3313      	adds	r3, #19
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe fe2f 	bl	800351c <ld_word>
 80048be:	4603      	mov	r3, r0
 80048c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <find_volume+0x276>
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	3330      	adds	r3, #48	; 0x30
 80048cc:	3320      	adds	r3, #32
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fe3c 	bl	800354c <ld_dword>
 80048d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	3330      	adds	r3, #48	; 0x30
 80048da:	330e      	adds	r3, #14
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe fe1d 	bl	800351c <ld_word>
 80048e2:	4603      	mov	r3, r0
 80048e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80048e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <find_volume+0x290>
 80048ec:	230d      	movs	r3, #13
 80048ee:	e0f9      	b.n	8004ae4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80048f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	4413      	add	r3, r2
 80048f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048f8:	8912      	ldrh	r2, [r2, #8]
 80048fa:	0912      	lsrs	r2, r2, #4
 80048fc:	b292      	uxth	r2, r2
 80048fe:	4413      	add	r3, r2
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	429a      	cmp	r2, r3
 8004908:	d201      	bcs.n	800490e <find_volume+0x2ae>
 800490a:	230d      	movs	r3, #13
 800490c:	e0ea      	b.n	8004ae4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800490e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004916:	8952      	ldrh	r2, [r2, #10]
 8004918:	fbb3 f3f2 	udiv	r3, r3, r2
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <find_volume+0x2cc>
 8004924:	230d      	movs	r3, #13
 8004926:	e0dd      	b.n	8004ae4 <find_volume+0x484>
 8004928:	20000028 	.word	0x20000028
		fmt = FS_FAT32;
 800492c:	2303      	movs	r3, #3
 800492e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004938:	4293      	cmp	r3, r2
 800493a:	d802      	bhi.n	8004942 <find_volume+0x2e2>
 800493c:	2302      	movs	r3, #2
 800493e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004948:	4293      	cmp	r3, r2
 800494a:	d802      	bhi.n	8004952 <find_volume+0x2f2>
 800494c:	2301      	movs	r3, #1
 800494e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800495e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004960:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004964:	441a      	add	r2, r3
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800496a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	441a      	add	r2, r3
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004974:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004978:	2b03      	cmp	r3, #3
 800497a:	d11e      	bne.n	80049ba <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	3330      	adds	r3, #48	; 0x30
 8004980:	332a      	adds	r3, #42	; 0x2a
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe fdca 	bl	800351c <ld_word>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <find_volume+0x332>
 800498e:	230d      	movs	r3, #13
 8004990:	e0a8      	b.n	8004ae4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	891b      	ldrh	r3, [r3, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <find_volume+0x33e>
 800499a:	230d      	movs	r3, #13
 800499c:	e0a2      	b.n	8004ae4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	3330      	adds	r3, #48	; 0x30
 80049a2:	332c      	adds	r3, #44	; 0x2c
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe fdd1 	bl	800354c <ld_dword>
 80049aa:	4602      	mov	r2, r0
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
 80049b8:	e01f      	b.n	80049fa <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	891b      	ldrh	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <find_volume+0x366>
 80049c2:	230d      	movs	r3, #13
 80049c4:	e08e      	b.n	8004ae4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	6a1a      	ldr	r2, [r3, #32]
 80049ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049cc:	441a      	add	r2, r3
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80049d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d103      	bne.n	80049e2 <find_volume+0x382>
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	e00a      	b.n	80049f8 <find_volume+0x398>
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	085a      	lsrs	r2, r3, #1
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a04:	0a5b      	lsrs	r3, r3, #9
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d201      	bcs.n	8004a0e <find_volume+0x3ae>
 8004a0a:	230d      	movs	r3, #13
 8004a0c:	e06a      	b.n	8004ae4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	f04f 32ff 	mov.w	r2, #4294967295
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d149      	bne.n	8004ac0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2e:	3330      	adds	r3, #48	; 0x30
 8004a30:	3330      	adds	r3, #48	; 0x30
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fd72 	bl	800351c <ld_word>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d140      	bne.n	8004ac0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a40:	3301      	adds	r3, #1
 8004a42:	4619      	mov	r1, r3
 8004a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a46:	f7fe fed1 	bl	80037ec <move_window>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d137      	bne.n	8004ac0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	2200      	movs	r2, #0
 8004a54:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	3330      	adds	r3, #48	; 0x30
 8004a5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fd5c 	bl	800351c <ld_word>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d127      	bne.n	8004ac0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	3330      	adds	r3, #48	; 0x30
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe fd69 	bl	800354c <ld_dword>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <find_volume+0x48c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d11e      	bne.n	8004ac0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	3330      	adds	r3, #48	; 0x30
 8004a86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fd5e 	bl	800354c <ld_dword>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <find_volume+0x490>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d113      	bne.n	8004ac0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	3330      	adds	r3, #48	; 0x30
 8004a9c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fe fd53 	bl	800354c <ld_dword>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	3330      	adds	r3, #48	; 0x30
 8004ab0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe fd49 	bl	800354c <ld_dword>
 8004aba:	4602      	mov	r2, r0
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004ac6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <find_volume+0x494>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	3301      	adds	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	4b08      	ldr	r3, [pc, #32]	; (8004af4 <find_volume+0x494>)
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <find_volume+0x494>)
 8004ad6:	881a      	ldrh	r2, [r3, #0]
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004adc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ade:	f7fe fe1d 	bl	800371c <clear_lock>
#endif
	return FR_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3758      	adds	r7, #88	; 0x58
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	41615252 	.word	0x41615252
 8004af0:	61417272 	.word	0x61417272
 8004af4:	2000002c 	.word	0x2000002c

08004af8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	4613      	mov	r3, r2
 8004b04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004b0a:	f107 0310 	add.w	r3, r7, #16
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fd0b 	bl	800452a <get_ldnumber>
 8004b14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da01      	bge.n	8004b20 <f_mount+0x28>
 8004b1c:	230b      	movs	r3, #11
 8004b1e:	e02b      	b.n	8004b78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004b20:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <f_mount+0x88>)
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004b30:	69b8      	ldr	r0, [r7, #24]
 8004b32:	f7fe fdf3 	bl	800371c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	490d      	ldr	r1, [pc, #52]	; (8004b80 <f_mount+0x88>)
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <f_mount+0x66>
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d001      	beq.n	8004b62 <f_mount+0x6a>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e00a      	b.n	8004b78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004b62:	f107 010c 	add.w	r1, r7, #12
 8004b66:	f107 0308 	add.w	r3, r7, #8
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fd77 	bl	8004660 <find_volume>
 8004b72:	4603      	mov	r3, r0
 8004b74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000028 	.word	0x20000028

08004b84 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b096      	sub	sp, #88	; 0x58
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8004b8c:	f107 0108 	add.w	r1, r7, #8
 8004b90:	1d3b      	adds	r3, r7, #4
 8004b92:	2202      	movs	r2, #2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fd63 	bl	8004660 <find_volume>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8004ba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 80ec 	bne.w	8004d86 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	f107 030c 	add.w	r3, r7, #12
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fc46 	bl	8004448 <follow_path>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8004bc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <f_mkdir+0x4c>
 8004bca:	2308      	movs	r3, #8
 8004bcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8004bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	f040 80d6 	bne.w	8004d86 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8004bda:	f107 030c 	add.w	r3, r7, #12
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff f8b7 	bl	8003d54 <create_chain>
 8004be6:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	895b      	ldrh	r3, [r3, #10]
 8004bec:	025b      	lsls	r3, r3, #9
 8004bee:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8004bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <f_mkdir+0x7e>
 8004bfc:	2307      	movs	r3, #7
 8004bfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8004c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d102      	bne.n	8004c0e <f_mkdir+0x8a>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d102      	bne.n	8004c1c <f_mkdir+0x98>
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8004c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <f_mkdir+0xae>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe fd9c 	bl	8003764 <sync_window>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8004c32:	f7fe fa69 	bl	8003108 <get_fattime>
 8004c36:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8004c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d16a      	bne.n	8004d16 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe fe6d 	bl	8003924 <clust2sect>
 8004c4a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3330      	adds	r3, #48	; 0x30
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8004c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c56:	2100      	movs	r1, #0
 8004c58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c5a:	f7fe fd02 	bl	8003662 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8004c5e:	220b      	movs	r2, #11
 8004c60:	2120      	movs	r1, #32
 8004c62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c64:	f7fe fcfd 	bl	8003662 <mem_set>
					dir[DIR_Name] = '.';
 8004c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6a:	222e      	movs	r2, #46	; 0x2e
 8004c6c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c70:	330b      	adds	r3, #11
 8004c72:	2210      	movs	r2, #16
 8004c74:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8004c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c78:	3316      	adds	r3, #22
 8004c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fe fca3 	bl	80035c8 <st_dword>
					st_clust(fs, dir, dcl);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff faa1 	bl	80041d0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c90:	3320      	adds	r3, #32
 8004c92:	2220      	movs	r2, #32
 8004c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fcc2 	bl	8003620 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9e:	3321      	adds	r3, #33	; 0x21
 8004ca0:	222e      	movs	r2, #46	; 0x2e
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d106      	bne.n	8004cbe <f_mkdir+0x13a>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d101      	bne.n	8004cbe <f_mkdir+0x13a>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8004cbe:	68b8      	ldr	r0, [r7, #8]
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc2:	3320      	adds	r3, #32
 8004cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f7ff fa82 	bl	80041d0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	895b      	ldrh	r3, [r3, #10]
 8004cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd2:	e01b      	b.n	8004d0c <f_mkdir+0x188>
					fs->winsect = dsc++;
 8004cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fd3c 	bl	8003764 <sync_window>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8004cf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10c      	bne.n	8004d14 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8004cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cfe:	2100      	movs	r1, #0
 8004d00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d02:	f7fe fcae 	bl	8003662 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8004d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e0      	bne.n	8004cd4 <f_mkdir+0x150>
 8004d12:	e000      	b.n	8004d16 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8004d14:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8004d16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d107      	bne.n	8004d2e <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8004d1e:	f107 030c 	add.w	r3, r7, #12
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fac9 	bl	80042ba <dir_register>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8004d2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d120      	bne.n	8004d78 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3c:	3316      	adds	r3, #22
 8004d3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fe fc41 	bl	80035c8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fa3f 	bl	80041d0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d54:	330b      	adds	r3, #11
 8004d56:	2210      	movs	r2, #16
 8004d58:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8004d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10e      	bne.n	8004d86 <f_mkdir+0x202>
					res = sync_fs(fs);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fd6c 	bl	8003848 <sync_fs>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004d76:	e006      	b.n	8004d86 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8004d78:	f107 030c 	add.w	r3, r7, #12
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe ff82 	bl	8003c8a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8004d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3758      	adds	r7, #88	; 0x58
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004daa:	4b1f      	ldr	r3, [pc, #124]	; (8004e28 <FATFS_LinkDriverEx+0x94>)
 8004dac:	7a5b      	ldrb	r3, [r3, #9]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d131      	bne.n	8004e18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004db4:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <FATFS_LinkDriverEx+0x94>)
 8004db6:	7a5b      	ldrb	r3, [r3, #9]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <FATFS_LinkDriverEx+0x94>)
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004dc2:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <FATFS_LinkDriverEx+0x94>)
 8004dc4:	7a5b      	ldrb	r3, [r3, #9]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <FATFS_LinkDriverEx+0x94>)
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <FATFS_LinkDriverEx+0x94>)
 8004dd4:	7a5b      	ldrb	r3, [r3, #9]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <FATFS_LinkDriverEx+0x94>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	79fa      	ldrb	r2, [r7, #7]
 8004de0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <FATFS_LinkDriverEx+0x94>)
 8004de4:	7a5b      	ldrb	r3, [r3, #9]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	b2d1      	uxtb	r1, r2
 8004dec:	4a0e      	ldr	r2, [pc, #56]	; (8004e28 <FATFS_LinkDriverEx+0x94>)
 8004dee:	7251      	strb	r1, [r2, #9]
 8004df0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004df2:	7dbb      	ldrb	r3, [r7, #22]
 8004df4:	3330      	adds	r3, #48	; 0x30
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	223a      	movs	r2, #58	; 0x3a
 8004e02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3302      	adds	r3, #2
 8004e08:	222f      	movs	r2, #47	; 0x2f
 8004e0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	3303      	adds	r3, #3
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000050 	.word	0x20000050

08004e2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004e36:	2200      	movs	r2, #0
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff ffaa 	bl	8004d94 <FATFS_LinkDriverEx>
 8004e40:	4603      	mov	r3, r0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <__libc_init_array>:
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	4d0d      	ldr	r5, [pc, #52]	; (8004e84 <__libc_init_array+0x38>)
 8004e50:	4c0d      	ldr	r4, [pc, #52]	; (8004e88 <__libc_init_array+0x3c>)
 8004e52:	1b64      	subs	r4, r4, r5
 8004e54:	10a4      	asrs	r4, r4, #2
 8004e56:	2600      	movs	r6, #0
 8004e58:	42a6      	cmp	r6, r4
 8004e5a:	d109      	bne.n	8004e70 <__libc_init_array+0x24>
 8004e5c:	4d0b      	ldr	r5, [pc, #44]	; (8004e8c <__libc_init_array+0x40>)
 8004e5e:	4c0c      	ldr	r4, [pc, #48]	; (8004e90 <__libc_init_array+0x44>)
 8004e60:	f000 f820 	bl	8004ea4 <_init>
 8004e64:	1b64      	subs	r4, r4, r5
 8004e66:	10a4      	asrs	r4, r4, #2
 8004e68:	2600      	movs	r6, #0
 8004e6a:	42a6      	cmp	r6, r4
 8004e6c:	d105      	bne.n	8004e7a <__libc_init_array+0x2e>
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
 8004e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e74:	4798      	blx	r3
 8004e76:	3601      	adds	r6, #1
 8004e78:	e7ee      	b.n	8004e58 <__libc_init_array+0xc>
 8004e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7e:	4798      	blx	r3
 8004e80:	3601      	adds	r6, #1
 8004e82:	e7f2      	b.n	8004e6a <__libc_init_array+0x1e>
 8004e84:	08004fc8 	.word	0x08004fc8
 8004e88:	08004fc8 	.word	0x08004fc8
 8004e8c:	08004fc8 	.word	0x08004fc8
 8004e90:	08004fcc 	.word	0x08004fcc

08004e94 <memset>:
 8004e94:	4402      	add	r2, r0
 8004e96:	4603      	mov	r3, r0
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d100      	bne.n	8004e9e <memset+0xa>
 8004e9c:	4770      	bx	lr
 8004e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea2:	e7f9      	b.n	8004e98 <memset+0x4>

08004ea4 <_init>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr

08004eb0 <_fini>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	bf00      	nop
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr
