
FW_MicroSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003318  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c4  080034c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034cc  080034cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000518  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000524  20000524  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b74e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d80  00000000  00000000  0002b78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  0002dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002126a  00000000  00000000  0002e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e1a  00000000  00000000  0004f712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c51f6  00000000  00000000  0005952c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e722  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fcc  00000000  00000000  0011e778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003488 	.word	0x08003488

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003488 	.word	0x08003488

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 f9d4 	bl	8000870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f808 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f890 	bl	80005f0 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80004d0:	f000 f86e 	bl	80005b0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004d4:	f002 fdda 	bl	800308c <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x18>
	...

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	; 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2230      	movs	r2, #48	; 0x30
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f002 ffc4 	bl	8003478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <SystemClock_Config+0xcc>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <SystemClock_Config+0xcc>)
 800050a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050e:	6413      	str	r3, [r2, #64]	; 0x40
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <SystemClock_Config+0xd0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <SystemClock_Config+0xd0>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800054c:	2308      	movs	r3, #8
 800054e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000550:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000554:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000556:	2302      	movs	r3, #2
 8000558:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800055a:	2307      	movs	r3, #7
 800055c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fc9c 	bl	8000ea0 <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800056e:	f000 f883 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	230f      	movs	r3, #15
 8000574:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000576:	2302      	movs	r3, #2
 8000578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000582:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000588:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2105      	movs	r1, #5
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fefd 	bl	8001390 <HAL_RCC_ClockConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800059c:	f000 f86c 	bl	8000678 <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3750      	adds	r7, #80	; 0x50
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40007000 	.word	0x40007000

080005b0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_SDIO_SD_Init+0x38>)
 80005b6:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <MX_SDIO_SD_Init+0x3c>)
 80005b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_SDIO_SD_Init+0x38>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_SDIO_SD_Init+0x38>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_SDIO_SD_Init+0x38>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_SDIO_SD_Init+0x38>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <MX_SDIO_SD_Init+0x38>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <MX_SDIO_SD_Init+0x38>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	20000034 	.word	0x20000034
 80005ec:	40012c00 	.word	0x40012c00

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_GPIO_Init+0x84>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <MX_GPIO_Init+0x84>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_GPIO_Init+0x84>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_GPIO_Init+0x84>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_GPIO_Init+0x84>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_GPIO_Init+0x84>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_GPIO_Init+0x84>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MX_GPIO_Init+0x84>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_GPIO_Init+0x84>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_GPIO_Init+0x84>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <MX_GPIO_Init+0x84>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_GPIO_Init+0x84>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_MspInit+0x4c>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <HAL_MspInit+0x4c>)
 8000694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <HAL_MspInit+0x4c>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_MspInit+0x4c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_MspInit+0x4c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_MspInit+0x4c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006c2:	2007      	movs	r0, #7
 80006c4:	f000 fa1c 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800

080006d4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a28      	ldr	r2, [pc, #160]	; (8000794 <HAL_SD_MspInit+0xc0>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d14a      	bne.n	800078c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <HAL_SD_MspInit+0xc4>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <HAL_SD_MspInit+0xc4>)
 8000700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000704:	6453      	str	r3, [r2, #68]	; 0x44
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <HAL_SD_MspInit+0xc4>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <HAL_SD_MspInit+0xc4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <HAL_SD_MspInit+0xc4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <HAL_SD_MspInit+0xc4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_SD_MspInit+0xc4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <HAL_SD_MspInit+0xc4>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_SD_MspInit+0xc4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800074a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800075c:	230c      	movs	r3, #12
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <HAL_SD_MspInit+0xc8>)
 8000768:	f000 f9fe 	bl	8000b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800076c:	2304      	movs	r3, #4
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800077c:	230c      	movs	r3, #12
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <HAL_SD_MspInit+0xcc>)
 8000788:	f000 f9ee 	bl	8000b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40012c00 	.word	0x40012c00
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020c00 	.word	0x40020c00

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f890 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <SystemInit+0x20>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <SystemInit+0x20>)
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800081c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000854 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000822:	490e      	ldr	r1, [pc, #56]	; (800085c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000838:	4c0b      	ldr	r4, [pc, #44]	; (8000868 <LoopFillZerobss+0x26>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000846:	f7ff ffd7 	bl	80007f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084a:	f002 fdf1 	bl	8003430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084e:	f7ff fe37 	bl	80004c0 <main>
  bx  lr    
 8000852:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000860:	080034d4 	.word	0x080034d4
  ldr r2, =_sbss
 8000864:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000868:	20000524 	.word	0x20000524

0800086c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC_IRQHandler>
	...

08000870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_Init+0x40>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <HAL_Init+0x40>)
 800087a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_Init+0x40>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_Init+0x40>)
 8000886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800088a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x40>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x40>)
 8000892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f931 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff feee 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023c00 	.word	0x40023c00

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f93b 	bl	8000b4e <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 f911 	bl	8000b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_IncTick+0x20>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_IncTick+0x24>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_IncTick+0x24>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008
 8000938:	200000b8 	.word	0x200000b8

0800093c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	200000b8 	.word	0x200000b8

08000954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800095c:	f7ff ffee 	bl	800093c <HAL_GetTick>
 8000960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096c:	d005      	beq.n	800097a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_Delay+0x44>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800097a:	bf00      	nop
 800097c:	f7ff ffde 	bl	800093c <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	429a      	cmp	r2, r3
 800098a:	d8f7      	bhi.n	800097c <HAL_Delay+0x28>
  {
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f7ff ff8e 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff47 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b28:	f7ff ff5c 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6978      	ldr	r0, [r7, #20]
 8000b34:	f7ff ff8e 	bl	8000a54 <NVIC_EncodePriority>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffb0 	bl	8000abc <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	e16b      	b.n	8000e5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b84:	2201      	movs	r2, #1
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	f040 815a 	bne.w	8000e56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d005      	beq.n	8000bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d130      	bne.n	8000c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	091b      	lsrs	r3, r3, #4
 8000c06:	f003 0201 	and.w	r2, r3, #1
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d017      	beq.n	8000c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d123      	bne.n	8000cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	08da      	lsrs	r2, r3, #3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3208      	adds	r2, #8
 8000c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	691a      	ldr	r2, [r3, #16]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	08da      	lsrs	r2, r3, #3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	69b9      	ldr	r1, [r7, #24]
 8000ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0203 	and.w	r2, r3, #3
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 80b4 	beq.w	8000e56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <HAL_GPIO_Init+0x30c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a5f      	ldr	r2, [pc, #380]	; (8000e74 <HAL_GPIO_Init+0x30c>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <HAL_GPIO_Init+0x30c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d0a:	4a5b      	ldr	r2, [pc, #364]	; (8000e78 <HAL_GPIO_Init+0x310>)
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a52      	ldr	r2, [pc, #328]	; (8000e7c <HAL_GPIO_Init+0x314>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d02b      	beq.n	8000d8e <HAL_GPIO_Init+0x226>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a51      	ldr	r2, [pc, #324]	; (8000e80 <HAL_GPIO_Init+0x318>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d025      	beq.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a50      	ldr	r2, [pc, #320]	; (8000e84 <HAL_GPIO_Init+0x31c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01f      	beq.n	8000d86 <HAL_GPIO_Init+0x21e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4f      	ldr	r2, [pc, #316]	; (8000e88 <HAL_GPIO_Init+0x320>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0x21a>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4e      	ldr	r2, [pc, #312]	; (8000e8c <HAL_GPIO_Init+0x324>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0x216>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4d      	ldr	r2, [pc, #308]	; (8000e90 <HAL_GPIO_Init+0x328>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00d      	beq.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4c      	ldr	r2, [pc, #304]	; (8000e94 <HAL_GPIO_Init+0x32c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x20e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4b      	ldr	r2, [pc, #300]	; (8000e98 <HAL_GPIO_Init+0x330>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_Init+0x20a>
 8000d6e:	2307      	movs	r3, #7
 8000d70:	e00e      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d72:	2308      	movs	r3, #8
 8000d74:	e00c      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d76:	2306      	movs	r3, #6
 8000d78:	e00a      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e008      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d82:	2303      	movs	r3, #3
 8000d84:	e004      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	f002 0203 	and.w	r2, r2, #3
 8000d96:	0092      	lsls	r2, r2, #2
 8000d98:	4093      	lsls	r3, r2
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da0:	4935      	ldr	r1, [pc, #212]	; (8000e78 <HAL_GPIO_Init+0x310>)
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dae:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dd2:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dd8:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dfc:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e26:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	f67f ae90 	bls.w	8000b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021c00 	.word	0x40021c00
 8000e9c:	40013c00 	.word	0x40013c00

08000ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e264      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d075      	beq.n	8000faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ebe:	4ba3      	ldr	r3, [pc, #652]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eca:	4ba0      	ldr	r3, [pc, #640]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ed2:	2b08      	cmp	r3, #8
 8000ed4:	d112      	bne.n	8000efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed6:	4b9d      	ldr	r3, [pc, #628]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ee2:	d10b      	bne.n	8000efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	4b99      	ldr	r3, [pc, #612]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d05b      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x108>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d157      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e23f      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f04:	d106      	bne.n	8000f14 <HAL_RCC_OscConfig+0x74>
 8000f06:	4b91      	ldr	r3, [pc, #580]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a90      	ldr	r2, [pc, #576]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e01d      	b.n	8000f50 <HAL_RCC_OscConfig+0xb0>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x98>
 8000f1e:	4b8b      	ldr	r3, [pc, #556]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a8a      	ldr	r2, [pc, #552]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b88      	ldr	r3, [pc, #544]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a87      	ldr	r2, [pc, #540]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e00b      	b.n	8000f50 <HAL_RCC_OscConfig+0xb0>
 8000f38:	4b84      	ldr	r3, [pc, #528]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a83      	ldr	r2, [pc, #524]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b81      	ldr	r3, [pc, #516]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a80      	ldr	r2, [pc, #512]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d013      	beq.n	8000f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fcf0 	bl	800093c <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fcec 	bl	800093c <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e204      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	4b76      	ldr	r3, [pc, #472]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f0      	beq.n	8000f60 <HAL_RCC_OscConfig+0xc0>
 8000f7e:	e014      	b.n	8000faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fcdc 	bl	800093c <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fcd8 	bl	800093c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1f0      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	4b6c      	ldr	r3, [pc, #432]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0xe8>
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d063      	beq.n	800107e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fb6:	4b65      	ldr	r3, [pc, #404]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00b      	beq.n	8000fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fc2:	4b62      	ldr	r3, [pc, #392]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d11c      	bne.n	8001008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fce:	4b5f      	ldr	r3, [pc, #380]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d116      	bne.n	8001008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x152>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d001      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e1c4      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	4b56      	ldr	r3, [pc, #344]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4952      	ldr	r1, [pc, #328]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	e03a      	b.n	800107e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d020      	beq.n	8001052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001010:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <HAL_RCC_OscConfig+0x2b0>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001016:	f7ff fc91 	bl	800093c <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101e:	f7ff fc8d 	bl	800093c <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e1a5      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001030:	4b46      	ldr	r3, [pc, #280]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b43      	ldr	r3, [pc, #268]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4940      	ldr	r1, [pc, #256]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 800104c:	4313      	orrs	r3, r2
 800104e:	600b      	str	r3, [r1, #0]
 8001050:	e015      	b.n	800107e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <HAL_RCC_OscConfig+0x2b0>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001058:	f7ff fc70 	bl	800093c <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001060:	f7ff fc6c 	bl	800093c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e184      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d030      	beq.n	80010ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d016      	beq.n	80010c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_RCC_OscConfig+0x2b4>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001098:	f7ff fc50 	bl	800093c <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a0:	f7ff fc4c 	bl	800093c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e164      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x200>
 80010be:	e015      	b.n	80010ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_RCC_OscConfig+0x2b4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fc39 	bl	800093c <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ce:	f7ff fc35 	bl	800093c <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e14d      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f0      	bne.n	80010ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80a0 	beq.w	800123a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10f      	bne.n	800112a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_RCC_OscConfig+0x2ac>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001126:	2301      	movs	r3, #1
 8001128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_RCC_OscConfig+0x2b8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001132:	2b00      	cmp	r3, #0
 8001134:	d121      	bne.n	800117a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_RCC_OscConfig+0x2b8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_RCC_OscConfig+0x2b8>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001142:	f7ff fbfb 	bl	800093c <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	e011      	b.n	800116e <HAL_RCC_OscConfig+0x2ce>
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	42470000 	.word	0x42470000
 8001154:	42470e80 	.word	0x42470e80
 8001158:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115c:	f7ff fbee 	bl	800093c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e106      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116e:	4b85      	ldr	r3, [pc, #532]	; (8001384 <HAL_RCC_OscConfig+0x4e4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d106      	bne.n	8001190 <HAL_RCC_OscConfig+0x2f0>
 8001182:	4b81      	ldr	r3, [pc, #516]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001186:	4a80      	ldr	r2, [pc, #512]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6713      	str	r3, [r2, #112]	; 0x70
 800118e:	e01c      	b.n	80011ca <HAL_RCC_OscConfig+0x32a>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b05      	cmp	r3, #5
 8001196:	d10c      	bne.n	80011b2 <HAL_RCC_OscConfig+0x312>
 8001198:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800119a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119c:	4a7a      	ldr	r2, [pc, #488]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6713      	str	r3, [r2, #112]	; 0x70
 80011a4:	4b78      	ldr	r3, [pc, #480]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a8:	4a77      	ldr	r2, [pc, #476]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6713      	str	r3, [r2, #112]	; 0x70
 80011b0:	e00b      	b.n	80011ca <HAL_RCC_OscConfig+0x32a>
 80011b2:	4b75      	ldr	r3, [pc, #468]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b6:	4a74      	ldr	r2, [pc, #464]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6713      	str	r3, [r2, #112]	; 0x70
 80011be:	4b72      	ldr	r3, [pc, #456]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c2:	4a71      	ldr	r2, [pc, #452]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011c4:	f023 0304 	bic.w	r3, r3, #4
 80011c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d015      	beq.n	80011fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d2:	f7ff fbb3 	bl	800093c <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d8:	e00a      	b.n	80011f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f7ff fbaf 	bl	800093c <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e0c5      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f0:	4b65      	ldr	r3, [pc, #404]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0ee      	beq.n	80011da <HAL_RCC_OscConfig+0x33a>
 80011fc:	e014      	b.n	8001228 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fb9d 	bl	800093c <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001204:	e00a      	b.n	800121c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff fb99 	bl	800093c <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	4293      	cmp	r3, r2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0af      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121c:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1ee      	bne.n	8001206 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d105      	bne.n	800123a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122e:	4b56      	ldr	r3, [pc, #344]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a55      	ldr	r2, [pc, #340]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 809b 	beq.w	800137a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001244:	4b50      	ldr	r3, [pc, #320]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b08      	cmp	r3, #8
 800124e:	d05c      	beq.n	800130a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d141      	bne.n	80012dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <HAL_RCC_OscConfig+0x4ec>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125e:	f7ff fb6d 	bl	800093c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001266:	f7ff fb69 	bl	800093c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e081      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001278:	4b43      	ldr	r3, [pc, #268]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f0      	bne.n	8001266 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69da      	ldr	r2, [r3, #28]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	019b      	lsls	r3, r3, #6
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	085b      	lsrs	r3, r3, #1
 800129c:	3b01      	subs	r3, #1
 800129e:	041b      	lsls	r3, r3, #16
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	061b      	lsls	r3, r3, #24
 80012a8:	4937      	ldr	r1, [pc, #220]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <HAL_RCC_OscConfig+0x4ec>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fb42 	bl	800093c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012bc:	f7ff fb3e 	bl	800093c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e056      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x41c>
 80012da:	e04e      	b.n	800137a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <HAL_RCC_OscConfig+0x4ec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fb2b 	bl	800093c <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff fb27 	bl	800093c <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e03f      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x44a>
 8001308:	e037      	b.n	800137a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e032      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d028      	beq.n	8001376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d121      	bne.n	8001376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d11a      	bne.n	8001376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001346:	4013      	ands	r3, r2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800134c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800134e:	4293      	cmp	r3, r2
 8001350:	d111      	bne.n	8001376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	085b      	lsrs	r3, r3, #1
 800135e:	3b01      	subs	r3, #1
 8001360:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001362:	429a      	cmp	r2, r3
 8001364:	d107      	bne.n	8001376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40007000 	.word	0x40007000
 8001388:	40023800 	.word	0x40023800
 800138c:	42470060 	.word	0x42470060

08001390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0cc      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b68      	ldr	r3, [pc, #416]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d90c      	bls.n	80013cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b65      	ldr	r3, [pc, #404]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0b8      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	494d      	ldr	r1, [pc, #308]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	4313      	orrs	r3, r2
 8001418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d044      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d119      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e07f      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d003      	beq.n	800144e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144a:	2b03      	cmp	r3, #3
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b3f      	ldr	r3, [pc, #252]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e06f      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e067      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f023 0203 	bic.w	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4934      	ldr	r1, [pc, #208]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff fa5c 	bl	800093c <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	e00a      	b.n	800149e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001488:	f7ff fa58 	bl	800093c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e04f      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b2b      	ldr	r3, [pc, #172]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 020c 	and.w	r2, r3, #12
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1eb      	bne.n	8001488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d20c      	bcs.n	80014d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e032      	b.n	800153e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	490e      	ldr	r1, [pc, #56]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001516:	f000 f821 	bl	800155c <HAL_RCC_GetSysClockFreq>
 800151a:	4602      	mov	r2, r0
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	490a      	ldr	r1, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	5ccb      	ldrb	r3, [r1, r3]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_ClockConfig+0x1c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f9bc 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023c00 	.word	0x40023c00
 800154c:	40023800 	.word	0x40023800
 8001550:	080034a0 	.word	0x080034a0
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800155c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001574:	4b67      	ldr	r3, [pc, #412]	; (8001714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b08      	cmp	r3, #8
 800157e:	d00d      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x40>
 8001580:	2b08      	cmp	r3, #8
 8001582:	f200 80bd 	bhi.w	8001700 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x34>
 800158a:	2b04      	cmp	r3, #4
 800158c:	d003      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x3a>
 800158e:	e0b7      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001590:	4b61      	ldr	r3, [pc, #388]	; (8001718 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001592:	60bb      	str	r3, [r7, #8]
       break;
 8001594:	e0b7      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001596:	4b61      	ldr	r3, [pc, #388]	; (800171c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001598:	60bb      	str	r3, [r7, #8]
      break;
 800159a:	e0b4      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800159c:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d04d      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b2:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	099b      	lsrs	r3, r3, #6
 80015b8:	461a      	mov	r2, r3
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	ea02 0800 	and.w	r8, r2, r0
 80015ca:	ea03 0901 	and.w	r9, r3, r1
 80015ce:	4640      	mov	r0, r8
 80015d0:	4649      	mov	r1, r9
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	014b      	lsls	r3, r1, #5
 80015dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015e0:	0142      	lsls	r2, r0, #5
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	ebb0 0008 	subs.w	r0, r0, r8
 80015ea:	eb61 0109 	sbc.w	r1, r1, r9
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	018b      	lsls	r3, r1, #6
 80015f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015fc:	0182      	lsls	r2, r0, #6
 80015fe:	1a12      	subs	r2, r2, r0
 8001600:	eb63 0301 	sbc.w	r3, r3, r1
 8001604:	f04f 0000 	mov.w	r0, #0
 8001608:	f04f 0100 	mov.w	r1, #0
 800160c:	00d9      	lsls	r1, r3, #3
 800160e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001612:	00d0      	lsls	r0, r2, #3
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	eb12 0208 	adds.w	r2, r2, r8
 800161c:	eb43 0309 	adc.w	r3, r3, r9
 8001620:	f04f 0000 	mov.w	r0, #0
 8001624:	f04f 0100 	mov.w	r1, #0
 8001628:	0259      	lsls	r1, r3, #9
 800162a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800162e:	0250      	lsls	r0, r2, #9
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	f7fe fdc2 	bl	80001c8 <__aeabi_uldivmod>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4613      	mov	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e04a      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	461a      	mov	r2, r3
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	ea02 0400 	and.w	r4, r2, r0
 8001666:	ea03 0501 	and.w	r5, r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	014b      	lsls	r3, r1, #5
 8001678:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800167c:	0142      	lsls	r2, r0, #5
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	1b00      	subs	r0, r0, r4
 8001684:	eb61 0105 	sbc.w	r1, r1, r5
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	018b      	lsls	r3, r1, #6
 8001692:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001696:	0182      	lsls	r2, r0, #6
 8001698:	1a12      	subs	r2, r2, r0
 800169a:	eb63 0301 	sbc.w	r3, r3, r1
 800169e:	f04f 0000 	mov.w	r0, #0
 80016a2:	f04f 0100 	mov.w	r1, #0
 80016a6:	00d9      	lsls	r1, r3, #3
 80016a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016ac:	00d0      	lsls	r0, r2, #3
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	1912      	adds	r2, r2, r4
 80016b4:	eb45 0303 	adc.w	r3, r5, r3
 80016b8:	f04f 0000 	mov.w	r0, #0
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	0299      	lsls	r1, r3, #10
 80016c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016c6:	0290      	lsls	r0, r2, #10
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	f7fe fd76 	bl	80001c8 <__aeabi_uldivmod>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4613      	mov	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	0c1b      	lsrs	r3, r3, #16
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	3301      	adds	r3, #1
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	60bb      	str	r3, [r7, #8]
      break;
 80016fe:	e002      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001702:	60bb      	str	r3, [r7, #8]
      break;
 8001704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001706:	68bb      	ldr	r3, [r7, #8]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	00f42400 	.word	0x00f42400
 800171c:	007a1200 	.word	0x007a1200

08001720 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e022      	b.n	8001778 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7fe ffc5 	bl	80006d4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f814 	bl	8001780 <HAL_SD_InitCard>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00a      	b.n	8001778 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b08e      	sub	sp, #56	; 0x38
 8001784:	af04      	add	r7, sp, #16
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800179c:	2376      	movs	r3, #118	; 0x76
 800179e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681d      	ldr	r5, [r3, #0]
 80017a4:	466c      	mov	r4, sp
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b8:	4628      	mov	r0, r5
 80017ba:	f000 ff35 	bl	8002628 <SDIO_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80017c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e04c      	b.n	800186a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_SD_InitCard+0xf4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 ff6d 	bl	80026ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_SD_InitCard+0xf4>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fe68 	bl	80024bc <SD_PowerON>
 80017ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00b      	beq.n	800180c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e02e      	b.n	800186a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fd89 	bl	8002324 <SD_InitCard>
 8001812:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e01b      	b.n	800186a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800183a:	4618      	mov	r0, r3
 800183c:	f000 ffd0 	bl	80027e0 <SDMMC_CmdBlockLength>
 8001840:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00f      	beq.n	8001868 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_SD_InitCard+0xf8>)
 800184e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bdb0      	pop	{r4, r5, r7, pc}
 8001872:	bf00      	nop
 8001874:	422580a0 	.word	0x422580a0
 8001878:	004005ff 	.word	0x004005ff

0800187c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b092      	sub	sp, #72	; 0x48
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800188a:	f7ff f857 	bl	800093c <HAL_GetTick>
 800188e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d107      	bne.n	80018ae <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e1bd      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 81b0 	bne.w	8001c1c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80018c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	441a      	add	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d907      	bls.n	80018e0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e1a4      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2203      	movs	r2, #3
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d002      	beq.n	80018fe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80018f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fa:	025b      	lsls	r3, r3, #9
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	025b      	lsls	r3, r3, #9
 8001908:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800190a:	2390      	movs	r3, #144	; 0x90
 800190c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800190e:	2302      	movs	r3, #2
 8001910:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001916:	2301      	movs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f107 0214 	add.w	r2, r7, #20
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f000 ff2f 	bl	8002788 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d90a      	bls.n	8001946 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2202      	movs	r2, #2
 8001934:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800193c:	4618      	mov	r0, r3
 800193e:	f000 ff93 	bl	8002868 <SDMMC_CmdReadMultiBlock>
 8001942:	6478      	str	r0, [r7, #68]	; 0x44
 8001944:	e009      	b.n	800195a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001952:	4618      	mov	r0, r3
 8001954:	f000 ff66 	bl	8002824 <SDMMC_CmdReadSingleBlock>
 8001958:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800195a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195c:	2b00      	cmp	r3, #0
 800195e:	d012      	beq.n	8001986 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a7a      	ldr	r2, [pc, #488]	; (8001b50 <HAL_SD_ReadBlocks+0x2d4>)
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800196c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196e:	431a      	orrs	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e151      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800198a:	e061      	b.n	8001a50 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d03c      	beq.n	8001a14 <HAL_SD_ReadBlocks+0x198>
 800199a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d039      	beq.n	8001a14 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	643b      	str	r3, [r7, #64]	; 0x40
 80019a4:	e033      	b.n	8001a0e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fe67 	bl	800267e <SDIO_ReadFIFO>
 80019b0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80019ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019bc:	3301      	adds	r3, #1
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80019c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c2:	3b01      	subs	r3, #1
 80019c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80019c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80019d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d2:	3301      	adds	r3, #1
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80019d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d8:	3b01      	subs	r3, #1
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80019dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80019e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e8:	3301      	adds	r3, #1
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80019ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ee:	3b01      	subs	r3, #1
 80019f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80019f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f4:	0e1b      	lsrs	r3, r3, #24
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80019fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fe:	3301      	adds	r3, #1
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a04:	3b01      	subs	r3, #1
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8001a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a10:	2b07      	cmp	r3, #7
 8001a12:	d9c8      	bls.n	80019a6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001a14:	f7fe ff92 	bl	800093c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d902      	bls.n	8001a2a <HAL_SD_ReadBlocks+0x1ae>
 8001a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d112      	bne.n	8001a50 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_SD_ReadBlocks+0x2d4>)
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a36:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0ec      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a56:	f240 332a 	movw	r3, #810	; 0x32a
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d095      	beq.n	800198c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d022      	beq.n	8001ab4 <HAL_SD_ReadBlocks+0x238>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d91f      	bls.n	8001ab4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d01b      	beq.n	8001ab4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 ff57 	bl	8002934 <SDMMC_CmdStopTransfer>
 8001a86:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d012      	beq.n	8001ab4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a2f      	ldr	r2, [pc, #188]	; (8001b50 <HAL_SD_ReadBlocks+0x2d4>)
 8001a94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0ba      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d012      	beq.n	8001ae8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a22      	ldr	r2, [pc, #136]	; (8001b50 <HAL_SD_ReadBlocks+0x2d4>)
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	f043 0208 	orr.w	r2, r3, #8
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0a0      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_SD_ReadBlocks+0x2d4>)
 8001afc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b02:	f043 0202 	orr.w	r2, r3, #2
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e086      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d063      	beq.n	8001bf2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_SD_ReadBlocks+0x2d4>)
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b36:	f043 0220 	orr.w	r2, r3, #32
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e06c      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
 8001b50:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 fd90 	bl	800267e <SDIO_ReadFIFO>
 8001b5e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b66:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b70:	3b01      	subs	r3, #1
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b80:	3301      	adds	r3, #1
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b86:	3b01      	subs	r3, #1
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	3301      	adds	r3, #1
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	0e1b      	lsrs	r3, r3, #24
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bac:	3301      	adds	r3, #1
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001bb6:	f7fe fec1 	bl	800093c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d902      	bls.n	8001bcc <HAL_SD_ReadBlocks+0x350>
 8001bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d112      	bne.n	8001bf2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <HAL_SD_ReadBlocks+0x3b8>)
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e01b      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_SD_ReadBlocks+0x38a>
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1a6      	bne.n	8001b54 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f240 523a 	movw	r2, #1338	; 0x53a
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e006      	b.n	8001c2a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
  }
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3748      	adds	r7, #72	; 0x48
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	004005ff 	.word	0x004005ff

08001c38 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b092      	sub	sp, #72	; 0x48
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001c46:	f7fe fe79 	bl	800093c <HAL_GetTick>
 8001c4a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e166      	b.n	8001f38 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	f040 8159 	bne.w	8001f2a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	441a      	add	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d907      	bls.n	8001c9c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c90:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e14d      	b.n	8001f38 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d002      	beq.n	8001cba <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb6:	025b      	lsls	r3, r3, #9
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	025b      	lsls	r3, r3, #9
 8001cc4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001cc6:	2390      	movs	r3, #144	; 0x90
 8001cc8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f107 0218 	add.w	r2, r7, #24
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fd51 	bl	8002788 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d90a      	bls.n	8001d02 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fdf9 	bl	80028f0 <SDMMC_CmdWriteMultiBlock>
 8001cfe:	6478      	str	r0, [r7, #68]	; 0x44
 8001d00:	e009      	b.n	8001d16 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2210      	movs	r2, #16
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fdcc 	bl	80028ac <SDMMC_CmdWriteSingleBlock>
 8001d14:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d012      	beq.n	8001d42 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a87      	ldr	r2, [pc, #540]	; (8001f40 <HAL_SD_WriteBlocks+0x308>)
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0fa      	b.n	8001f38 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001d46:	e065      	b.n	8001e14 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d040      	beq.n	8001dd8 <HAL_SD_WriteBlocks+0x1a0>
 8001d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d03d      	beq.n	8001dd8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d60:	e037      	b.n	8001dd2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d70:	3b01      	subs	r3, #1
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8001d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	021a      	lsls	r2, r3, #8
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	3301      	adds	r3, #1
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da0:	3b01      	subs	r3, #1
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	061a      	lsls	r2, r3, #24
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db2:	3301      	adds	r3, #1
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db8:	3b01      	subs	r3, #1
 8001dba:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f107 0214 	add.w	r2, r7, #20
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 fc66 	bl	8002698 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dce:	3301      	adds	r3, #1
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8001dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd4:	2b07      	cmp	r3, #7
 8001dd6:	d9c4      	bls.n	8001d62 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001dd8:	f7fe fdb0 	bl	800093c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d902      	bls.n	8001dee <HAL_SD_WriteBlocks+0x1b6>
 8001de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d112      	bne.n	8001e14 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a53      	ldr	r2, [pc, #332]	; (8001f40 <HAL_SD_WriteBlocks+0x308>)
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e091      	b.n	8001f38 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1a:	f240 331a 	movw	r3, #794	; 0x31a
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d091      	beq.n	8001d48 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d022      	beq.n	8001e78 <HAL_SD_WriteBlocks+0x240>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d91f      	bls.n	8001e78 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d01b      	beq.n	8001e78 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fd75 	bl	8002934 <SDMMC_CmdStopTransfer>
 8001e4a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d012      	beq.n	8001e78 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a3a      	ldr	r2, [pc, #232]	; (8001f40 <HAL_SD_WriteBlocks+0x308>)
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e60:	431a      	orrs	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e05f      	b.n	8001f38 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d012      	beq.n	8001eac <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_SD_WriteBlocks+0x308>)
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	f043 0208 	orr.w	r2, r3, #8
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e045      	b.n	8001f38 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d012      	beq.n	8001ee0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <HAL_SD_WriteBlocks+0x308>)
 8001ec0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e02b      	b.n	8001f38 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d012      	beq.n	8001f14 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <HAL_SD_WriteBlocks+0x308>)
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	f043 0210 	orr.w	r2, r3, #16
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e011      	b.n	8001f38 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f240 523a 	movw	r2, #1338	; 0x53a
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e006      	b.n	8001f38 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3748      	adds	r7, #72	; 0x48
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	004005ff 	.word	0x004005ff

08001f44 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f52:	0f9b      	lsrs	r3, r3, #30
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f70:	0e1b      	lsrs	r3, r3, #24
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f82:	0c1b      	lsrs	r3, r3, #16
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fa4:	0d1b      	lsrs	r3, r3, #20
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fc2:	0bdb      	lsrs	r3, r3, #15
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fd4:	0b9b      	lsrs	r3, r3, #14
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe6:	0b5b      	lsrs	r3, r3, #13
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff8:	0b1b      	lsrs	r3, r3, #12
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	b2da      	uxtb	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2200      	movs	r2, #0
 800200a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	2b00      	cmp	r3, #0
 8002012:	d163      	bne.n	80020dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002018:	009a      	lsls	r2, r3, #2
 800201a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800201e:	4013      	ands	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002024:	0f92      	lsrs	r2, r2, #30
 8002026:	431a      	orrs	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002030:	0edb      	lsrs	r3, r3, #27
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	b2da      	uxtb	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002042:	0e1b      	lsrs	r3, r3, #24
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	b2da      	uxtb	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002054:	0d5b      	lsrs	r3, r3, #21
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	b2da      	uxtb	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002066:	0c9b      	lsrs	r3, r3, #18
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	b2da      	uxtb	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002078:	0bdb      	lsrs	r3, r3, #15
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	b2da      	uxtb	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	7e1b      	ldrb	r3, [r3, #24]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	3302      	adds	r3, #2
 800209c:	2201      	movs	r2, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80020a6:	fb02 f203 	mul.w	r2, r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	7a1b      	ldrb	r3, [r3, #8]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	2201      	movs	r2, #1
 80020ba:	409a      	lsls	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80020c8:	0a52      	lsrs	r2, r2, #9
 80020ca:	fb02 f203 	mul.w	r2, r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d8:	661a      	str	r2, [r3, #96]	; 0x60
 80020da:	e031      	b.n	8002140 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d11d      	bne.n	8002120 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020f2:	0c1b      	lsrs	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	3301      	adds	r3, #1
 8002100:	029a      	lsls	r2, r3, #10
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002114:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	661a      	str	r2, [r3, #96]	; 0x60
 800211e:	e00f      	b.n	8002140 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a58      	ldr	r2, [pc, #352]	; (8002288 <HAL_SD_GetCardCSD+0x344>)
 8002126:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e09d      	b.n	800227c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002144:	0b9b      	lsrs	r3, r3, #14
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002156:	09db      	lsrs	r3, r3, #7
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800215e:	b2da      	uxtb	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800216e:	b2da      	uxtb	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	0fdb      	lsrs	r3, r3, #31
 800217a:	b2da      	uxtb	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	0f5b      	lsrs	r3, r3, #29
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	b2da      	uxtb	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	0d9b      	lsrs	r3, r3, #22
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	0d5b      	lsrs	r3, r3, #21
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	0bdb      	lsrs	r3, r3, #15
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	0b9b      	lsrs	r3, r3, #14
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	b2da      	uxtb	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	0b5b      	lsrs	r3, r3, #13
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	0b1b      	lsrs	r3, r3, #12
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	0a9b      	lsrs	r3, r3, #10
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	b2da      	uxtb	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	b2da      	uxtb	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	085b      	lsrs	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800226a:	b2da      	uxtb	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	004005ff 	.word	0x004005ff

0800228c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f96e 	bl	80025d8 <SD_SendStatus>
 80022fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	0a5b      	lsrs	r3, r3, #9
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800231a:	693b      	ldr	r3, [r7, #16]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	b094      	sub	sp, #80	; 0x50
 8002328:	af04      	add	r7, sp, #16
 800232a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800232c:	2301      	movs	r3, #1
 800232e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f9cf 	bl	80026d8 <SDIO_GetPowerState>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002340:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002344:	e0b6      	b.n	80024b4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	2b03      	cmp	r3, #3
 800234c:	d02f      	beq.n	80023ae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fbb5 	bl	8002ac2 <SDMMC_CmdSendCID>
 8002358:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800235a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <SD_InitCard+0x40>
    {
      return errorstate;
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	e0a7      	b.n	80024b4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f9f9 	bl	8002762 <SDIO_GetResponse>
 8002370:	4602      	mov	r2, r0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2104      	movs	r1, #4
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f9f0 	bl	8002762 <SDIO_GetResponse>
 8002382:	4602      	mov	r2, r0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2108      	movs	r1, #8
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f9e7 	bl	8002762 <SDIO_GetResponse>
 8002394:	4602      	mov	r2, r0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	210c      	movs	r1, #12
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f9de 	bl	8002762 <SDIO_GetResponse>
 80023a6:	4602      	mov	r2, r0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d00d      	beq.n	80023d2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f107 020e 	add.w	r2, r7, #14
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fbbb 	bl	8002b3c <SDMMC_CmdSetRelAdd>
 80023c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80023c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <SD_InitCard+0xae>
    {
      return errorstate;
 80023ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d0:	e070      	b.n	80024b4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d036      	beq.n	8002448 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80023da:	89fb      	ldrh	r3, [r7, #14]
 80023dc:	461a      	mov	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ea:	041b      	lsls	r3, r3, #16
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f000 fb85 	bl	8002afe <SDMMC_CmdSendCSD>
 80023f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <SD_InitCard+0xdc>
    {
      return errorstate;
 80023fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fe:	e059      	b.n	80024b4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f9ab 	bl	8002762 <SDIO_GetResponse>
 800240c:	4602      	mov	r2, r0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2104      	movs	r1, #4
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f9a2 	bl	8002762 <SDIO_GetResponse>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2108      	movs	r1, #8
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f999 	bl	8002762 <SDIO_GetResponse>
 8002430:	4602      	mov	r2, r0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	210c      	movs	r1, #12
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f990 	bl	8002762 <SDIO_GetResponse>
 8002442:	4602      	mov	r2, r0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2104      	movs	r1, #4
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f987 	bl	8002762 <SDIO_GetResponse>
 8002454:	4603      	mov	r3, r0
 8002456:	0d1a      	lsrs	r2, r3, #20
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fd6e 	bl	8001f44 <HAL_SD_GetCardCSD>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800246e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002472:	e01f      	b.n	80024b4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	461a      	mov	r2, r3
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	4608      	mov	r0, r1
 8002486:	f000 fa77 	bl	8002978 <SDMMC_CmdSelDesel>
 800248a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800248c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <SD_InitCard+0x172>
  {
    return errorstate;
 8002492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002494:	e00e      	b.n	80024b4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681d      	ldr	r5, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	466c      	mov	r4, sp
 800249e:	f103 0210 	add.w	r2, r3, #16
 80024a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024a8:	3304      	adds	r3, #4
 80024aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ac:	4628      	mov	r0, r5
 80024ae:	f000 f8bb 	bl	8002628 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3740      	adds	r7, #64	; 0x40
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bdb0      	pop	{r4, r5, r7, pc}

080024bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fa72 	bl	80029be <SDMMC_CmdGoIdleState>
 80024da:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	e072      	b.n	80025cc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fa85 	bl	80029fa <SDMMC_CmdOperCond>
 80024f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fa5b 	bl	80029be <SDMMC_CmdGoIdleState>
 8002508:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <SD_PowerON+0x5e>
    {
      return errorstate;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	e05b      	b.n	80025cc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251e:	2b01      	cmp	r3, #1
 8002520:	d137      	bne.n	8002592 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fa85 	bl	8002a38 <SDMMC_CmdAppCommand>
 800252e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d02d      	beq.n	8002592 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002536:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800253a:	e047      	b.n	80025cc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fa78 	bl	8002a38 <SDMMC_CmdAppCommand>
 8002548:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <SD_PowerON+0x98>
    {
      return errorstate;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	e03b      	b.n	80025cc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	491e      	ldr	r1, [pc, #120]	; (80025d4 <SD_PowerON+0x118>)
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fa8e 	bl	8002a7c <SDMMC_CmdAppOperCommand>
 8002560:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002568:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800256c:	e02e      	b.n	80025cc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f8f4 	bl	8002762 <SDIO_GetResponse>
 800257a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	0fdb      	lsrs	r3, r3, #31
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <SD_PowerON+0xcc>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <SD_PowerON+0xce>
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]

    count++;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	3301      	adds	r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002598:	4293      	cmp	r3, r2
 800259a:	d802      	bhi.n	80025a2 <SD_PowerON+0xe6>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0cc      	beq.n	800253c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d902      	bls.n	80025b2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80025ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b0:	e00c      	b.n	80025cc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
 80025c2:	e002      	b.n	80025ca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	c1100000 	.word	0xc1100000

080025d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80025e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80025ec:	e018      	b.n	8002620 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	4619      	mov	r1, r3
 80025fa:	4610      	mov	r0, r2
 80025fc:	f000 fabf 	bl	8002b7e <SDMMC_CmdSendStatus>
 8002600:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <SD_SendStatus+0x34>
  {
    return errorstate;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	e009      	b.n	8002620 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f8a5 	bl	8002762 <SDIO_GetResponse>
 8002618:	4602      	mov	r2, r0
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002628:	b084      	sub	sp, #16
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	f107 001c 	add.w	r0, r7, #28
 8002636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800263e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002640:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002642:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8002646:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800264a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800264e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8002652:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8002662:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	b004      	add	sp, #16
 800267c:	4770      	bx	lr

0800267e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2203      	movs	r2, #3
 80026c6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80026c8:	2002      	movs	r0, #2
 80026ca:	f7fe f943 	bl	8000954 <HAL_Delay>
  
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0303 	and.w	r3, r3, #3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002712:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002718:	431a      	orrs	r2, r3
                       Command->CPSM);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800271e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800272e:	f023 030f 	bic.w	r3, r3, #15
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	b2db      	uxtb	r3, r3
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3314      	adds	r3, #20
 8002770:	461a      	mov	r2, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	4413      	add	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
}  
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80027ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80027b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80027ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0

}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80027ee:	2310      	movs	r3, #16
 80027f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80027f2:	2340      	movs	r3, #64	; 0x40
 80027f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff74 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	2110      	movs	r1, #16
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa02 	bl	8002c1c <SDMMC_GetCmdResp1>
 8002818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800281a:	69fb      	ldr	r3, [r7, #28]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002832:	2311      	movs	r3, #17
 8002834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002836:	2340      	movs	r3, #64	; 0x40
 8002838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800283e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002842:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002844:	f107 0308 	add.w	r3, r7, #8
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ff52 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	2111      	movs	r1, #17
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f9e0 	bl	8002c1c <SDMMC_GetCmdResp1>
 800285c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800285e:	69fb      	ldr	r3, [r7, #28]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002876:	2312      	movs	r3, #18
 8002878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800287a:	2340      	movs	r3, #64	; 0x40
 800287c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002886:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002888:	f107 0308 	add.w	r3, r7, #8
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff30 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	2112      	movs	r1, #18
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9be 	bl	8002c1c <SDMMC_GetCmdResp1>
 80028a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80028a2:	69fb      	ldr	r3, [r7, #28]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80028ba:	2318      	movs	r3, #24
 80028bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80028be:	2340      	movs	r3, #64	; 0x40
 80028c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff0e 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	2118      	movs	r1, #24
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f99c 	bl	8002c1c <SDMMC_GetCmdResp1>
 80028e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80028e6:	69fb      	ldr	r3, [r7, #28]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80028fe:	2319      	movs	r3, #25
 8002900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002902:	2340      	movs	r3, #64	; 0x40
 8002904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800290a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff feec 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	2119      	movs	r1, #25
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f97a 	bl	8002c1c <SDMMC_GetCmdResp1>
 8002928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800292a:	69fb      	ldr	r3, [r7, #28]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002940:	230c      	movs	r3, #12
 8002942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002944:	2340      	movs	r3, #64	; 0x40
 8002946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800294c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002950:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fecb 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <SDMMC_CmdStopTransfer+0x40>)
 8002960:	210c      	movs	r1, #12
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f95a 	bl	8002c1c <SDMMC_GetCmdResp1>
 8002968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800296a:	69fb      	ldr	r3, [r7, #28]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	05f5e100 	.word	0x05f5e100

08002978 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002988:	2307      	movs	r3, #7
 800298a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002998:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4619      	mov	r1, r3
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7ff fea7 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	2107      	movs	r1, #7
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f935 	bl	8002c1c <SDMMC_GetCmdResp1>
 80029b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b088      	sub	sp, #32
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029dc:	f107 0308 	add.w	r3, r7, #8
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff fe86 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f8eb 	bl	8002bc4 <SDMMC_GetCmdError>
 80029ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029f0:	69fb      	ldr	r3, [r7, #28]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b088      	sub	sp, #32
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002a02:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002a06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a0c:	2340      	movs	r3, #64	; 0x40
 8002a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fe67 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fae2 	bl	8002ff0 <SDMMC_GetCmdResp7>
 8002a2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002a46:	2337      	movs	r3, #55	; 0x37
 8002a48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a4a:	2340      	movs	r3, #64	; 0x40
 8002a4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a58:	f107 0308 	add.w	r3, r7, #8
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fe48 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	2137      	movs	r1, #55	; 0x37
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8d6 	bl	8002c1c <SDMMC_GetCmdResp1>
 8002a70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a72:	69fb      	ldr	r3, [r7, #28]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002a92:	2329      	movs	r3, #41	; 0x29
 8002a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a96:	2340      	movs	r3, #64	; 0x40
 8002a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002aa4:	f107 0308 	add.w	r3, r7, #8
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fe22 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f9e9 	bl	8002e88 <SDMMC_GetCmdResp3>
 8002ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b088      	sub	sp, #32
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002ad2:	23c0      	movs	r3, #192	; 0xc0
 8002ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ade:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fe04 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f983 	bl	8002df8 <SDMMC_GetCmdResp2>
 8002af2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002af4:	69fb      	ldr	r3, [r7, #28]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b088      	sub	sp, #32
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002b0c:	2309      	movs	r3, #9
 8002b0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002b10:	23c0      	movs	r3, #192	; 0xc0
 8002b12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fde5 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f964 	bl	8002df8 <SDMMC_GetCmdResp2>
 8002b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b32:	69fb      	ldr	r3, [r7, #28]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b4e:	2340      	movs	r3, #64	; 0x40
 8002b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b5c:	f107 0308 	add.w	r3, r7, #8
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fdc6 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f9c9 	bl	8002f04 <SDMMC_GetCmdResp6>
 8002b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b74:	69fb      	ldr	r3, [r7, #28]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b088      	sub	sp, #32
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002b8c:	230d      	movs	r3, #13
 8002b8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b90:	2340      	movs	r3, #64	; 0x40
 8002b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fda5 	bl	80026f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	210d      	movs	r1, #13
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f833 	bl	8002c1c <SDMMC_GetCmdResp1>
 8002bb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <SDMMC_GetCmdError+0x50>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <SDMMC_GetCmdError+0x54>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0a5b      	lsrs	r3, r3, #9
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1e5a      	subs	r2, r3, #1
 8002be6:	60fa      	str	r2, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002bec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bf0:	e009      	b.n	8002c06 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f1      	beq.n	8002be2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	22c5      	movs	r2, #197	; 0xc5
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000000 	.word	0x20000000
 8002c18:	10624dd3 	.word	0x10624dd3

08002c1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	460b      	mov	r3, r1
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002c2a:	4b70      	ldr	r3, [pc, #448]	; (8002dec <SDMMC_GetCmdResp1+0x1d0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a70      	ldr	r2, [pc, #448]	; (8002df0 <SDMMC_GetCmdResp1+0x1d4>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0a5a      	lsrs	r2, r3, #9
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	1e5a      	subs	r2, r3, #1
 8002c42:	61fa      	str	r2, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002c48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c4c:	e0c9      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ef      	beq.n	8002c3e <SDMMC_GetCmdResp1+0x22>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ea      	bne.n	8002c3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2204      	movs	r2, #4
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	e0b1      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0a6      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	22c5      	movs	r2, #197	; 0xc5
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f7ff fd54 	bl	8002748 <SDIO_GetCommandResponse>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d001      	beq.n	8002cae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e099      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002cae:	2100      	movs	r1, #0
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f7ff fd56 	bl	8002762 <SDIO_GetResponse>
 8002cb6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4b4e      	ldr	r3, [pc, #312]	; (8002df4 <SDMMC_GetCmdResp1+0x1d8>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e08d      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	da02      	bge.n	8002cd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd0:	e087      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002cdc:	2340      	movs	r3, #64	; 0x40
 8002cde:	e080      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	e079      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfc:	e071      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0c:	e069      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d1c:	e061      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d2c:	e059      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3c:	e051      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d4c:	e049      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d5c:	e041      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8002d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6c:	e039      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7c:	e031      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002d88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d8c:	e029      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002d98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d9c:	e021      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002da8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dac:	e019      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dbc:	e011      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8002dc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dcc:	e009      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002dd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002ddc:	e001      	b.n	8002de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000000 	.word	0x20000000
 8002df0:	10624dd3 	.word	0x10624dd3
 8002df4:	fdffe008 	.word	0xfdffe008

08002df8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <SDMMC_GetCmdResp2+0x88>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <SDMMC_GetCmdResp2+0x8c>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0a5b      	lsrs	r3, r3, #9
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	fb02 f303 	mul.w	r3, r2, r3
 8002e14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1e5a      	subs	r2, r3, #1
 8002e1a:	60fa      	str	r2, [r7, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002e20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e24:	e026      	b.n	8002e74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0ef      	beq.n	8002e16 <SDMMC_GetCmdResp2+0x1e>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ea      	bne.n	8002e16 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e52:	2304      	movs	r3, #4
 8002e54:	e00e      	b.n	8002e74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e003      	b.n	8002e74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	22c5      	movs	r2, #197	; 0xc5
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	20000000 	.word	0x20000000
 8002e84:	10624dd3 	.word	0x10624dd3

08002e88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <SDMMC_GetCmdResp3+0x74>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <SDMMC_GetCmdResp3+0x78>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0a5b      	lsrs	r3, r3, #9
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e5a      	subs	r2, r3, #1
 8002eaa:	60fa      	str	r2, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002eb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002eb4:	e01b      	b.n	8002eee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0ef      	beq.n	8002ea6 <SDMMC_GetCmdResp3+0x1e>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ea      	bne.n	8002ea6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d004      	beq.n	8002ee6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	e003      	b.n	8002eee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	22c5      	movs	r2, #197	; 0xc5
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000000 	.word	0x20000000
 8002f00:	10624dd3 	.word	0x10624dd3

08002f04 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002f12:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <SDMMC_GetCmdResp6+0xe4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a35      	ldr	r2, [pc, #212]	; (8002fec <SDMMC_GetCmdResp6+0xe8>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	0a5b      	lsrs	r3, r3, #9
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	1e5a      	subs	r2, r3, #1
 8002f2c:	61fa      	str	r2, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002f32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f36:	e052      	b.n	8002fde <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ef      	beq.n	8002f28 <SDMMC_GetCmdResp6+0x24>
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ea      	bne.n	8002f28 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2204      	movs	r2, #4
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f64:	2304      	movs	r3, #4
 8002f66:	e03a      	b.n	8002fde <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e02f      	b.n	8002fde <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7ff fbe2 	bl	8002748 <SDIO_GetCommandResponse>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	7afb      	ldrb	r3, [r7, #11]
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d001      	beq.n	8002f92 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e025      	b.n	8002fde <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	22c5      	movs	r2, #197	; 0xc5
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002f98:	2100      	movs	r1, #0
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff fbe1 	bl	8002762 <SDIO_GetResponse>
 8002fa0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e011      	b.n	8002fde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc8:	e009      	b.n	8002fde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd8:	e001      	b.n	8002fde <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	10624dd3 	.word	0x10624dd3

08002ff0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <SDMMC_GetCmdResp7+0x94>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <SDMMC_GetCmdResp7+0x98>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0a5b      	lsrs	r3, r3, #9
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	fb02 f303 	mul.w	r3, r2, r3
 800300c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1e5a      	subs	r2, r3, #1
 8003012:	60fa      	str	r2, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800301c:	e02c      	b.n	8003078 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ef      	beq.n	800300e <SDMMC_GetCmdResp7+0x1e>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ea      	bne.n	800300e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2204      	movs	r2, #4
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800304a:	2304      	movs	r3, #4
 800304c:	e014      	b.n	8003078 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003060:	2301      	movs	r3, #1
 8003062:	e009      	b.n	8003078 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2240      	movs	r2, #64	; 0x40
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003076:	2300      	movs	r3, #0
  
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	20000000 	.word	0x20000000
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003090:	4904      	ldr	r1, [pc, #16]	; (80030a4 <MX_FATFS_Init+0x18>)
 8003092:	4805      	ldr	r0, [pc, #20]	; (80030a8 <MX_FATFS_Init+0x1c>)
 8003094:	f000 f9bc 	bl	8003410 <FATFS_LinkDriver>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <MX_FATFS_Init+0x20>)
 800309e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200000c0 	.word	0x200000c0
 80030a8:	080034b0 	.word	0x080034b0
 80030ac:	200000bc 	.word	0x200000bc

080030b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80030ba:	f000 f86b 	bl	8003194 <BSP_SD_IsDetected>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d001      	beq.n	80030c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e005      	b.n	80030d4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80030c8:	4804      	ldr	r0, [pc, #16]	; (80030dc <BSP_SD_Init+0x2c>)
 80030ca:	f7fe fb29 	bl	8001720 <HAL_SD_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80030d2:	79fb      	ldrb	r3, [r7, #7]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000034 	.word	0x20000034

080030e0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	4806      	ldr	r0, [pc, #24]	; (8003118 <BSP_SD_ReadBlocks+0x38>)
 80030fe:	f7fe fbbd 	bl	800187c <HAL_SD_ReadBlocks>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800310c:	7dfb      	ldrb	r3, [r7, #23]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000034 	.word	0x20000034

0800311c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	4806      	ldr	r0, [pc, #24]	; (8003154 <BSP_SD_WriteBlocks+0x38>)
 800313a:	f7fe fd7d 	bl	8001c38 <HAL_SD_WriteBlocks>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003148:	7dfb      	ldrb	r3, [r7, #23]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000034 	.word	0x20000034

08003158 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800315c:	4805      	ldr	r0, [pc, #20]	; (8003174 <BSP_SD_GetCardState+0x1c>)
 800315e:	f7ff f8c1 	bl	80022e4 <HAL_SD_GetCardState>
 8003162:	4603      	mov	r3, r0
 8003164:	2b04      	cmp	r3, #4
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
}
 800316e:	4618      	mov	r0, r3
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000034 	.word	0x20000034

08003178 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4803      	ldr	r0, [pc, #12]	; (8003190 <BSP_SD_GetCardInfo+0x18>)
 8003184:	f7ff f882 	bl	800228c <HAL_SD_GetCardInfo>
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000034 	.word	0x20000034

08003194 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800319a:	2301      	movs	r3, #1
 800319c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	b2db      	uxtb	r3, r3
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <SD_CheckStatus+0x38>)
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80031c0:	f7ff ffca 	bl	8003158 <BSP_SD_GetCardState>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d107      	bne.n	80031da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <SD_CheckStatus+0x38>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <SD_CheckStatus+0x38>)
 80031d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80031da:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <SD_CheckStatus+0x38>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b2db      	uxtb	r3, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000009 	.word	0x20000009

080031ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <SD_initialize+0x38>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80031fc:	f7ff ff58 	bl	80030b0 <BSP_SD_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ffd1 	bl	80031b0 <SD_CheckStatus>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <SD_initialize+0x38>)
 8003214:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003216:	4b03      	ldr	r3, [pc, #12]	; (8003224 <SD_initialize+0x38>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	b2db      	uxtb	r3, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000009 	.word	0x20000009

08003228 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ffbb 	bl	80031b0 <SD_CheckStatus>
 800323a:	4603      	mov	r3, r0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	4603      	mov	r3, r0
 8003252:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003258:	f04f 33ff 	mov.w	r3, #4294967295
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	f7ff ff3d 	bl	80030e0 <BSP_SD_ReadBlocks>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d107      	bne.n	800327c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800326c:	bf00      	nop
 800326e:	f7ff ff73 	bl	8003158 <BSP_SD_GetCardState>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1fa      	bne.n	800326e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800327c:	7dfb      	ldrb	r3, [r7, #23]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800329a:	f04f 33ff 	mov.w	r3, #4294967295
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	68b8      	ldr	r0, [r7, #8]
 80032a4:	f7ff ff3a 	bl	800311c <BSP_SD_WriteBlocks>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80032ae:	bf00      	nop
 80032b0:	f7ff ff52 	bl	8003158 <BSP_SD_GetCardState>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1fa      	bne.n	80032b0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	603a      	str	r2, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
 80032d4:	460b      	mov	r3, r1
 80032d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <SD_ioctl+0xac>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <SD_ioctl+0x28>
 80032ec:	2303      	movs	r3, #3
 80032ee:	e03c      	b.n	800336a <SD_ioctl+0xa2>

  switch (cmd)
 80032f0:	79bb      	ldrb	r3, [r7, #6]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d834      	bhi.n	8003360 <SD_ioctl+0x98>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <SD_ioctl+0x34>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003315 	.word	0x08003315
 8003304:	0800332d 	.word	0x0800332d
 8003308:	08003347 	.word	0x08003347
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003312:	e028      	b.n	8003366 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff2d 	bl	8003178 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800332a:	e01c      	b.n	8003366 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff21 	bl	8003178 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	b29a      	uxth	r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003344:	e00f      	b.n	8003366 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003346:	f107 030c 	add.w	r3, r7, #12
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff14 	bl	8003178 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	0a5a      	lsrs	r2, r3, #9
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800335e:	e002      	b.n	8003366 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003360:	2304      	movs	r3, #4
 8003362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800336a:	4618      	mov	r0, r3
 800336c:	3730      	adds	r7, #48	; 0x30
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000009 	.word	0x20000009

08003378 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	4613      	mov	r3, r2
 8003384:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800338e:	4b1f      	ldr	r3, [pc, #124]	; (800340c <FATFS_LinkDriverEx+0x94>)
 8003390:	7a5b      	ldrb	r3, [r3, #9]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d131      	bne.n	80033fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003398:	4b1c      	ldr	r3, [pc, #112]	; (800340c <FATFS_LinkDriverEx+0x94>)
 800339a:	7a5b      	ldrb	r3, [r3, #9]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <FATFS_LinkDriverEx+0x94>)
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <FATFS_LinkDriverEx+0x94>)
 80033a8:	7a5b      	ldrb	r3, [r3, #9]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4a17      	ldr	r2, [pc, #92]	; (800340c <FATFS_LinkDriverEx+0x94>)
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <FATFS_LinkDriverEx+0x94>)
 80033b8:	7a5b      	ldrb	r3, [r3, #9]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <FATFS_LinkDriverEx+0x94>)
 80033c0:	4413      	add	r3, r2
 80033c2:	79fa      	ldrb	r2, [r7, #7]
 80033c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <FATFS_LinkDriverEx+0x94>)
 80033c8:	7a5b      	ldrb	r3, [r3, #9]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	b2d1      	uxtb	r1, r2
 80033d0:	4a0e      	ldr	r2, [pc, #56]	; (800340c <FATFS_LinkDriverEx+0x94>)
 80033d2:	7251      	strb	r1, [r2, #9]
 80033d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80033d6:	7dbb      	ldrb	r3, [r7, #22]
 80033d8:	3330      	adds	r3, #48	; 0x30
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3301      	adds	r3, #1
 80033e4:	223a      	movs	r2, #58	; 0x3a
 80033e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	3302      	adds	r3, #2
 80033ec:	222f      	movs	r2, #47	; 0x2f
 80033ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3303      	adds	r3, #3
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000028 	.word	0x20000028

08003410 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	6839      	ldr	r1, [r7, #0]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffaa 	bl	8003378 <FATFS_LinkDriverEx>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <__libc_init_array>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	4d0d      	ldr	r5, [pc, #52]	; (8003468 <__libc_init_array+0x38>)
 8003434:	4c0d      	ldr	r4, [pc, #52]	; (800346c <__libc_init_array+0x3c>)
 8003436:	1b64      	subs	r4, r4, r5
 8003438:	10a4      	asrs	r4, r4, #2
 800343a:	2600      	movs	r6, #0
 800343c:	42a6      	cmp	r6, r4
 800343e:	d109      	bne.n	8003454 <__libc_init_array+0x24>
 8003440:	4d0b      	ldr	r5, [pc, #44]	; (8003470 <__libc_init_array+0x40>)
 8003442:	4c0c      	ldr	r4, [pc, #48]	; (8003474 <__libc_init_array+0x44>)
 8003444:	f000 f820 	bl	8003488 <_init>
 8003448:	1b64      	subs	r4, r4, r5
 800344a:	10a4      	asrs	r4, r4, #2
 800344c:	2600      	movs	r6, #0
 800344e:	42a6      	cmp	r6, r4
 8003450:	d105      	bne.n	800345e <__libc_init_array+0x2e>
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	f855 3b04 	ldr.w	r3, [r5], #4
 8003458:	4798      	blx	r3
 800345a:	3601      	adds	r6, #1
 800345c:	e7ee      	b.n	800343c <__libc_init_array+0xc>
 800345e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003462:	4798      	blx	r3
 8003464:	3601      	adds	r6, #1
 8003466:	e7f2      	b.n	800344e <__libc_init_array+0x1e>
 8003468:	080034cc 	.word	0x080034cc
 800346c:	080034cc 	.word	0x080034cc
 8003470:	080034cc 	.word	0x080034cc
 8003474:	080034d0 	.word	0x080034d0

08003478 <memset>:
 8003478:	4402      	add	r2, r0
 800347a:	4603      	mov	r3, r0
 800347c:	4293      	cmp	r3, r2
 800347e:	d100      	bne.n	8003482 <memset+0xa>
 8003480:	4770      	bx	lr
 8003482:	f803 1b01 	strb.w	r1, [r3], #1
 8003486:	e7f9      	b.n	800347c <memset+0x4>

08003488 <_init>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr

08003494 <_fini>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr
