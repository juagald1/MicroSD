
FW_MicroSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000567c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005908  08005908  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005910  08005910  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000009a8  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009b8  200009b8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010058  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025de  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  00032678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c8  00000000  00000000  00033168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022162  00000000  00000000  00033b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ead1  00000000  00000000  00055c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c64fc  00000000  00000000  00064763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012ac5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002afc  00000000  00000000  0012acb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057ec 	.word	0x080057ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080057ec 	.word	0x080057ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <SystemClock_Config>:
 */

#include "stm32f4xx_hal.h"

void SystemClock_Config	(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b094      	sub	sp, #80	; 0x50
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0320 	add.w	r3, r7, #32
 80004ca:	2230      	movs	r2, #48	; 0x30
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f005 f984 	bl	80057dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e4:	2300      	movs	r3, #0
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <SystemClock_Config+0xb8>)
 80004ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ec:	4a22      	ldr	r2, [pc, #136]	; (8000578 <SystemClock_Config+0xb8>)
 80004ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f2:	6413      	str	r3, [r2, #64]	; 0x40
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <SystemClock_Config+0xb8>)
 80004f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <SystemClock_Config+0xbc>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a1c      	ldr	r2, [pc, #112]	; (800057c <SystemClock_Config+0xbc>)
 800050a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <SystemClock_Config+0xbc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800051c:	2301      	movs	r3, #1
 800051e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800052e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000530:	2308      	movs	r3, #8
 8000532:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000534:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000538:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800053a:	2302      	movs	r3, #2
 800053c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800053e:	2307      	movs	r3, #7
 8000540:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fcf4 	bl	8000f34 <HAL_RCC_OscConfig>
  {
	   //JGD Generar Error
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	230f      	movs	r3, #15
 800054e:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2302      	movs	r3, #2
 8000552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000558:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800055e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000562:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2105      	movs	r1, #5
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ff5a 	bl	8001424 <HAL_RCC_ClockConfig>
  {
	   //JGD Generar Error
  }
}
 8000570:	bf00      	nop
 8000572:	3750      	adds	r7, #80	; 0x50
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	40007000 	.word	0x40007000

08000580 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init	(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <GPIO_Init+0x84>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <GPIO_Init+0x84>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <GPIO_Init+0x84>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <GPIO_Init+0x84>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <GPIO_Init+0x84>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <GPIO_Init+0x84>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <GPIO_Init+0x84>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <GPIO_Init+0x84>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <GPIO_Init+0x84>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <GPIO_Init+0x84>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <GPIO_Init+0x84>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <GPIO_Init+0x84>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <Init_HW>:

void Init_HW (void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_Init();
 800060c:	f000 f97a 	bl	8000904 <HAL_Init>
	SystemClock_Config();
 8000610:	f7ff ff56 	bl	80004c0 <SystemClock_Config>
	GPIO_Init();
 8000614:	f7ff ffb4 	bl	8000580 <GPIO_Init>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void SDIO_SD_Init(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  hsd.Instance				    = SDIO;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <SDIO_SD_Init+0x38>)
 8000622:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <SDIO_SD_Init+0x3c>)
 8000624:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge			= SDIO_CLOCK_EDGE_RISING;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <SDIO_SD_Init+0x38>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass 			= SDIO_CLOCK_BYPASS_DISABLE;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <SDIO_SD_Init+0x38>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave 		= SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <SDIO_SD_Init+0x38>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide 				= SDIO_BUS_WIDE_1B;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SDIO_SD_Init+0x38>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl  = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <SDIO_SD_Init+0x38>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv 			= 0;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <SDIO_SD_Init+0x38>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]

}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	200004c0 	.word	0x200004c0
 8000658:	40012c00 	.word	0x40012c00

0800065c <Init_MicroSD>:

void Init_MicroSD (void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	  SDIO_SD_Init();
 8000660:	f7ff ffdc 	bl	800061c <SDIO_SD_Init>
	  FATFS_Init();
 8000664:	f002 fd5c 	bl	8003120 <FATFS_Init>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <Escribe_Archivo>:
  * @param  TCHAR*: "Nombre del Archivo a Escribir".
  * @param  void*:  Datos a escribir en archivo
  * @retval None
  */
void Escribe_Archivo (const TCHAR* nombre_archivo)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if(f_mount(&FAT_FS, RAIZ_SD, 1) == FR_OK)
 8000674:	2201      	movs	r2, #1
 8000676:	491c      	ldr	r1, [pc, #112]	; (80006e8 <Escribe_Archivo+0x7c>)
 8000678:	481c      	ldr	r0, [pc, #112]	; (80006ec <Escribe_Archivo+0x80>)
 800067a:	f004 fc0d 	bl	8004e98 <f_mount>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d12c      	bne.n	80006de <Escribe_Archivo+0x72>
	  /**  MEJORAS
		*  Se debe permitir la entrada de datos como argumento en la función
	    *  Los datos deben entrar por un *void y transformarse a char
		*/

		char myData[] = "Hello World\0";									//JGD MEJORAR FUNCION
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <Escribe_Archivo+0x84>)
 8000686:	f107 0408 	add.w	r4, r7, #8
 800068a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800068c:	c407      	stmia	r4!, {r0, r1, r2}
 800068e:	7023      	strb	r3, [r4, #0]

		if(f_open(&Archivo, nombre_archivo, FA_WRITE | FA_READ) != FR_OK)
 8000690:	2203      	movs	r2, #3
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	4817      	ldr	r0, [pc, #92]	; (80006f4 <Escribe_Archivo+0x88>)
 8000696:	f004 fc45 	bl	8004f24 <f_open>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d004      	beq.n	80006aa <Escribe_Archivo+0x3e>
		{
			MicroSD.Flags.Error.Apertura_Archivo = 1;
 80006a0:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <Escribe_Archivo+0x8c>)
 80006a2:	7813      	ldrb	r3, [r2, #0]
 80006a4:	f043 0320 	orr.w	r3, r3, #32
 80006a8:	7013      	strb	r3, [r2, #0]
		}

		if (f_write(&Archivo, myData, sizeof(myData), &testByte) != FR_OK)
 80006aa:	f107 0108 	add.w	r1, r7, #8
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <Escribe_Archivo+0x90>)
 80006b0:	220d      	movs	r2, #13
 80006b2:	4810      	ldr	r0, [pc, #64]	; (80006f4 <Escribe_Archivo+0x88>)
 80006b4:	f004 fdf4 	bl	80052a0 <f_write>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d004      	beq.n	80006c8 <Escribe_Archivo+0x5c>
		{
			MicroSD.Flags.Error.Escritura_Archivo = 1;
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <Escribe_Archivo+0x8c>)
 80006c0:	7813      	ldrb	r3, [r2, #0]
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	7013      	strb	r3, [r2, #0]
		}

		if (f_close(&Archivo) != FR_OK)
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <Escribe_Archivo+0x88>)
 80006ca:	f004 ffdc 	bl	8005686 <f_close>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d004      	beq.n	80006de <Escribe_Archivo+0x72>
		{
			MicroSD.Flags.Error.Cierre_Archivo = 1;
 80006d4:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <Escribe_Archivo+0x8c>)
 80006d6:	7813      	ldrb	r3, [r2, #0]
 80006d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006dc:	7013      	strb	r3, [r2, #0]
		}
	}
}
 80006de:	bf00      	nop
 80006e0:	371c      	adds	r7, #28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000290 	.word	0x20000290
 80006f0:	08005804 	.word	0x08005804
 80006f4:	20000060 	.word	0x20000060
 80006f8:	20000544 	.word	0x20000544
 80006fc:	20000548 	.word	0x20000548

08000700 <main>:
  * @retval int
  */

int i =1;
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  Init_HW();
 8000704:	f7ff ff80 	bl	8000608 <Init_HW>
  Init_MicroSD();
 8000708:	f7ff ffa8 	bl	800065c <Init_MicroSD>

  //Crea_Archivo("AMUNT.TXT");
  Escribe_Archivo("AMUNT.TXT");
 800070c:	4801      	ldr	r0, [pc, #4]	; (8000714 <main+0x14>)
 800070e:	f7ff ffad 	bl	800066c <Escribe_Archivo>


  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0x12>
 8000714:	08005814 	.word	0x08005814

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_MspInit+0x4c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <HAL_MspInit+0x4c>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <HAL_MspInit+0x4c>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_MspInit+0x4c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_MspInit+0x4c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000756:	2007      	movs	r0, #7
 8000758:	f000 fa1c 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800

08000768 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a28      	ldr	r2, [pc, #160]	; (8000828 <HAL_SD_MspInit+0xc0>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d14a      	bne.n	8000820 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b27      	ldr	r3, [pc, #156]	; (800082c <HAL_SD_MspInit+0xc4>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a26      	ldr	r2, [pc, #152]	; (800082c <HAL_SD_MspInit+0xc4>)
 8000794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <HAL_SD_MspInit+0xc4>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <HAL_SD_MspInit+0xc4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1f      	ldr	r2, [pc, #124]	; (800082c <HAL_SD_MspInit+0xc4>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <HAL_SD_MspInit+0xc4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_SD_MspInit+0xc4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <HAL_SD_MspInit+0xc4>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_SD_MspInit+0xc4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80007de:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007f0:	230c      	movs	r3, #12
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <HAL_SD_MspInit+0xc8>)
 80007fc:	f000 f9fe 	bl	8000bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000800:	2304      	movs	r3, #4
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000810:	230c      	movs	r3, #12
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <HAL_SD_MspInit+0xcc>)
 800081c:	f000 f9ee 	bl	8000bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40012c00 	.word	0x40012c00
 800082c:	40023800 	.word	0x40023800
 8000830:	40020800 	.word	0x40020800
 8000834:	40020c00 	.word	0x40020c00

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f890 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008b6:	490e      	ldr	r1, [pc, #56]	; (80008f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008cc:	4c0b      	ldr	r4, [pc, #44]	; (80008fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008da:	f7ff ffd7 	bl	800088c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008de:	f004 ff59 	bl	8005794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff ff0d 	bl	8000700 <main>
  bx  lr    
 80008e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f4:	08005918 	.word	0x08005918
  ldr r2, =_sbss
 80008f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008fc:	200009b8 	.word	0x200009b8

08000900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <HAL_Init+0x40>)
 800090e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_Init+0x40>)
 800091a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_Init+0x40>)
 8000926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f931 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 f808 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff feee 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023c00 	.word	0x40023c00

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x58>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f93b 	bl	8000be2 <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f000 f911 	bl	8000baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_InitTick+0x5c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000004 	.word	0x20000004
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	20000008 	.word	0x20000008

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000000c 	.word	0x2000000c
 80009cc:	2000054c 	.word	0x2000054c

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2000054c 	.word	0x2000054c

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff ffee 	bl	80009d0 <HAL_GetTick>
 80009f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	d005      	beq.n	8000a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_Delay+0x44>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffde 	bl	80009d0 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8f7      	bhi.n	8000a10 <HAL_Delay+0x28>
  {
  }
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000000c 	.word	0x2000000c

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b60:	d301      	bcc.n	8000b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00f      	b.n	8000b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <SysTick_Config+0x40>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6e:	210f      	movs	r1, #15
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f7ff ff8e 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SysTick_Config+0x40>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SysTick_Config+0x40>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff47 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff5c 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ff8e 	bl	8000ae8 <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff5d 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffb0 	bl	8000b50 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	e16b      	b.n	8000ef0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 815a 	bne.w	8000eea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d005      	beq.n	8000c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d130      	bne.n	8000cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	f003 0201 	and.w	r2, r3, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d017      	beq.n	8000cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d123      	bne.n	8000d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0203 	and.w	r2, r3, #3
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80b4 	beq.w	8000eea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <HAL_GPIO_Init+0x30c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a5f      	ldr	r2, [pc, #380]	; (8000f08 <HAL_GPIO_Init+0x30c>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <HAL_GPIO_Init+0x30c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d9e:	4a5b      	ldr	r2, [pc, #364]	; (8000f0c <HAL_GPIO_Init+0x310>)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3302      	adds	r3, #2
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a52      	ldr	r2, [pc, #328]	; (8000f10 <HAL_GPIO_Init+0x314>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d02b      	beq.n	8000e22 <HAL_GPIO_Init+0x226>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a51      	ldr	r2, [pc, #324]	; (8000f14 <HAL_GPIO_Init+0x318>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d025      	beq.n	8000e1e <HAL_GPIO_Init+0x222>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <HAL_GPIO_Init+0x31c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d01f      	beq.n	8000e1a <HAL_GPIO_Init+0x21e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4f      	ldr	r2, [pc, #316]	; (8000f1c <HAL_GPIO_Init+0x320>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d019      	beq.n	8000e16 <HAL_GPIO_Init+0x21a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4e      	ldr	r2, [pc, #312]	; (8000f20 <HAL_GPIO_Init+0x324>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0x216>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4d      	ldr	r2, [pc, #308]	; (8000f24 <HAL_GPIO_Init+0x328>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00d      	beq.n	8000e0e <HAL_GPIO_Init+0x212>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4c      	ldr	r2, [pc, #304]	; (8000f28 <HAL_GPIO_Init+0x32c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x20e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4b      	ldr	r2, [pc, #300]	; (8000f2c <HAL_GPIO_Init+0x330>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_Init+0x20a>
 8000e02:	2307      	movs	r3, #7
 8000e04:	e00e      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e06:	2308      	movs	r3, #8
 8000e08:	e00c      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	e00a      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e0e:	2305      	movs	r3, #5
 8000e10:	e008      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e12:	2304      	movs	r3, #4
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e22:	2300      	movs	r3, #0
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	f002 0203 	and.w	r2, r2, #3
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	4093      	lsls	r3, r2
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e34:	4935      	ldr	r1, [pc, #212]	; (8000f0c <HAL_GPIO_Init+0x310>)
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e42:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e66:	4a32      	ldr	r2, [pc, #200]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eba:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3301      	adds	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	f67f ae90 	bls.w	8000c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40013800 	.word	0x40013800
 8000f10:	40020000 	.word	0x40020000
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020c00 	.word	0x40020c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40021400 	.word	0x40021400
 8000f28:	40021800 	.word	0x40021800
 8000f2c:	40021c00 	.word	0x40021c00
 8000f30:	40013c00 	.word	0x40013c00

08000f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e264      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d075      	beq.n	800103e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f52:	4ba3      	ldr	r3, [pc, #652]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d00c      	beq.n	8000f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f5e:	4ba0      	ldr	r3, [pc, #640]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d112      	bne.n	8000f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6a:	4b9d      	ldr	r3, [pc, #628]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f76:	d10b      	bne.n	8000f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	4b99      	ldr	r3, [pc, #612]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d05b      	beq.n	800103c <HAL_RCC_OscConfig+0x108>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d157      	bne.n	800103c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e23f      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f98:	d106      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x74>
 8000f9a:	4b91      	ldr	r3, [pc, #580]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a90      	ldr	r2, [pc, #576]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e01d      	b.n	8000fe4 <HAL_RCC_OscConfig+0xb0>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x98>
 8000fb2:	4b8b      	ldr	r3, [pc, #556]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a8a      	ldr	r2, [pc, #552]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b88      	ldr	r3, [pc, #544]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a87      	ldr	r2, [pc, #540]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e00b      	b.n	8000fe4 <HAL_RCC_OscConfig+0xb0>
 8000fcc:	4b84      	ldr	r3, [pc, #528]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a83      	ldr	r2, [pc, #524]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b81      	ldr	r3, [pc, #516]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a80      	ldr	r2, [pc, #512]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fcf0 	bl	80009d0 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fcec 	bl	80009d0 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e204      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001006:	4b76      	ldr	r3, [pc, #472]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0xc0>
 8001012:	e014      	b.n	800103e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fcdc 	bl	80009d0 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fcd8 	bl	80009d0 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e1f0      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0xe8>
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d063      	beq.n	8001112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800104a:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00b      	beq.n	800106e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001056:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800105e:	2b08      	cmp	r3, #8
 8001060:	d11c      	bne.n	800109c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001062:	4b5f      	ldr	r3, [pc, #380]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d116      	bne.n	800109c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	4b5c      	ldr	r3, [pc, #368]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <HAL_RCC_OscConfig+0x152>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e1c4      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001086:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4952      	ldr	r1, [pc, #328]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	e03a      	b.n	8001112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d020      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a4:	4b4f      	ldr	r3, [pc, #316]	; (80011e4 <HAL_RCC_OscConfig+0x2b0>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010aa:	f7ff fc91 	bl	80009d0 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff fc8d 	bl	80009d0 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e1a5      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d0:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4940      	ldr	r1, [pc, #256]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
 80010e4:	e015      	b.n	8001112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e6:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <HAL_RCC_OscConfig+0x2b0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc70 	bl	80009d0 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff fc6c 	bl	80009d0 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e184      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b00      	cmp	r3, #0
 800111c:	d030      	beq.n	8001180 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d016      	beq.n	8001154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_RCC_OscConfig+0x2b4>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800112c:	f7ff fc50 	bl	80009d0 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001134:	f7ff fc4c 	bl	80009d0 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e164      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0x200>
 8001152:	e015      	b.n	8001180 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <HAL_RCC_OscConfig+0x2b4>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fc39 	bl	80009d0 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fc35 	bl	80009d0 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e14d      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f0      	bne.n	8001162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80a0 	beq.w	80012ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ba:	2301      	movs	r3, #1
 80011bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_RCC_OscConfig+0x2b8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d121      	bne.n	800120e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_RCC_OscConfig+0x2b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_RCC_OscConfig+0x2b8>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fbfb 	bl	80009d0 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	e011      	b.n	8001202 <HAL_RCC_OscConfig+0x2ce>
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	42470000 	.word	0x42470000
 80011e8:	42470e80 	.word	0x42470e80
 80011ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f0:	f7ff fbee 	bl	80009d0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e106      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	4b85      	ldr	r3, [pc, #532]	; (8001418 <HAL_RCC_OscConfig+0x4e4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d106      	bne.n	8001224 <HAL_RCC_OscConfig+0x2f0>
 8001216:	4b81      	ldr	r3, [pc, #516]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 8001218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121a:	4a80      	ldr	r2, [pc, #512]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6713      	str	r3, [r2, #112]	; 0x70
 8001222:	e01c      	b.n	800125e <HAL_RCC_OscConfig+0x32a>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d10c      	bne.n	8001246 <HAL_RCC_OscConfig+0x312>
 800122c:	4b7b      	ldr	r3, [pc, #492]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 800122e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001230:	4a7a      	ldr	r2, [pc, #488]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6713      	str	r3, [r2, #112]	; 0x70
 8001238:	4b78      	ldr	r3, [pc, #480]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 800123a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123c:	4a77      	ldr	r2, [pc, #476]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6713      	str	r3, [r2, #112]	; 0x70
 8001244:	e00b      	b.n	800125e <HAL_RCC_OscConfig+0x32a>
 8001246:	4b75      	ldr	r3, [pc, #468]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 8001248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124a:	4a74      	ldr	r2, [pc, #464]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	6713      	str	r3, [r2, #112]	; 0x70
 8001252:	4b72      	ldr	r3, [pc, #456]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001256:	4a71      	ldr	r2, [pc, #452]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 8001258:	f023 0304 	bic.w	r3, r3, #4
 800125c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d015      	beq.n	8001292 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001266:	f7ff fbb3 	bl	80009d0 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126c:	e00a      	b.n	8001284 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f7ff fbaf 	bl	80009d0 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f241 3288 	movw	r2, #5000	; 0x1388
 800127c:	4293      	cmp	r3, r2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e0c5      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001284:	4b65      	ldr	r3, [pc, #404]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 8001286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0ee      	beq.n	800126e <HAL_RCC_OscConfig+0x33a>
 8001290:	e014      	b.n	80012bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fb9d 	bl	80009d0 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001298:	e00a      	b.n	80012b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff fb99 	bl	80009d0 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e0af      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ee      	bne.n	800129a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d105      	bne.n	80012ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c2:	4b56      	ldr	r3, [pc, #344]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a55      	ldr	r2, [pc, #340]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 80012c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 809b 	beq.w	800140e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 030c 	and.w	r3, r3, #12
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d05c      	beq.n	800139e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d141      	bne.n	8001370 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ec:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <HAL_RCC_OscConfig+0x4ec>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb6d 	bl	80009d0 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fb69 	bl	80009d0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e081      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130c:	4b43      	ldr	r3, [pc, #268]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f0      	bne.n	80012fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	019b      	lsls	r3, r3, #6
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	085b      	lsrs	r3, r3, #1
 8001330:	3b01      	subs	r3, #1
 8001332:	041b      	lsls	r3, r3, #16
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	061b      	lsls	r3, r3, #24
 800133c:	4937      	ldr	r1, [pc, #220]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001342:	4b37      	ldr	r3, [pc, #220]	; (8001420 <HAL_RCC_OscConfig+0x4ec>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fb42 	bl	80009d0 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff fb3e 	bl	80009d0 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e056      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x41c>
 800136e:	e04e      	b.n	800140e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_RCC_OscConfig+0x4ec>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fb2b 	bl	80009d0 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff fb27 	bl	80009d0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e03f      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x44a>
 800139c:	e037      	b.n	800140e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e032      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_RCC_OscConfig+0x4e8>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d028      	beq.n	800140a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d121      	bne.n	800140a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d11a      	bne.n	800140a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013da:	4013      	ands	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d111      	bne.n	800140a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	085b      	lsrs	r3, r3, #1
 80013f2:	3b01      	subs	r3, #1
 80013f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d107      	bne.n	800140a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40007000 	.word	0x40007000
 800141c:	40023800 	.word	0x40023800
 8001420:	42470060 	.word	0x42470060

08001424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0cc      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d90c      	bls.n	8001460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b65      	ldr	r3, [pc, #404]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b8      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800149a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	494d      	ldr	r1, [pc, #308]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d044      	beq.n	8001544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d119      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d003      	beq.n	80014e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e06f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e067      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f023 0203 	bic.w	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4934      	ldr	r1, [pc, #208]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	4313      	orrs	r3, r2
 8001512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff fa5c 	bl	80009d0 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	e00a      	b.n	8001532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151c:	f7ff fa58 	bl	80009d0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e04f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 020c 	and.w	r2, r3, #12
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	d1eb      	bne.n	800151c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d20c      	bcs.n	800156c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e032      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015aa:	f000 f821 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	490a      	ldr	r1, [pc, #40]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	5ccb      	ldrb	r3, [r1, r3]
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f9bc 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00
 80015e0:	40023800 	.word	0x40023800
 80015e4:	08005864 	.word	0x08005864
 80015e8:	20000004 	.word	0x20000004
 80015ec:	20000008 	.word	0x20000008

080015f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	2300      	movs	r3, #0
 8001602:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001608:	4b67      	ldr	r3, [pc, #412]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b08      	cmp	r3, #8
 8001612:	d00d      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x40>
 8001614:	2b08      	cmp	r3, #8
 8001616:	f200 80bd 	bhi.w	8001794 <HAL_RCC_GetSysClockFreq+0x1a4>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0x34>
 800161e:	2b04      	cmp	r3, #4
 8001620:	d003      	beq.n	800162a <HAL_RCC_GetSysClockFreq+0x3a>
 8001622:	e0b7      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001624:	4b61      	ldr	r3, [pc, #388]	; (80017ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001626:	60bb      	str	r3, [r7, #8]
       break;
 8001628:	e0b7      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800162a:	4b61      	ldr	r3, [pc, #388]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800162c:	60bb      	str	r3, [r7, #8]
      break;
 800162e:	e0b4      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001630:	4b5d      	ldr	r3, [pc, #372]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001638:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800163a:	4b5b      	ldr	r3, [pc, #364]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d04d      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001646:	4b58      	ldr	r3, [pc, #352]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	099b      	lsrs	r3, r3, #6
 800164c:	461a      	mov	r2, r3
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	ea02 0800 	and.w	r8, r2, r0
 800165e:	ea03 0901 	and.w	r9, r3, r1
 8001662:	4640      	mov	r0, r8
 8001664:	4649      	mov	r1, r9
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	014b      	lsls	r3, r1, #5
 8001670:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001674:	0142      	lsls	r2, r0, #5
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	ebb0 0008 	subs.w	r0, r0, r8
 800167e:	eb61 0109 	sbc.w	r1, r1, r9
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	018b      	lsls	r3, r1, #6
 800168c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001690:	0182      	lsls	r2, r0, #6
 8001692:	1a12      	subs	r2, r2, r0
 8001694:	eb63 0301 	sbc.w	r3, r3, r1
 8001698:	f04f 0000 	mov.w	r0, #0
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	00d9      	lsls	r1, r3, #3
 80016a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016a6:	00d0      	lsls	r0, r2, #3
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	eb12 0208 	adds.w	r2, r2, r8
 80016b0:	eb43 0309 	adc.w	r3, r3, r9
 80016b4:	f04f 0000 	mov.w	r0, #0
 80016b8:	f04f 0100 	mov.w	r1, #0
 80016bc:	0259      	lsls	r1, r3, #9
 80016be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016c2:	0250      	lsls	r0, r2, #9
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	f7fe fd78 	bl	80001c8 <__aeabi_uldivmod>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4613      	mov	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e04a      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	099b      	lsrs	r3, r3, #6
 80016e8:	461a      	mov	r2, r3
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016f2:	f04f 0100 	mov.w	r1, #0
 80016f6:	ea02 0400 	and.w	r4, r2, r0
 80016fa:	ea03 0501 	and.w	r5, r3, r1
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	014b      	lsls	r3, r1, #5
 800170c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001710:	0142      	lsls	r2, r0, #5
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	1b00      	subs	r0, r0, r4
 8001718:	eb61 0105 	sbc.w	r1, r1, r5
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	018b      	lsls	r3, r1, #6
 8001726:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800172a:	0182      	lsls	r2, r0, #6
 800172c:	1a12      	subs	r2, r2, r0
 800172e:	eb63 0301 	sbc.w	r3, r3, r1
 8001732:	f04f 0000 	mov.w	r0, #0
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	00d9      	lsls	r1, r3, #3
 800173c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001740:	00d0      	lsls	r0, r2, #3
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	1912      	adds	r2, r2, r4
 8001748:	eb45 0303 	adc.w	r3, r5, r3
 800174c:	f04f 0000 	mov.w	r0, #0
 8001750:	f04f 0100 	mov.w	r1, #0
 8001754:	0299      	lsls	r1, r3, #10
 8001756:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800175a:	0290      	lsls	r0, r2, #10
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	461a      	mov	r2, r3
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	f7fe fd2c 	bl	80001c8 <__aeabi_uldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	3301      	adds	r3, #1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	60bb      	str	r3, [r7, #8]
      break;
 8001792:	e002      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001796:	60bb      	str	r3, [r7, #8]
      break;
 8001798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179a:	68bb      	ldr	r3, [r7, #8]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	00f42400 	.word	0x00f42400
 80017b0:	007a1200 	.word	0x007a1200

080017b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e022      	b.n	800180c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7fe ffc5 	bl	8000768 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f814 	bl	8001814 <HAL_SD_InitCard>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00a      	b.n	800180c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001814:	b5b0      	push	{r4, r5, r7, lr}
 8001816:	b08e      	sub	sp, #56	; 0x38
 8001818:	af04      	add	r7, sp, #16
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001830:	2376      	movs	r3, #118	; 0x76
 8001832:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681d      	ldr	r5, [r3, #0]
 8001838:	466c      	mov	r4, sp
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001842:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184c:	4628      	mov	r0, r5
 800184e:	f000 ff35 	bl	80026bc <SDIO_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e04c      	b.n	80018fe <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_SD_InitCard+0xf4>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 ff6d 	bl	800274e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_SD_InitCard+0xf4>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fe68 	bl	8002550 <SD_PowerON>
 8001880:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e02e      	b.n	80018fe <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fd89 	bl	80023b8 <SD_InitCard>
 80018a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e01b      	b.n	80018fe <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 ffd0 	bl	8002874 <SDMMC_CmdBlockLength>
 80018d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00f      	beq.n	80018fc <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_SD_InitCard+0xf8>)
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bdb0      	pop	{r4, r5, r7, pc}
 8001906:	bf00      	nop
 8001908:	422580a0 	.word	0x422580a0
 800190c:	004005ff 	.word	0x004005ff

08001910 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b092      	sub	sp, #72	; 0x48
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800191e:	f7ff f857 	bl	80009d0 <HAL_GetTick>
 8001922:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d107      	bne.n	8001942 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e1bd      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b01      	cmp	r3, #1
 800194c:	f040 81b0 	bne.w	8001cb0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	441a      	add	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	429a      	cmp	r2, r3
 8001962:	d907      	bls.n	8001974 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e1a4      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2203      	movs	r2, #3
 8001978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	2b01      	cmp	r3, #1
 800198a:	d002      	beq.n	8001992 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800198c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800199e:	2390      	movs	r3, #144	; 0x90
 80019a0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80019a2:	2302      	movs	r3, #2
 80019a4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f107 0214 	add.w	r2, r7, #20
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 ff2f 	bl	800281c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d90a      	bls.n	80019da <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2202      	movs	r2, #2
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 ff93 	bl	80028fc <SDMMC_CmdReadMultiBlock>
 80019d6:	6478      	str	r0, [r7, #68]	; 0x44
 80019d8:	e009      	b.n	80019ee <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 ff66 	bl	80028b8 <SDMMC_CmdReadSingleBlock>
 80019ec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80019ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d012      	beq.n	8001a1a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a7a      	ldr	r2, [pc, #488]	; (8001be4 <HAL_SD_ReadBlocks+0x2d4>)
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a02:	431a      	orrs	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e151      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001a1e:	e061      	b.n	8001ae4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d03c      	beq.n	8001aa8 <HAL_SD_ReadBlocks+0x198>
 8001a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d039      	beq.n	8001aa8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
 8001a38:	e033      	b.n	8001aa2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fe67 	bl	8002712 <SDIO_ReadFIFO>
 8001a44:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a50:	3301      	adds	r3, #1
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a56:	3b01      	subs	r3, #1
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a66:	3301      	adds	r3, #1
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	0c1b      	lsrs	r3, r3, #16
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a82:	3b01      	subs	r3, #1
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	0e1b      	lsrs	r3, r3, #24
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a92:	3301      	adds	r3, #1
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8001aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa4:	2b07      	cmp	r3, #7
 8001aa6:	d9c8      	bls.n	8001a3a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001aa8:	f7fe ff92 	bl	80009d0 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d902      	bls.n	8001abe <HAL_SD_ReadBlocks+0x1ae>
 8001ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d112      	bne.n	8001ae4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <HAL_SD_ReadBlocks+0x2d4>)
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0ec      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aea:	f240 332a 	movw	r3, #810	; 0x32a
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d095      	beq.n	8001a20 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d022      	beq.n	8001b48 <HAL_SD_ReadBlocks+0x238>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d91f      	bls.n	8001b48 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d01b      	beq.n	8001b48 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 ff57 	bl	80029c8 <SDMMC_CmdStopTransfer>
 8001b1a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d012      	beq.n	8001b48 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <HAL_SD_ReadBlocks+0x2d4>)
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0ba      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d012      	beq.n	8001b7c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <HAL_SD_ReadBlocks+0x2d4>)
 8001b5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	f043 0208 	orr.w	r2, r3, #8
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0a0      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d012      	beq.n	8001bb0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_SD_ReadBlocks+0x2d4>)
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b96:	f043 0202 	orr.w	r2, r3, #2
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e086      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <HAL_SD_ReadBlocks+0x2d4>)
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	f043 0220 	orr.w	r2, r3, #32
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e06c      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
 8001be4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fd90 	bl	8002712 <SDIO_ReadFIFO>
 8001bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfe:	3301      	adds	r3, #1
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c04:	3b01      	subs	r3, #1
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c10:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c14:	3301      	adds	r3, #1
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c26:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c30:	3b01      	subs	r3, #1
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c36:	0e1b      	lsrs	r3, r3, #24
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	3301      	adds	r3, #1
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	3b01      	subs	r3, #1
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001c4a:	f7fe fec1 	bl	80009d0 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d902      	bls.n	8001c60 <HAL_SD_ReadBlocks+0x350>
 8001c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d112      	bne.n	8001c86 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_SD_ReadBlocks+0x3b8>)
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e01b      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_SD_ReadBlocks+0x38a>
 8001c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1a6      	bne.n	8001be8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8001ca2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e006      	b.n	8001cbe <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3748      	adds	r7, #72	; 0x48
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	004005ff 	.word	0x004005ff

08001ccc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b092      	sub	sp, #72	; 0x48
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001cda:	f7fe fe79 	bl	80009d0 <HAL_GetTick>
 8001cde:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d107      	bne.n	8001cfe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e166      	b.n	8001fcc <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	f040 8159 	bne.w	8001fbe <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	441a      	add	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d907      	bls.n	8001d30 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e14d      	b.n	8001fcc <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2203      	movs	r2, #3
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d002      	beq.n	8001d4e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4a:	025b      	lsls	r3, r3, #9
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	025b      	lsls	r3, r3, #9
 8001d58:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d5a:	2390      	movs	r3, #144	; 0x90
 8001d5c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f107 0218 	add.w	r2, r7, #24
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fd51 	bl	800281c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d90a      	bls.n	8001d96 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fdf9 	bl	8002984 <SDMMC_CmdWriteMultiBlock>
 8001d92:	6478      	str	r0, [r7, #68]	; 0x44
 8001d94:	e009      	b.n	8001daa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fdcc 	bl	8002940 <SDMMC_CmdWriteSingleBlock>
 8001da8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a87      	ldr	r2, [pc, #540]	; (8001fd4 <HAL_SD_WriteBlocks+0x308>)
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0fa      	b.n	8001fcc <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001dda:	e065      	b.n	8001ea8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d040      	beq.n	8001e6c <HAL_SD_WriteBlocks+0x1a0>
 8001dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d03d      	beq.n	8001e6c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
 8001df4:	e037      	b.n	8001e66 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	3301      	adds	r3, #1
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e04:	3b01      	subs	r3, #1
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	021a      	lsls	r2, r3, #8
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	3301      	adds	r3, #1
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8001e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	041a      	lsls	r2, r3, #16
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	3301      	adds	r3, #1
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e34:	3b01      	subs	r3, #1
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	061a      	lsls	r2, r3, #24
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e46:	3301      	adds	r3, #1
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f107 0214 	add.w	r2, r7, #20
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fc66 	bl	800272c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e62:	3301      	adds	r3, #1
 8001e64:	643b      	str	r3, [r7, #64]	; 0x40
 8001e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e68:	2b07      	cmp	r3, #7
 8001e6a:	d9c4      	bls.n	8001df6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001e6c:	f7fe fdb0 	bl	80009d0 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d902      	bls.n	8001e82 <HAL_SD_WriteBlocks+0x1b6>
 8001e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d112      	bne.n	8001ea8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a53      	ldr	r2, [pc, #332]	; (8001fd4 <HAL_SD_WriteBlocks+0x308>)
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e90:	431a      	orrs	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e091      	b.n	8001fcc <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eae:	f240 331a 	movw	r3, #794	; 0x31a
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d091      	beq.n	8001ddc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d022      	beq.n	8001f0c <HAL_SD_WriteBlocks+0x240>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d91f      	bls.n	8001f0c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d01b      	beq.n	8001f0c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fd75 	bl	80029c8 <SDMMC_CmdStopTransfer>
 8001ede:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d012      	beq.n	8001f0c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <HAL_SD_WriteBlocks+0x308>)
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e05f      	b.n	8001fcc <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d012      	beq.n	8001f40 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <HAL_SD_WriteBlocks+0x308>)
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	f043 0208 	orr.w	r2, r3, #8
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e045      	b.n	8001fcc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d012      	beq.n	8001f74 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <HAL_SD_WriteBlocks+0x308>)
 8001f54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	f043 0202 	orr.w	r2, r3, #2
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e02b      	b.n	8001fcc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <HAL_SD_WriteBlocks+0x308>)
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e011      	b.n	8001fcc <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f240 523a 	movw	r2, #1338	; 0x53a
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e006      	b.n	8001fcc <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
  }
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3748      	adds	r7, #72	; 0x48
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	004005ff 	.word	0x004005ff

08001fd8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe6:	0f9b      	lsrs	r3, r3, #30
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002004:	0e1b      	lsrs	r3, r3, #24
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	b2da      	uxtb	r2, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	b2da      	uxtb	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	b2da      	uxtb	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800202e:	b2da      	uxtb	r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002038:	0d1b      	lsrs	r3, r3, #20
 800203a:	b29a      	uxth	r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	b2da      	uxtb	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002056:	0bdb      	lsrs	r3, r3, #15
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002068:	0b9b      	lsrs	r3, r3, #14
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	b2da      	uxtb	r2, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800207a:	0b5b      	lsrs	r3, r3, #13
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800208c:	0b1b      	lsrs	r3, r3, #12
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	b2da      	uxtb	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2200      	movs	r2, #0
 800209e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d163      	bne.n	8002170 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ac:	009a      	lsls	r2, r3, #2
 80020ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020b2:	4013      	ands	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80020b8:	0f92      	lsrs	r2, r2, #30
 80020ba:	431a      	orrs	r2, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020c4:	0edb      	lsrs	r3, r3, #27
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d6:	0e1b      	lsrs	r3, r3, #24
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e8:	0d5b      	lsrs	r3, r3, #21
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fa:	0c9b      	lsrs	r3, r3, #18
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	b2da      	uxtb	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800210c:	0bdb      	lsrs	r3, r3, #15
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	b2da      	uxtb	r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	7e1b      	ldrb	r3, [r3, #24]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	3302      	adds	r3, #2
 8002130:	2201      	movs	r2, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800213a:	fb02 f203 	mul.w	r2, r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	7a1b      	ldrb	r3, [r3, #8]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	2201      	movs	r2, #1
 800214e:	409a      	lsls	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800215c:	0a52      	lsrs	r2, r2, #9
 800215e:	fb02 f203 	mul.w	r2, r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216c:	661a      	str	r2, [r3, #96]	; 0x60
 800216e:	e031      	b.n	80021d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	2b01      	cmp	r3, #1
 8002176:	d11d      	bne.n	80021b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	431a      	orrs	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	3301      	adds	r3, #1
 8002194:	029a      	lsls	r2, r3, #10
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	661a      	str	r2, [r3, #96]	; 0x60
 80021b2:	e00f      	b.n	80021d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_SD_GetCardCSD+0x344>)
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e09d      	b.n	8002310 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d8:	0b9b      	lsrs	r3, r3, #14
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ea:	09db      	lsrs	r3, r3, #7
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002202:	b2da      	uxtb	r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	0fdb      	lsrs	r3, r3, #31
 800220e:	b2da      	uxtb	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	0f5b      	lsrs	r3, r3, #29
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	b2da      	uxtb	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	b2da      	uxtb	r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	0d9b      	lsrs	r3, r3, #22
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	b2da      	uxtb	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	0d5b      	lsrs	r3, r3, #21
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	0c1b      	lsrs	r3, r3, #16
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	b2da      	uxtb	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	0bdb      	lsrs	r3, r3, #15
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	0b9b      	lsrs	r3, r3, #14
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	b2da      	uxtb	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	0b5b      	lsrs	r3, r3, #13
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	0b1b      	lsrs	r3, r3, #12
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	0a9b      	lsrs	r3, r3, #10
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	004005ff 	.word	0x004005ff

08002320 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	4619      	mov	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f96e 	bl	800266c <SD_SendStatus>
 8002390:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	0a5b      	lsrs	r3, r3, #9
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80023ae:	693b      	ldr	r3, [r7, #16]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80023b8:	b5b0      	push	{r4, r5, r7, lr}
 80023ba:	b094      	sub	sp, #80	; 0x50
 80023bc:	af04      	add	r7, sp, #16
 80023be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80023c0:	2301      	movs	r3, #1
 80023c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f9cf 	bl	800276c <SDIO_GetPowerState>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80023d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023d8:	e0b6      	b.n	8002548 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d02f      	beq.n	8002442 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fbb5 	bl	8002b56 <SDMMC_CmdSendCID>
 80023ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80023ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <SD_InitCard+0x40>
    {
      return errorstate;
 80023f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f6:	e0a7      	b.n	8002548 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f9f9 	bl	80027f6 <SDIO_GetResponse>
 8002404:	4602      	mov	r2, r0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2104      	movs	r1, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f9f0 	bl	80027f6 <SDIO_GetResponse>
 8002416:	4602      	mov	r2, r0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2108      	movs	r1, #8
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f9e7 	bl	80027f6 <SDIO_GetResponse>
 8002428:	4602      	mov	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	210c      	movs	r1, #12
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f9de 	bl	80027f6 <SDIO_GetResponse>
 800243a:	4602      	mov	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	2b03      	cmp	r3, #3
 8002448:	d00d      	beq.n	8002466 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f107 020e 	add.w	r2, r7, #14
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fbbb 	bl	8002bd0 <SDMMC_CmdSetRelAdd>
 800245a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800245c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SD_InitCard+0xae>
    {
      return errorstate;
 8002462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002464:	e070      	b.n	8002548 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	2b03      	cmp	r3, #3
 800246c:	d036      	beq.n	80024dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800246e:	89fb      	ldrh	r3, [r7, #14]
 8002470:	461a      	mov	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247e:	041b      	lsls	r3, r3, #16
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f000 fb85 	bl	8002b92 <SDMMC_CmdSendCSD>
 8002488:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800248a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002492:	e059      	b.n	8002548 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f9ab 	bl	80027f6 <SDIO_GetResponse>
 80024a0:	4602      	mov	r2, r0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2104      	movs	r1, #4
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f9a2 	bl	80027f6 <SDIO_GetResponse>
 80024b2:	4602      	mov	r2, r0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2108      	movs	r1, #8
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f999 	bl	80027f6 <SDIO_GetResponse>
 80024c4:	4602      	mov	r2, r0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	210c      	movs	r1, #12
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f990 	bl	80027f6 <SDIO_GetResponse>
 80024d6:	4602      	mov	r2, r0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2104      	movs	r1, #4
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f987 	bl	80027f6 <SDIO_GetResponse>
 80024e8:	4603      	mov	r3, r0
 80024ea:	0d1a      	lsrs	r2, r3, #20
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff fd6e 	bl	8001fd8 <HAL_SD_GetCardCSD>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002502:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002506:	e01f      	b.n	8002548 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	461a      	mov	r2, r3
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	4608      	mov	r0, r1
 800251a:	f000 fa77 	bl	8002a0c <SDMMC_CmdSelDesel>
 800251e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <SD_InitCard+0x172>
  {
    return errorstate;
 8002526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002528:	e00e      	b.n	8002548 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681d      	ldr	r5, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	466c      	mov	r4, sp
 8002532:	f103 0210 	add.w	r2, r3, #16
 8002536:	ca07      	ldmia	r2, {r0, r1, r2}
 8002538:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800253c:	3304      	adds	r3, #4
 800253e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002540:	4628      	mov	r0, r5
 8002542:	f000 f8bb 	bl	80026bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3740      	adds	r7, #64	; 0x40
 800254c:	46bd      	mov	sp, r7
 800254e:	bdb0      	pop	{r4, r5, r7, pc}

08002550 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fa72 	bl	8002a52 <SDMMC_CmdGoIdleState>
 800256e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <SD_PowerON+0x2a>
  {
    return errorstate;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	e072      	b.n	8002660 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fa85 	bl	8002a8e <SDMMC_CmdOperCond>
 8002584:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00d      	beq.n	80025a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fa5b 	bl	8002a52 <SDMMC_CmdGoIdleState>
 800259c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <SD_PowerON+0x5e>
    {
      return errorstate;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	e05b      	b.n	8002660 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d137      	bne.n	8002626 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fa85 	bl	8002acc <SDMMC_CmdAppCommand>
 80025c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d02d      	beq.n	8002626 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025ce:	e047      	b.n	8002660 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fa78 	bl	8002acc <SDMMC_CmdAppCommand>
 80025dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <SD_PowerON+0x98>
    {
      return errorstate;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	e03b      	b.n	8002660 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	491e      	ldr	r1, [pc, #120]	; (8002668 <SD_PowerON+0x118>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fa8e 	bl	8002b10 <SDMMC_CmdAppOperCommand>
 80025f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002600:	e02e      	b.n	8002660 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f8f4 	bl	80027f6 <SDIO_GetResponse>
 800260e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	0fdb      	lsrs	r3, r3, #31
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <SD_PowerON+0xcc>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <SD_PowerON+0xce>
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]

    count++;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3301      	adds	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800262c:	4293      	cmp	r3, r2
 800262e:	d802      	bhi.n	8002636 <SD_PowerON+0xe6>
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0cc      	beq.n	80025d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800263c:	4293      	cmp	r3, r2
 800263e:	d902      	bls.n	8002646 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	e00c      	b.n	8002660 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
 8002656:	e002      	b.n	800265e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	c1100000 	.word	0xc1100000

0800266c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800267c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002680:	e018      	b.n	80026b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	4619      	mov	r1, r3
 800268e:	4610      	mov	r0, r2
 8002690:	f000 fabf 	bl	8002c12 <SDMMC_CmdSendStatus>
 8002694:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	e009      	b.n	80026b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f8a5 	bl	80027f6 <SDIO_GetResponse>
 80026ac:	4602      	mov	r2, r0
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80026bc:	b084      	sub	sp, #16
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	f107 001c 	add.w	r0, r7, #28
 80026ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80026d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80026d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80026d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80026da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80026de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80026e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80026e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80026f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	b004      	add	sp, #16
 8002710:	4770      	bx	lr

08002712 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2203      	movs	r2, #3
 800275a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800275c:	2002      	movs	r0, #2
 800275e:	f7fe f943 	bl	80009e8 <HAL_Delay>
  
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0303 	and.w	r3, r3, #3
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80027a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80027ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80027b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027c2:	f023 030f 	bic.w	r3, r3, #15
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	b2db      	uxtb	r3, r3
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3314      	adds	r3, #20
 8002804:	461a      	mov	r2, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	4413      	add	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
}  
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002842:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002848:	431a      	orrs	r2, r3
                       Data->DPSM);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800284e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002866:	2300      	movs	r3, #0

}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002882:	2310      	movs	r3, #16
 8002884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800288e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002892:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff74 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	2110      	movs	r1, #16
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fa02 	bl	8002cb0 <SDMMC_GetCmdResp1>
 80028ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80028ae:	69fb      	ldr	r3, [r7, #28]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80028c6:	2311      	movs	r3, #17
 80028c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80028ca:	2340      	movs	r3, #64	; 0x40
 80028cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028d8:	f107 0308 	add.w	r3, r7, #8
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff52 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	2111      	movs	r1, #17
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f9e0 	bl	8002cb0 <SDMMC_GetCmdResp1>
 80028f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80028f2:	69fb      	ldr	r3, [r7, #28]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800290a:	2312      	movs	r3, #18
 800290c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800290e:	2340      	movs	r3, #64	; 0x40
 8002910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ff30 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	2112      	movs	r1, #18
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9be 	bl	8002cb0 <SDMMC_GetCmdResp1>
 8002934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002936:	69fb      	ldr	r3, [r7, #28]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800294e:	2318      	movs	r3, #24
 8002950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002952:	2340      	movs	r3, #64	; 0x40
 8002954:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800295a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002960:	f107 0308 	add.w	r3, r7, #8
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ff0e 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	2118      	movs	r1, #24
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f99c 	bl	8002cb0 <SDMMC_GetCmdResp1>
 8002978:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800297a:	69fb      	ldr	r3, [r7, #28]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002992:	2319      	movs	r3, #25
 8002994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002996:	2340      	movs	r3, #64	; 0x40
 8002998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800299e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029a4:	f107 0308 	add.w	r3, r7, #8
 80029a8:	4619      	mov	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff feec 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	2119      	movs	r1, #25
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f97a 	bl	8002cb0 <SDMMC_GetCmdResp1>
 80029bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029be:	69fb      	ldr	r3, [r7, #28]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80029d4:	230c      	movs	r3, #12
 80029d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029d8:	2340      	movs	r3, #64	; 0x40
 80029da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029e6:	f107 0308 	add.w	r3, r7, #8
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fecb 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80029f2:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <SDMMC_CmdStopTransfer+0x40>)
 80029f4:	210c      	movs	r1, #12
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f95a 	bl	8002cb0 <SDMMC_GetCmdResp1>
 80029fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029fe:	69fb      	ldr	r3, [r7, #28]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	05f5e100 	.word	0x05f5e100

08002a0c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002a1c:	2307      	movs	r3, #7
 8002a1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a20:	2340      	movs	r3, #64	; 0x40
 8002a22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	4619      	mov	r1, r3
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff fea7 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	2107      	movs	r1, #7
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f935 	bl	8002cb0 <SDMMC_GetCmdResp1>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b088      	sub	sp, #32
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff fe86 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f8eb 	bl	8002c58 <SDMMC_GetCmdError>
 8002a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a84:	69fb      	ldr	r3, [r7, #28]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b088      	sub	sp, #32
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002a96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002aa0:	2340      	movs	r3, #64	; 0x40
 8002aa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fe67 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fae2 	bl	8003084 <SDMMC_GetCmdResp7>
 8002ac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002ada:	2337      	movs	r3, #55	; 0x37
 8002adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ade:	2340      	movs	r3, #64	; 0x40
 8002ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fe48 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	2137      	movs	r1, #55	; 0x37
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8d6 	bl	8002cb0 <SDMMC_GetCmdResp1>
 8002b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b06:	69fb      	ldr	r3, [r7, #28]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002b26:	2329      	movs	r3, #41	; 0x29
 8002b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b2a:	2340      	movs	r3, #64	; 0x40
 8002b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b38:	f107 0308 	add.w	r3, r7, #8
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fe22 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f9e9 	bl	8002f1c <SDMMC_GetCmdResp3>
 8002b4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b088      	sub	sp, #32
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002b62:	2302      	movs	r3, #2
 8002b64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002b66:	23c0      	movs	r3, #192	; 0xc0
 8002b68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b74:	f107 0308 	add.w	r3, r7, #8
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fe04 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f983 	bl	8002e8c <SDMMC_GetCmdResp2>
 8002b86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b88:	69fb      	ldr	r3, [r7, #28]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b088      	sub	sp, #32
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002ba0:	2309      	movs	r3, #9
 8002ba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002ba4:	23c0      	movs	r3, #192	; 0xc0
 8002ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff fde5 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f964 	bl	8002e8c <SDMMC_GetCmdResp2>
 8002bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002bde:	2303      	movs	r3, #3
 8002be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002be2:	2340      	movs	r3, #64	; 0x40
 8002be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fdc6 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	2103      	movs	r1, #3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f9c9 	bl	8002f98 <SDMMC_GetCmdResp6>
 8002c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c08:	69fb      	ldr	r3, [r7, #28]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b088      	sub	sp, #32
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002c20:	230d      	movs	r3, #13
 8002c22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c24:	2340      	movs	r3, #64	; 0x40
 8002c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff fda5 	bl	8002788 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	210d      	movs	r1, #13
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f833 	bl	8002cb0 <SDMMC_GetCmdResp1>
 8002c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3720      	adds	r7, #32
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <SDMMC_GetCmdError+0x50>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a11      	ldr	r2, [pc, #68]	; (8002cac <SDMMC_GetCmdError+0x54>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0a5b      	lsrs	r3, r3, #9
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	60fa      	str	r2, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002c80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c84:	e009      	b.n	8002c9a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f1      	beq.n	8002c76 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	22c5      	movs	r2, #197	; 0xc5
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000004 	.word	0x20000004
 8002cac:	10624dd3 	.word	0x10624dd3

08002cb0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002cbe:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <SDMMC_GetCmdResp1+0x1d0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a70      	ldr	r2, [pc, #448]	; (8002e84 <SDMMC_GetCmdResp1+0x1d4>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	0a5a      	lsrs	r2, r3, #9
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	61fa      	str	r2, [r7, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002cdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ce0:	e0c9      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0ef      	beq.n	8002cd2 <SDMMC_GetCmdResp1+0x22>
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ea      	bne.n	8002cd2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002d0e:	2304      	movs	r3, #4
 8002d10:	e0b1      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0a6      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	22c5      	movs	r2, #197	; 0xc5
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff fd54 	bl	80027dc <SDIO_GetCommandResponse>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	7afb      	ldrb	r3, [r7, #11]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d001      	beq.n	8002d42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e099      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002d42:	2100      	movs	r1, #0
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fd56 	bl	80027f6 <SDIO_GetResponse>
 8002d4a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4b4e      	ldr	r3, [pc, #312]	; (8002e88 <SDMMC_GetCmdResp1+0x1d8>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e08d      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	da02      	bge.n	8002d66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d64:	e087      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002d70:	2340      	movs	r3, #64	; 0x40
 8002d72:	e080      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	e079      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d90:	e071      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da0:	e069      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db0:	e061      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dc0:	e059      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd0:	e051      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de0:	e049      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df0:	e041      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8002dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e00:	e039      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e10:	e031      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002e1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e20:	e029      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002e2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e30:	e021      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002e3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e40:	e019      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e50:	e011      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8002e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e60:	e009      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002e6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002e70:	e001      	b.n	8002e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000004 	.word	0x20000004
 8002e84:	10624dd3 	.word	0x10624dd3
 8002e88:	fdffe008 	.word	0xfdffe008

08002e8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e94:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <SDMMC_GetCmdResp2+0x88>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <SDMMC_GetCmdResp2+0x8c>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0a5b      	lsrs	r3, r3, #9
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1e5a      	subs	r2, r3, #1
 8002eae:	60fa      	str	r2, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002eb8:	e026      	b.n	8002f08 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ef      	beq.n	8002eaa <SDMMC_GetCmdResp2+0x1e>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ea      	bne.n	8002eaa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	e00e      	b.n	8002f08 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e003      	b.n	8002f08 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	22c5      	movs	r2, #197	; 0xc5
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	20000004 	.word	0x20000004
 8002f18:	10624dd3 	.word	0x10624dd3

08002f1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <SDMMC_GetCmdResp3+0x74>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <SDMMC_GetCmdResp3+0x78>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a5b      	lsrs	r3, r3, #9
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e5a      	subs	r2, r3, #1
 8002f3e:	60fa      	str	r2, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002f44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f48:	e01b      	b.n	8002f82 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0ef      	beq.n	8002f3a <SDMMC_GetCmdResp3+0x1e>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ea      	bne.n	8002f3a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2204      	movs	r2, #4
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f76:	2304      	movs	r3, #4
 8002f78:	e003      	b.n	8002f82 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	22c5      	movs	r2, #197	; 0xc5
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000004 	.word	0x20000004
 8002f94:	10624dd3 	.word	0x10624dd3

08002f98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002fa6:	4b35      	ldr	r3, [pc, #212]	; (800307c <SDMMC_GetCmdResp6+0xe4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a35      	ldr	r2, [pc, #212]	; (8003080 <SDMMC_GetCmdResp6+0xe8>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	0a5b      	lsrs	r3, r3, #9
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	1e5a      	subs	r2, r3, #1
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002fc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002fca:	e052      	b.n	8003072 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ef      	beq.n	8002fbc <SDMMC_GetCmdResp6+0x24>
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ea      	bne.n	8002fbc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	e03a      	b.n	8003072 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800300e:	2301      	movs	r3, #1
 8003010:	e02f      	b.n	8003072 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff fbe2 	bl	80027dc <SDIO_GetCommandResponse>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	4293      	cmp	r3, r2
 8003020:	d001      	beq.n	8003026 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003022:	2301      	movs	r3, #1
 8003024:	e025      	b.n	8003072 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	22c5      	movs	r2, #197	; 0xc5
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800302c:	2100      	movs	r1, #0
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff fbe1 	bl	80027f6 <SDIO_GetResponse>
 8003034:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	b29a      	uxth	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800304a:	2300      	movs	r3, #0
 800304c:	e011      	b.n	8003072 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800305c:	e009      	b.n	8003072 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306c:	e001      	b.n	8003072 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800306e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000004 	.word	0x20000004
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <SDMMC_GetCmdResp7+0x94>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a22      	ldr	r2, [pc, #136]	; (800311c <SDMMC_GetCmdResp7+0x98>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0a5b      	lsrs	r3, r3, #9
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	fb02 f303 	mul.w	r3, r2, r3
 80030a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1e5a      	subs	r2, r3, #1
 80030a6:	60fa      	str	r2, [r7, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80030ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030b0:	e02c      	b.n	800310c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ef      	beq.n	80030a2 <SDMMC_GetCmdResp7+0x1e>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ea      	bne.n	80030a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2204      	movs	r2, #4
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80030de:	2304      	movs	r3, #4
 80030e0:	e014      	b.n	800310c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e009      	b.n	800310c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2240      	movs	r2, #64	; 0x40
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800310a:	2300      	movs	r3, #0
  
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	20000004 	.word	0x20000004
 800311c:	10624dd3 	.word	0x10624dd3

08003120 <FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void FATFS_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003124:	4904      	ldr	r1, [pc, #16]	; (8003138 <FATFS_Init+0x18>)
 8003126:	4805      	ldr	r0, [pc, #20]	; (800313c <FATFS_Init+0x1c>)
 8003128:	f002 fb24 	bl	8005774 <FATFS_LinkDriver>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <FATFS_Init+0x20>)
 8003132:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000554 	.word	0x20000554
 800313c:	08005874 	.word	0x08005874
 8003140:	20000550 	.word	0x20000550

08003144 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003148:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800315e:	f000 f86b 	bl	8003238 <BSP_SD_IsDetected>
 8003162:	4603      	mov	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d001      	beq.n	800316c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e005      	b.n	8003178 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800316c:	4804      	ldr	r0, [pc, #16]	; (8003180 <BSP_SD_Init+0x2c>)
 800316e:	f7fe fb21 	bl	80017b4 <HAL_SD_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8003176:	79fb      	ldrb	r3, [r7, #7]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200004c0 	.word	0x200004c0

08003184 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	68f9      	ldr	r1, [r7, #12]
 80031a0:	4806      	ldr	r0, [pc, #24]	; (80031bc <BSP_SD_ReadBlocks+0x38>)
 80031a2:	f7fe fbb5 	bl	8001910 <HAL_SD_ReadBlocks>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200004c0 	.word	0x200004c0

080031c0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	4806      	ldr	r0, [pc, #24]	; (80031f8 <BSP_SD_WriteBlocks+0x38>)
 80031de:	f7fe fd75 	bl	8001ccc <HAL_SD_WriteBlocks>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200004c0 	.word	0x200004c0

080031fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003200:	4805      	ldr	r0, [pc, #20]	; (8003218 <BSP_SD_GetCardState+0x1c>)
 8003202:	f7ff f8b9 	bl	8002378 <HAL_SD_GetCardState>
 8003206:	4603      	mov	r3, r0
 8003208:	2b04      	cmp	r3, #4
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
}
 8003212:	4618      	mov	r0, r3
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	200004c0 	.word	0x200004c0

0800321c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4803      	ldr	r0, [pc, #12]	; (8003234 <BSP_SD_GetCardInfo+0x18>)
 8003228:	f7ff f87a 	bl	8002320 <HAL_SD_GetCardInfo>
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200004c0 	.word	0x200004c0

08003238 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800323e:	2301      	movs	r3, #1
 8003240:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	b2db      	uxtb	r3, r3
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <SD_CheckStatus+0x38>)
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003264:	f7ff ffca 	bl	80031fc <BSP_SD_GetCardState>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d107      	bne.n	800327e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <SD_CheckStatus+0x38>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <SD_CheckStatus+0x38>)
 800327c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800327e:	4b03      	ldr	r3, [pc, #12]	; (800328c <SD_CheckStatus+0x38>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	2000000d 	.word	0x2000000d

08003290 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <SD_initialize+0x38>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80032a0:	f7ff ff58 	bl	8003154 <BSP_SD_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d107      	bne.n	80032ba <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ffd1 	bl	8003254 <SD_CheckStatus>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <SD_initialize+0x38>)
 80032b8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80032ba:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <SD_initialize+0x38>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	b2db      	uxtb	r3, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	2000000d 	.word	0x2000000d

080032cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ffbb 	bl	8003254 <SD_CheckStatus>
 80032de:	4603      	mov	r3, r0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	4603      	mov	r3, r0
 80032f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	68b8      	ldr	r0, [r7, #8]
 8003306:	f7ff ff3d 	bl	8003184 <BSP_SD_ReadBlocks>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003310:	bf00      	nop
 8003312:	f7ff ff73 	bl	80031fc <BSP_SD_GetCardState>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1fa      	bne.n	8003312 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	68b8      	ldr	r0, [r7, #8]
 8003348:	f7ff ff3a 	bl	80031c0 <BSP_SD_WriteBlocks>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003352:	bf00      	nop
 8003354:	f7ff ff52 	bl	80031fc <BSP_SD_GetCardState>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1fa      	bne.n	8003354 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003362:	7dfb      	ldrb	r3, [r7, #23]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	; 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	603a      	str	r2, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
 8003378:	460b      	mov	r3, r1
 800337a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003382:	4b25      	ldr	r3, [pc, #148]	; (8003418 <SD_ioctl+0xac>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <SD_ioctl+0x28>
 8003390:	2303      	movs	r3, #3
 8003392:	e03c      	b.n	800340e <SD_ioctl+0xa2>

  switch (cmd)
 8003394:	79bb      	ldrb	r3, [r7, #6]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d834      	bhi.n	8003404 <SD_ioctl+0x98>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <SD_ioctl+0x34>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033b9 	.word	0x080033b9
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033eb 	.word	0x080033eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80033b6:	e028      	b.n	800340a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff2d 	bl	800321c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80033ce:	e01c      	b.n	800340a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff21 	bl	800321c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	b29a      	uxth	r2, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80033e8:	e00f      	b.n	800340a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff14 	bl	800321c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	0a5a      	lsrs	r2, r3, #9
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003402:	e002      	b.n	800340a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003404:	2304      	movs	r3, #4
 8003406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800340a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800340e:	4618      	mov	r0, r3
 8003410:	3730      	adds	r7, #48	; 0x30
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	2000000d 	.word	0x2000000d

0800341c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	4a08      	ldr	r2, [pc, #32]	; (800344c <disk_status+0x30>)
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	79fa      	ldrb	r2, [r7, #7]
 8003434:	4905      	ldr	r1, [pc, #20]	; (800344c <disk_status+0x30>)
 8003436:	440a      	add	r2, r1
 8003438:	7a12      	ldrb	r2, [r2, #8]
 800343a:	4610      	mov	r0, r2
 800343c:	4798      	blx	r3
 800343e:	4603      	mov	r3, r0
 8003440:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000054 	.word	0x20000054

08003450 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <disk_initialize+0x48>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d111      	bne.n	800348c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <disk_initialize+0x48>)
 800346c:	2101      	movs	r1, #1
 800346e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <disk_initialize+0x48>)
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	79fa      	ldrb	r2, [r7, #7]
 800347e:	4906      	ldr	r1, [pc, #24]	; (8003498 <disk_initialize+0x48>)
 8003480:	440a      	add	r2, r1
 8003482:	7a12      	ldrb	r2, [r2, #8]
 8003484:	4610      	mov	r0, r2
 8003486:	4798      	blx	r3
 8003488:	4603      	mov	r3, r0
 800348a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000054 	.word	0x20000054

0800349c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4603      	mov	r3, r0
 80034aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <disk_read+0x3c>)
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	689c      	ldr	r4, [r3, #8]
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <disk_read+0x3c>)
 80034bc:	4413      	add	r3, r2
 80034be:	7a18      	ldrb	r0, [r3, #8]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	47a0      	blx	r4
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd90      	pop	{r4, r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000054 	.word	0x20000054

080034dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <disk_write+0x3c>)
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	68dc      	ldr	r4, [r3, #12]
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	4a07      	ldr	r2, [pc, #28]	; (8003518 <disk_write+0x3c>)
 80034fc:	4413      	add	r3, r2
 80034fe:	7a18      	ldrb	r0, [r3, #8]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	47a0      	blx	r4
 8003508:	4603      	mov	r3, r0
 800350a:	75fb      	strb	r3, [r7, #23]
  return res;
 800350c:	7dfb      	ldrb	r3, [r7, #23]
}
 800350e:	4618      	mov	r0, r3
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}
 8003516:	bf00      	nop
 8003518:	20000054 	.word	0x20000054

0800351c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	603a      	str	r2, [r7, #0]
 8003526:	71fb      	strb	r3, [r7, #7]
 8003528:	460b      	mov	r3, r1
 800352a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <disk_ioctl+0x38>)
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	79fa      	ldrb	r2, [r7, #7]
 800353a:	4906      	ldr	r1, [pc, #24]	; (8003554 <disk_ioctl+0x38>)
 800353c:	440a      	add	r2, r1
 800353e:	7a10      	ldrb	r0, [r2, #8]
 8003540:	79b9      	ldrb	r1, [r7, #6]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	4798      	blx	r3
 8003546:	4603      	mov	r3, r0
 8003548:	73fb      	strb	r3, [r7, #15]
  return res;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000054 	.word	0x20000054

08003558 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3301      	adds	r3, #1
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003568:	89fb      	ldrh	r3, [r7, #14]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	b21a      	sxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b21b      	sxth	r3, r3
 8003574:	4313      	orrs	r3, r2
 8003576:	b21b      	sxth	r3, r3
 8003578:	81fb      	strh	r3, [r7, #14]
	return rv;
 800357a:	89fb      	ldrh	r3, [r7, #14]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3303      	adds	r3, #3
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	3202      	adds	r2, #2
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	3201      	adds	r2, #1
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
	return rv;
 80035c0:	68fb      	ldr	r3, [r7, #12]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	887a      	ldrh	r2, [r7, #2]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	1c53      	adds	r3, r2, #1
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1c59      	adds	r1, r3, #1
 8003680:	6179      	str	r1, [r7, #20]
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3b01      	subs	r3, #1
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f1      	bne.n	8003676 <mem_cpy+0x1a>
	}
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800369e:	b480      	push	{r7}
 80036a0:	b087      	sub	sp, #28
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	617a      	str	r2, [r7, #20]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3b01      	subs	r3, #1
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f3      	bne.n	80036ae <mem_set+0x10>
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	61fa      	str	r2, [r7, #28]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	61ba      	str	r2, [r7, #24]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	1acb      	subs	r3, r1, r3
 8003700:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3b01      	subs	r3, #1
 8003706:	607b      	str	r3, [r7, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <mem_cmp+0x40>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0eb      	beq.n	80036ec <mem_cmp+0x18>

	return r;
 8003714:	697b      	ldr	r3, [r7, #20]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3724      	adds	r7, #36	; 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800372c:	e002      	b.n	8003734 <chk_chr+0x12>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3301      	adds	r3, #1
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <chk_chr+0x26>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	4293      	cmp	r3, r2
 8003746:	d1f2      	bne.n	800372e <chk_chr+0xc>
	return *str;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	781b      	ldrb	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e029      	b.n	80037c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <chk_lock+0xb4>)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4413      	add	r3, r2
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01d      	beq.n	80037b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800377a:	4a24      	ldr	r2, [pc, #144]	; (800380c <chk_lock+0xb4>)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	4413      	add	r3, r2
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d116      	bne.n	80037ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800378c:	4a1f      	ldr	r2, [pc, #124]	; (800380c <chk_lock+0xb4>)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800379c:	429a      	cmp	r2, r3
 800379e:	d10c      	bne.n	80037ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80037a0:	4a1a      	ldr	r2, [pc, #104]	; (800380c <chk_lock+0xb4>)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	4413      	add	r3, r2
 80037a8:	3308      	adds	r3, #8
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d102      	bne.n	80037ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80037b4:	e007      	b.n	80037c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3301      	adds	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d9d2      	bls.n	800376c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d109      	bne.n	80037e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <chk_lock+0x80>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d101      	bne.n	80037dc <chk_lock+0x84>
 80037d8:	2300      	movs	r3, #0
 80037da:	e010      	b.n	80037fe <chk_lock+0xa6>
 80037dc:	2312      	movs	r3, #18
 80037de:	e00e      	b.n	80037fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d108      	bne.n	80037f8 <chk_lock+0xa0>
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <chk_lock+0xb4>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	330c      	adds	r3, #12
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f6:	d101      	bne.n	80037fc <chk_lock+0xa4>
 80037f8:	2310      	movs	r3, #16
 80037fa:	e000      	b.n	80037fe <chk_lock+0xa6>
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000034 	.word	0x20000034

08003810 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	e002      	b.n	8003822 <enq_lock+0x12>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3301      	adds	r3, #1
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d806      	bhi.n	8003836 <enq_lock+0x26>
 8003828:	4a09      	ldr	r2, [pc, #36]	; (8003850 <enq_lock+0x40>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	4413      	add	r3, r2
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f2      	bne.n	800381c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b02      	cmp	r3, #2
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000034 	.word	0x20000034

08003854 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e01f      	b.n	80038a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003864:	4a41      	ldr	r2, [pc, #260]	; (800396c <inc_lock+0x118>)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	4413      	add	r3, r2
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d113      	bne.n	800389e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003876:	4a3d      	ldr	r2, [pc, #244]	; (800396c <inc_lock+0x118>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003886:	429a      	cmp	r2, r3
 8003888:	d109      	bne.n	800389e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800388a:	4a38      	ldr	r2, [pc, #224]	; (800396c <inc_lock+0x118>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	3308      	adds	r3, #8
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800389a:	429a      	cmp	r2, r3
 800389c:	d006      	beq.n	80038ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d9dc      	bls.n	8003864 <inc_lock+0x10>
 80038aa:	e000      	b.n	80038ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80038ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d132      	bne.n	800391a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e002      	b.n	80038c0 <inc_lock+0x6c>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3301      	adds	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d806      	bhi.n	80038d4 <inc_lock+0x80>
 80038c6:	4a29      	ldr	r2, [pc, #164]	; (800396c <inc_lock+0x118>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	4413      	add	r3, r2
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f2      	bne.n	80038ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d101      	bne.n	80038de <inc_lock+0x8a>
 80038da:	2300      	movs	r3, #0
 80038dc:	e040      	b.n	8003960 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4922      	ldr	r1, [pc, #136]	; (800396c <inc_lock+0x118>)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	440b      	add	r3, r1
 80038ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	491e      	ldr	r1, [pc, #120]	; (800396c <inc_lock+0x118>)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	440b      	add	r3, r1
 80038f8:	3304      	adds	r3, #4
 80038fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	491a      	ldr	r1, [pc, #104]	; (800396c <inc_lock+0x118>)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	440b      	add	r3, r1
 8003908:	3308      	adds	r3, #8
 800390a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <inc_lock+0x118>)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	4413      	add	r3, r2
 8003914:	330c      	adds	r3, #12
 8003916:	2200      	movs	r2, #0
 8003918:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <inc_lock+0xe0>
 8003920:	4a12      	ldr	r2, [pc, #72]	; (800396c <inc_lock+0x118>)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	4413      	add	r3, r2
 8003928:	330c      	adds	r3, #12
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <inc_lock+0xe0>
 8003930:	2300      	movs	r3, #0
 8003932:	e015      	b.n	8003960 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d108      	bne.n	800394c <inc_lock+0xf8>
 800393a:	4a0c      	ldr	r2, [pc, #48]	; (800396c <inc_lock+0x118>)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	4413      	add	r3, r2
 8003942:	330c      	adds	r3, #12
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	3301      	adds	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	e001      	b.n	8003950 <inc_lock+0xfc>
 800394c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003950:	4906      	ldr	r1, [pc, #24]	; (800396c <inc_lock+0x118>)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	440b      	add	r3, r1
 8003958:	330c      	adds	r3, #12
 800395a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3301      	adds	r3, #1
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	20000034 	.word	0x20000034

08003970 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d825      	bhi.n	80039d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8003984:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <dec_lock+0x74>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4413      	add	r3, r2
 800398c:	330c      	adds	r3, #12
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003992:	89fb      	ldrh	r3, [r7, #14]
 8003994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003998:	d101      	bne.n	800399e <dec_lock+0x2e>
 800399a:	2300      	movs	r3, #0
 800399c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800399e:	89fb      	ldrh	r3, [r7, #14]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <dec_lock+0x3a>
 80039a4:	89fb      	ldrh	r3, [r7, #14]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <dec_lock+0x74>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	4413      	add	r3, r2
 80039b2:	330c      	adds	r3, #12
 80039b4:	89fa      	ldrh	r2, [r7, #14]
 80039b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80039b8:	89fb      	ldrh	r3, [r7, #14]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <dec_lock+0x5a>
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <dec_lock+0x74>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	4413      	add	r3, r2
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	737b      	strb	r3, [r7, #13]
 80039ce:	e001      	b.n	80039d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80039d0:	2302      	movs	r3, #2
 80039d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80039d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000034 	.word	0x20000034

080039e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	e010      	b.n	8003a18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80039f6:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <clear_lock+0x44>)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d105      	bne.n	8003a12 <clear_lock+0x2a>
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <clear_lock+0x44>)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	4413      	add	r3, r2
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d9eb      	bls.n	80039f6 <clear_lock+0xe>
	}
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	20000034 	.word	0x20000034

08003a30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	78db      	ldrb	r3, [r3, #3]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d034      	beq.n	8003aae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7858      	ldrb	r0, [r3, #1]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003a54:	2301      	movs	r3, #1
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	f7ff fd40 	bl	80034dc <disk_write>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e022      	b.n	8003aae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	1ad2      	subs	r2, r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d217      	bcs.n	8003aae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	789b      	ldrb	r3, [r3, #2]
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	e010      	b.n	8003aa8 <sync_window+0x78>
					wsect += fs->fsize;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	7858      	ldrb	r0, [r3, #1]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	f7ff fd1d 	bl	80034dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d8eb      	bhi.n	8003a86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d01b      	beq.n	8003b08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ffad 	bl	8003a30 <sync_window>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d113      	bne.n	8003b08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7858      	ldrb	r0, [r3, #1]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003aea:	2301      	movs	r3, #1
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	f7ff fcd5 	bl	800349c <disk_read>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003af8:	f04f 33ff 	mov.w	r3, #4294967295
 8003afc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff87 	bl	8003a30 <sync_window>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d158      	bne.n	8003bde <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d148      	bne.n	8003bc6 <sync_fs+0xb2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	791b      	ldrb	r3, [r3, #4]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d144      	bne.n	8003bc6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3330      	adds	r3, #48	; 0x30
 8003b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fda9 	bl	800369e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3330      	adds	r3, #48	; 0x30
 8003b50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003b54:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fd38 	bl	80035ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3330      	adds	r3, #48	; 0x30
 8003b62:	4921      	ldr	r1, [pc, #132]	; (8003be8 <sync_fs+0xd4>)
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fd4d 	bl	8003604 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3330      	adds	r3, #48	; 0x30
 8003b6e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003b72:	491e      	ldr	r1, [pc, #120]	; (8003bec <sync_fs+0xd8>)
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fd45 	bl	8003604 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3330      	adds	r3, #48	; 0x30
 8003b7e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f7ff fd3b 	bl	8003604 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3330      	adds	r3, #48	; 0x30
 8003b92:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7ff fd31 	bl	8003604 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7858      	ldrb	r0, [r3, #1]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f7ff fc8e 	bl	80034dc <disk_write>
			fs->fsi_flag = 0;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fca4 	bl	800351c <disk_ioctl>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <sync_fs+0xca>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	41615252 	.word	0x41615252
 8003bec:	61417272 	.word	0x61417272

08003bf0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	3b02      	subs	r3, #2
 8003bfe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	3b02      	subs	r3, #2
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d301      	bcc.n	8003c10 <clust2sect+0x20>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e008      	b.n	8003c22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	895b      	ldrh	r3, [r3, #10]
 8003c14:	461a      	mov	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	fb03 f202 	mul.w	r2, r3, r2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	4413      	add	r3, r2
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d904      	bls.n	8003c4e <get_fat+0x20>
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003c4e:	2301      	movs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e08f      	b.n	8003d74 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d062      	beq.n	8003d28 <get_fat+0xfa>
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	dc7c      	bgt.n	8003d60 <get_fat+0x132>
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d002      	beq.n	8003c70 <get_fat+0x42>
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d042      	beq.n	8003cf4 <get_fat+0xc6>
 8003c6e:	e077      	b.n	8003d60 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	0a5b      	lsrs	r3, r3, #9
 8003c86:	4413      	add	r3, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	6938      	ldr	r0, [r7, #16]
 8003c8c:	f7ff ff14 	bl	8003ab8 <move_window>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d167      	bne.n	8003d66 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	60fa      	str	r2, [r7, #12]
 8003c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ca8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6a1a      	ldr	r2, [r3, #32]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	0a5b      	lsrs	r3, r3, #9
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6938      	ldr	r0, [r7, #16]
 8003cb8:	f7ff fefe 	bl	8003ab8 <move_window>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d153      	bne.n	8003d6a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <get_fat+0xbc>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	e002      	b.n	8003cf0 <get_fat+0xc2>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	617b      	str	r3, [r7, #20]
			break;
 8003cf2:	e03f      	b.n	8003d74 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6938      	ldr	r0, [r7, #16]
 8003d02:	f7ff fed9 	bl	8003ab8 <move_window>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d130      	bne.n	8003d6e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fc1b 	bl	8003558 <ld_word>
 8003d22:	4603      	mov	r3, r0
 8003d24:	617b      	str	r3, [r7, #20]
			break;
 8003d26:	e025      	b.n	8003d74 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	09db      	lsrs	r3, r3, #7
 8003d30:	4413      	add	r3, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	6938      	ldr	r0, [r7, #16]
 8003d36:	f7ff febf 	bl	8003ab8 <move_window>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d118      	bne.n	8003d72 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003d4e:	4413      	add	r3, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fc19 	bl	8003588 <ld_dword>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d5c:	617b      	str	r3, [r7, #20]
			break;
 8003d5e:	e009      	b.n	8003d74 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e006      	b.n	8003d74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d66:	bf00      	nop
 8003d68:	e004      	b.n	8003d74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d72:	bf00      	nop
		}
	}

	return val;
 8003d74:	697b      	ldr	r3, [r7, #20]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003d7e:	b590      	push	{r4, r7, lr}
 8003d80:	b089      	sub	sp, #36	; 0x24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	f240 80d2 	bls.w	8003f3a <put_fat+0x1bc>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	f080 80cc 	bcs.w	8003f3a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	f000 8096 	beq.w	8003ed8 <put_fat+0x15a>
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	f300 80cd 	bgt.w	8003f4c <put_fat+0x1ce>
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d002      	beq.n	8003dbc <put_fat+0x3e>
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d06e      	beq.n	8003e98 <put_fat+0x11a>
 8003dba:	e0c7      	b.n	8003f4c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1a      	ldr	r2, [r3, #32]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	0a5b      	lsrs	r3, r3, #9
 8003dd2:	4413      	add	r3, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff fe6e 	bl	8003ab8 <move_window>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003de0:	7ffb      	ldrb	r3, [r7, #31]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 80ab 	bne.w	8003f3e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1c59      	adds	r1, r3, #1
 8003df2:	61b9      	str	r1, [r7, #24]
 8003df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df8:	4413      	add	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <put_fat+0xa4>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	b25a      	sxtb	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	e001      	b.n	8003e26 <put_fat+0xa8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1a      	ldr	r2, [r3, #32]
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	0a5b      	lsrs	r3, r3, #9
 8003e38:	4413      	add	r3, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7ff fe3b 	bl	8003ab8 <move_window>
 8003e42:	4603      	mov	r3, r0
 8003e44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e46:	7ffb      	ldrb	r3, [r7, #31]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d17a      	bne.n	8003f42 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e58:	4413      	add	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <put_fat+0xf0>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	e00e      	b.n	8003e8c <put_fat+0x10e>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	f023 030f 	bic.w	r3, r3, #15
 8003e78:	b25a      	sxtb	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	70da      	strb	r2, [r3, #3]
			break;
 8003e96:	e059      	b.n	8003f4c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	4413      	add	r3, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff fe07 	bl	8003ab8 <move_window>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003eae:	7ffb      	ldrb	r3, [r7, #31]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d148      	bne.n	8003f46 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003ec2:	4413      	add	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fb7f 	bl	80035ce <st_word>
			fs->wflag = 1;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	70da      	strb	r2, [r3, #3]
			break;
 8003ed6:	e039      	b.n	8003f4c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1a      	ldr	r2, [r3, #32]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	09db      	lsrs	r3, r3, #7
 8003ee0:	4413      	add	r3, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fde7 	bl	8003ab8 <move_window>
 8003eea:	4603      	mov	r3, r0
 8003eec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003eee:	7ffb      	ldrb	r3, [r7, #31]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d12a      	bne.n	8003f4a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003f08:	4413      	add	r3, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fb3c 	bl	8003588 <ld_dword>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f16:	4323      	orrs	r3, r4
 8003f18:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003f28:	4413      	add	r3, r2
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fb69 	bl	8003604 <st_dword>
			fs->wflag = 1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	70da      	strb	r2, [r3, #3]
			break;
 8003f38:	e008      	b.n	8003f4c <put_fat+0x1ce>
		}
	}
 8003f3a:	bf00      	nop
 8003f3c:	e006      	b.n	8003f4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003f3e:	bf00      	nop
 8003f40:	e004      	b.n	8003f4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003f42:	bf00      	nop
 8003f44:	e002      	b.n	8003f4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003f4a:	bf00      	nop
	return res;
 8003f4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3724      	adds	r7, #36	; 0x24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd90      	pop	{r4, r7, pc}

08003f56 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b088      	sub	sp, #32
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d904      	bls.n	8003f7c <remove_chain+0x26>
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d301      	bcc.n	8003f80 <remove_chain+0x2a>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e04b      	b.n	8004018 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00c      	beq.n	8003fa0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	69b8      	ldr	r0, [r7, #24]
 8003f8e:	f7ff fef6 	bl	8003d7e <put_fat>
 8003f92:	4603      	mov	r3, r0
 8003f94:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003f96:	7ffb      	ldrb	r3, [r7, #31]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <remove_chain+0x4a>
 8003f9c:	7ffb      	ldrb	r3, [r7, #31]
 8003f9e:	e03b      	b.n	8004018 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff fe43 	bl	8003c2e <get_fat>
 8003fa8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d031      	beq.n	8004014 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <remove_chain+0x64>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e02e      	b.n	8004018 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d101      	bne.n	8003fc6 <remove_chain+0x70>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e028      	b.n	8004018 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	69b8      	ldr	r0, [r7, #24]
 8003fcc:	f7ff fed7 	bl	8003d7e <put_fat>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003fd4:	7ffb      	ldrb	r3, [r7, #31]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <remove_chain+0x88>
 8003fda:	7ffb      	ldrb	r3, [r7, #31]
 8003fdc:	e01c      	b.n	8004018 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	3b02      	subs	r3, #2
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d20b      	bcs.n	8004004 <remove_chain+0xae>
			fs->free_clst++;
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	791b      	ldrb	r3, [r3, #4]
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	d3c6      	bcc.n	8003fa0 <remove_chain+0x4a>
 8004012:	e000      	b.n	8004016 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004014:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10d      	bne.n	8004052 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <create_chain+0x2c>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	429a      	cmp	r2, r3
 800404a:	d31b      	bcc.n	8004084 <create_chain+0x64>
 800404c:	2301      	movs	r3, #1
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e018      	b.n	8004084 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fdea 	bl	8003c2e <get_fat>
 800405a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d801      	bhi.n	8004066 <create_chain+0x46>
 8004062:	2301      	movs	r3, #1
 8004064:	e070      	b.n	8004148 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d101      	bne.n	8004072 <create_chain+0x52>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	e06a      	b.n	8004148 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	429a      	cmp	r2, r3
 800407a:	d201      	bcs.n	8004080 <create_chain+0x60>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	e063      	b.n	8004148 <create_chain+0x128>
		scl = clst;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	3301      	adds	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	429a      	cmp	r2, r3
 8004096:	d307      	bcc.n	80040a8 <create_chain+0x88>
				ncl = 2;
 8004098:	2302      	movs	r3, #2
 800409a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d901      	bls.n	80040a8 <create_chain+0x88>
 80040a4:	2300      	movs	r3, #0
 80040a6:	e04f      	b.n	8004148 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fdbf 	bl	8003c2e <get_fat>
 80040b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00e      	beq.n	80040d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d003      	beq.n	80040c6 <create_chain+0xa6>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d101      	bne.n	80040ca <create_chain+0xaa>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	e03e      	b.n	8004148 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d1da      	bne.n	8004088 <create_chain+0x68>
 80040d2:	2300      	movs	r3, #0
 80040d4:	e038      	b.n	8004148 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80040d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295
 80040dc:	69f9      	ldr	r1, [r7, #28]
 80040de:	6938      	ldr	r0, [r7, #16]
 80040e0:	f7ff fe4d 	bl	8003d7e <put_fat>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <create_chain+0xe2>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d006      	beq.n	8004102 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	6839      	ldr	r1, [r7, #0]
 80040f8:	6938      	ldr	r0, [r7, #16]
 80040fa:	f7ff fe40 	bl	8003d7e <put_fat>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d116      	bne.n	8004136 <create_chain+0x116>
		fs->last_clst = ncl;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	3b02      	subs	r3, #2
 8004118:	429a      	cmp	r2, r3
 800411a:	d804      	bhi.n	8004126 <create_chain+0x106>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	1e5a      	subs	r2, r3, #1
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	791b      	ldrb	r3, [r3, #4]
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	711a      	strb	r2, [r3, #4]
 8004134:	e007      	b.n	8004146 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d102      	bne.n	8004142 <create_chain+0x122>
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	e000      	b.n	8004144 <create_chain+0x124>
 8004142:	2301      	movs	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004146:	69fb      	ldr	r3, [r7, #28]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	3304      	adds	r3, #4
 8004166:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	0a5b      	lsrs	r3, r3, #9
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	8952      	ldrh	r2, [r2, #10]
 8004170:	fbb3 f3f2 	udiv	r3, r3, r2
 8004174:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1d1a      	adds	r2, r3, #4
 800417a:	613a      	str	r2, [r7, #16]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <clmt_clust+0x3a>
 8004186:	2300      	movs	r3, #0
 8004188:	e010      	b.n	80041ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	429a      	cmp	r2, r3
 8004190:	d307      	bcc.n	80041a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3304      	adds	r3, #4
 800419e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80041a0:	e7e9      	b.n	8004176 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80041a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4413      	add	r3, r2
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ce:	d204      	bcs.n	80041da <dir_sdi+0x22>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <dir_sdi+0x26>
		return FR_INT_ERR;
 80041da:	2302      	movs	r3, #2
 80041dc:	e063      	b.n	80042a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <dir_sdi+0x46>
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d902      	bls.n	80041fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10c      	bne.n	800421e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	8912      	ldrh	r2, [r2, #8]
 800420c:	4293      	cmp	r3, r2
 800420e:	d301      	bcc.n	8004214 <dir_sdi+0x5c>
 8004210:	2302      	movs	r3, #2
 8004212:	e048      	b.n	80042a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	61da      	str	r2, [r3, #28]
 800421c:	e029      	b.n	8004272 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	895b      	ldrh	r3, [r3, #10]
 8004222:	025b      	lsls	r3, r3, #9
 8004224:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004226:	e019      	b.n	800425c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6979      	ldr	r1, [r7, #20]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fcfe 	bl	8003c2e <get_fat>
 8004232:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d101      	bne.n	8004240 <dir_sdi+0x88>
 800423c:	2301      	movs	r3, #1
 800423e:	e032      	b.n	80042a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d904      	bls.n	8004250 <dir_sdi+0x98>
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	d301      	bcc.n	8004254 <dir_sdi+0x9c>
 8004250:	2302      	movs	r3, #2
 8004252:	e028      	b.n	80042a6 <dir_sdi+0xee>
			ofs -= csz;
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	429a      	cmp	r2, r3
 8004262:	d2e1      	bcs.n	8004228 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004264:	6979      	ldr	r1, [r7, #20]
 8004266:	6938      	ldr	r0, [r7, #16]
 8004268:	f7ff fcc2 	bl	8003bf0 <clust2sect>
 800426c:	4602      	mov	r2, r0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <dir_sdi+0xcc>
 8004280:	2302      	movs	r3, #2
 8004282:	e010      	b.n	80042a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	0a5b      	lsrs	r3, r3, #9
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429e:	441a      	add	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	3320      	adds	r3, #32
 80042c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <dir_next+0x28>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042d4:	d301      	bcc.n	80042da <dir_next+0x2c>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e0aa      	b.n	8004430 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 8098 	bne.w	8004416 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	8912      	ldrh	r2, [r2, #8]
 8004300:	4293      	cmp	r3, r2
 8004302:	f0c0 8088 	bcc.w	8004416 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	61da      	str	r2, [r3, #28]
 800430c:	2304      	movs	r3, #4
 800430e:	e08f      	b.n	8004430 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	0a5b      	lsrs	r3, r3, #9
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	8952      	ldrh	r2, [r2, #10]
 8004318:	3a01      	subs	r2, #1
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d17a      	bne.n	8004416 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7ff fc80 	bl	8003c2e <get_fat>
 800432e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d801      	bhi.n	800433a <dir_next+0x8c>
 8004336:	2302      	movs	r3, #2
 8004338:	e07a      	b.n	8004430 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d101      	bne.n	8004346 <dir_next+0x98>
 8004342:	2301      	movs	r3, #1
 8004344:	e074      	b.n	8004430 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	d358      	bcc.n	8004402 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	61da      	str	r2, [r3, #28]
 800435c:	2304      	movs	r3, #4
 800435e:	e067      	b.n	8004430 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f7ff fe59 	bl	8004020 <create_chain>
 800436e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <dir_next+0xcc>
 8004376:	2307      	movs	r3, #7
 8004378:	e05a      	b.n	8004430 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <dir_next+0xd6>
 8004380:	2302      	movs	r3, #2
 8004382:	e055      	b.n	8004430 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d101      	bne.n	8004390 <dir_next+0xe2>
 800438c:	2301      	movs	r3, #1
 800438e:	e04f      	b.n	8004430 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7ff fb4d 	bl	8003a30 <sync_window>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <dir_next+0xf2>
 800439c:	2301      	movs	r3, #1
 800439e:	e047      	b.n	8004430 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3330      	adds	r3, #48	; 0x30
 80043a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff f977 	bl	800369e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	6979      	ldr	r1, [r7, #20]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff fc1a 	bl	8003bf0 <clust2sect>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80043c2:	e012      	b.n	80043ea <dir_next+0x13c>
						fs->wflag = 1;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff fb30 	bl	8003a30 <sync_window>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <dir_next+0x12c>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e02a      	b.n	8004430 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	3301      	adds	r3, #1
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	895b      	ldrh	r3, [r3, #10]
 80043ee:	461a      	mov	r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d3e6      	bcc.n	80043c4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004408:	6979      	ldr	r1, [r7, #20]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff fbf0 	bl	8003bf0 <clust2sect>
 8004410:	4602      	mov	r2, r0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004428:	441a      	add	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004448:	2100      	movs	r1, #0
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff feb4 	bl	80041b8 <dir_sdi>
 8004450:	4603      	mov	r3, r0
 8004452:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d12b      	bne.n	80044b2 <dir_alloc+0x7a>
		n = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	4619      	mov	r1, r3
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff fb27 	bl	8003ab8 <move_window>
 800446a:	4603      	mov	r3, r0
 800446c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d11d      	bne.n	80044b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2be5      	cmp	r3, #229	; 0xe5
 800447c:	d004      	beq.n	8004488 <dir_alloc+0x50>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d102      	bne.n	800449c <dir_alloc+0x64>
 8004496:	e00c      	b.n	80044b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800449c:	2101      	movs	r1, #1
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff ff05 	bl	80042ae <dir_next>
 80044a4:	4603      	mov	r3, r0
 80044a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0d7      	beq.n	800445e <dir_alloc+0x26>
 80044ae:	e000      	b.n	80044b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80044b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d101      	bne.n	80044bc <dir_alloc+0x84>
 80044b8:	2307      	movs	r3, #7
 80044ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	331a      	adds	r3, #26
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff f83f 	bl	8003558 <ld_word>
 80044da:	4603      	mov	r3, r0
 80044dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d109      	bne.n	80044fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff f834 	bl	8003558 <ld_word>
 80044f0:	4603      	mov	r3, r0
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	331a      	adds	r3, #26
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	b292      	uxth	r2, r2
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff f857 	bl	80035ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d109      	bne.n	800453c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f103 0214 	add.w	r2, r3, #20
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	b29b      	uxth	r3, r3
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7ff f849 	bl	80035ce <st_word>
	}
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004552:	2100      	movs	r1, #0
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fe2f 	bl	80041b8 <dir_sdi>
 800455a:	4603      	mov	r3, r0
 800455c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <dir_find+0x24>
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	e03e      	b.n	80045e6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4619      	mov	r1, r3
 800456e:	6938      	ldr	r0, [r7, #16]
 8004570:	f7ff faa2 	bl	8003ab8 <move_window>
 8004574:	4603      	mov	r3, r0
 8004576:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d12f      	bne.n	80045de <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <dir_find+0x4e>
 800458c:	2304      	movs	r3, #4
 800458e:	75fb      	strb	r3, [r7, #23]
 8004590:	e028      	b.n	80045e4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	330b      	adds	r3, #11
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	330b      	adds	r3, #11
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <dir_find+0x86>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a18      	ldr	r0, [r3, #32]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3324      	adds	r3, #36	; 0x24
 80045bc:	220b      	movs	r2, #11
 80045be:	4619      	mov	r1, r3
 80045c0:	f7ff f888 	bl	80036d4 <mem_cmp>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80045ca:	2100      	movs	r1, #0
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fe6e 	bl	80042ae <dir_next>
 80045d2:	4603      	mov	r3, r0
 80045d4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0c5      	beq.n	8004568 <dir_find+0x24>
 80045dc:	e002      	b.n	80045e4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80045e2:	bf00      	nop

	return res;
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80045fc:	2101      	movs	r1, #1
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ff1a 	bl	8004438 <dir_alloc>
 8004604:	4603      	mov	r3, r0
 8004606:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d11c      	bne.n	8004648 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	4619      	mov	r1, r3
 8004614:	68b8      	ldr	r0, [r7, #8]
 8004616:	f7ff fa4f 	bl	8003ab8 <move_window>
 800461a:	4603      	mov	r3, r0
 800461c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	2220      	movs	r2, #32
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff f836 	bl	800369e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a18      	ldr	r0, [r3, #32]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3324      	adds	r3, #36	; 0x24
 800463a:	220b      	movs	r2, #11
 800463c:	4619      	mov	r1, r3
 800463e:	f7ff f80d 	bl	800365c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2201      	movs	r2, #1
 8004646:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004648:	7bfb      	ldrb	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3324      	adds	r3, #36	; 0x24
 8004668:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800466a:	220b      	movs	r2, #11
 800466c:	2120      	movs	r1, #32
 800466e:	68b8      	ldr	r0, [r7, #8]
 8004670:	f7ff f815 	bl	800369e <mem_set>
	si = i = 0; ni = 8;
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	2308      	movs	r3, #8
 800467e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	61fa      	str	r2, [r7, #28]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800468e:	7efb      	ldrb	r3, [r7, #27]
 8004690:	2b20      	cmp	r3, #32
 8004692:	d94e      	bls.n	8004732 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004694:	7efb      	ldrb	r3, [r7, #27]
 8004696:	2b2f      	cmp	r3, #47	; 0x2f
 8004698:	d006      	beq.n	80046a8 <create_name+0x54>
 800469a:	7efb      	ldrb	r3, [r7, #27]
 800469c:	2b5c      	cmp	r3, #92	; 0x5c
 800469e:	d110      	bne.n	80046c2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80046a0:	e002      	b.n	80046a8 <create_name+0x54>
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3301      	adds	r3, #1
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b2f      	cmp	r3, #47	; 0x2f
 80046b2:	d0f6      	beq.n	80046a2 <create_name+0x4e>
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b5c      	cmp	r3, #92	; 0x5c
 80046be:	d0f0      	beq.n	80046a2 <create_name+0x4e>
			break;
 80046c0:	e038      	b.n	8004734 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80046c2:	7efb      	ldrb	r3, [r7, #27]
 80046c4:	2b2e      	cmp	r3, #46	; 0x2e
 80046c6:	d003      	beq.n	80046d0 <create_name+0x7c>
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d30c      	bcc.n	80046ea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b0b      	cmp	r3, #11
 80046d4:	d002      	beq.n	80046dc <create_name+0x88>
 80046d6:	7efb      	ldrb	r3, [r7, #27]
 80046d8:	2b2e      	cmp	r3, #46	; 0x2e
 80046da:	d001      	beq.n	80046e0 <create_name+0x8c>
 80046dc:	2306      	movs	r3, #6
 80046de:	e044      	b.n	800476a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80046e0:	2308      	movs	r3, #8
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	230b      	movs	r3, #11
 80046e6:	617b      	str	r3, [r7, #20]
			continue;
 80046e8:	e022      	b.n	8004730 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80046ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	da04      	bge.n	80046fc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80046f2:	7efb      	ldrb	r3, [r7, #27]
 80046f4:	3b80      	subs	r3, #128	; 0x80
 80046f6:	4a1f      	ldr	r2, [pc, #124]	; (8004774 <create_name+0x120>)
 80046f8:	5cd3      	ldrb	r3, [r2, r3]
 80046fa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80046fc:	7efb      	ldrb	r3, [r7, #27]
 80046fe:	4619      	mov	r1, r3
 8004700:	481d      	ldr	r0, [pc, #116]	; (8004778 <create_name+0x124>)
 8004702:	f7ff f80e 	bl	8003722 <chk_chr>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <create_name+0xbc>
 800470c:	2306      	movs	r3, #6
 800470e:	e02c      	b.n	800476a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004710:	7efb      	ldrb	r3, [r7, #27]
 8004712:	2b60      	cmp	r3, #96	; 0x60
 8004714:	d905      	bls.n	8004722 <create_name+0xce>
 8004716:	7efb      	ldrb	r3, [r7, #27]
 8004718:	2b7a      	cmp	r3, #122	; 0x7a
 800471a:	d802      	bhi.n	8004722 <create_name+0xce>
 800471c:	7efb      	ldrb	r3, [r7, #27]
 800471e:	3b20      	subs	r3, #32
 8004720:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	613a      	str	r2, [r7, #16]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	4413      	add	r3, r2
 800472c:	7efa      	ldrb	r2, [r7, #27]
 800472e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004730:	e7a6      	b.n	8004680 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004732:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	441a      	add	r2, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <create_name+0xf4>
 8004744:	2306      	movs	r3, #6
 8004746:	e010      	b.n	800476a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2be5      	cmp	r3, #229	; 0xe5
 800474e:	d102      	bne.n	8004756 <create_name+0x102>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2205      	movs	r2, #5
 8004754:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004756:	7efb      	ldrb	r3, [r7, #27]
 8004758:	2b20      	cmp	r3, #32
 800475a:	d801      	bhi.n	8004760 <create_name+0x10c>
 800475c:	2204      	movs	r2, #4
 800475e:	e000      	b.n	8004762 <create_name+0x10e>
 8004760:	2200      	movs	r2, #0
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	330b      	adds	r3, #11
 8004766:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004768:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	08005888 	.word	0x08005888
 8004778:	08005820 	.word	0x08005820

0800477c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004790:	e002      	b.n	8004798 <follow_path+0x1c>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b2f      	cmp	r3, #47	; 0x2f
 800479e:	d0f8      	beq.n	8004792 <follow_path+0x16>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b5c      	cmp	r3, #92	; 0x5c
 80047a6:	d0f4      	beq.n	8004792 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b1f      	cmp	r3, #31
 80047b4:	d80a      	bhi.n	80047cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2280      	movs	r2, #128	; 0x80
 80047ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80047be:	2100      	movs	r1, #0
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff fcf9 	bl	80041b8 <dir_sdi>
 80047c6:	4603      	mov	r3, r0
 80047c8:	75fb      	strb	r3, [r7, #23]
 80047ca:	e043      	b.n	8004854 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80047cc:	463b      	mov	r3, r7
 80047ce:	4619      	mov	r1, r3
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ff3f 	bl	8004654 <create_name>
 80047d6:	4603      	mov	r3, r0
 80047d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d134      	bne.n	800484a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff feaf 	bl	8004544 <dir_find>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80047f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d127      	bne.n	800484e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80047fe:	7afb      	ldrb	r3, [r7, #11]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d122      	bne.n	800484e <follow_path+0xd2>
 8004808:	2305      	movs	r3, #5
 800480a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800480c:	e01f      	b.n	800484e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800480e:	7afb      	ldrb	r3, [r7, #11]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11c      	bne.n	8004852 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	799b      	ldrb	r3, [r3, #6]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004824:	2305      	movs	r3, #5
 8004826:	75fb      	strb	r3, [r7, #23]
 8004828:	e014      	b.n	8004854 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004838:	4413      	add	r3, r2
 800483a:	4619      	mov	r1, r3
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff fe42 	bl	80044c6 <ld_clust>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004848:	e7c0      	b.n	80047cc <follow_path+0x50>
			if (res != FR_OK) break;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <follow_path+0xd8>
				break;
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004852:	bf00      	nop
			}
		}
	}

	return res;
 8004854:	7dfb      	ldrb	r3, [r7, #23]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800485e:	b480      	push	{r7}
 8004860:	b087      	sub	sp, #28
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004866:	f04f 33ff 	mov.w	r3, #4294967295
 800486a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d031      	beq.n	80048d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e002      	b.n	8004882 <get_ldnumber+0x24>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b20      	cmp	r3, #32
 8004888:	d903      	bls.n	8004892 <get_ldnumber+0x34>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b3a      	cmp	r3, #58	; 0x3a
 8004890:	d1f4      	bne.n	800487c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b3a      	cmp	r3, #58	; 0x3a
 8004898:	d11c      	bne.n	80048d4 <get_ldnumber+0x76>
			tp = *path;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	60fa      	str	r2, [r7, #12]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	3b30      	subs	r3, #48	; 0x30
 80048aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b09      	cmp	r3, #9
 80048b0:	d80e      	bhi.n	80048d0 <get_ldnumber+0x72>
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d10a      	bne.n	80048d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d107      	bne.n	80048d0 <get_ldnumber+0x72>
					vol = (int)i;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	3301      	adds	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	e002      	b.n	80048da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80048d8:	693b      	ldr	r3, [r7, #16]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	70da      	strb	r2, [r3, #3]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f04f 32ff 	mov.w	r2, #4294967295
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff f8d8 	bl	8003ab8 <move_window>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <check_fs+0x2a>
 800490e:	2304      	movs	r3, #4
 8004910:	e038      	b.n	8004984 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3330      	adds	r3, #48	; 0x30
 8004916:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe fe1c 	bl	8003558 <ld_word>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <check_fs+0x48>
 800492c:	2303      	movs	r3, #3
 800492e:	e029      	b.n	8004984 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004936:	2be9      	cmp	r3, #233	; 0xe9
 8004938:	d009      	beq.n	800494e <check_fs+0x66>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004940:	2beb      	cmp	r3, #235	; 0xeb
 8004942:	d11e      	bne.n	8004982 <check_fs+0x9a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800494a:	2b90      	cmp	r3, #144	; 0x90
 800494c:	d119      	bne.n	8004982 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3330      	adds	r3, #48	; 0x30
 8004952:	3336      	adds	r3, #54	; 0x36
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fe17 	bl	8003588 <ld_dword>
 800495a:	4603      	mov	r3, r0
 800495c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <check_fs+0xa4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d101      	bne.n	800496a <check_fs+0x82>
 8004966:	2300      	movs	r3, #0
 8004968:	e00c      	b.n	8004984 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3330      	adds	r3, #48	; 0x30
 800496e:	3352      	adds	r3, #82	; 0x52
 8004970:	4618      	mov	r0, r3
 8004972:	f7fe fe09 	bl	8003588 <ld_dword>
 8004976:	4603      	mov	r3, r0
 8004978:	4a05      	ldr	r2, [pc, #20]	; (8004990 <check_fs+0xa8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d101      	bne.n	8004982 <check_fs+0x9a>
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004982:	2302      	movs	r3, #2
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	00544146 	.word	0x00544146
 8004990:	33544146 	.word	0x33544146

08004994 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b096      	sub	sp, #88	; 0x58
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff ff58 	bl	800485e <get_ldnumber>
 80049ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80049b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	da01      	bge.n	80049ba <find_volume+0x26>
 80049b6:	230b      	movs	r3, #11
 80049b8:	e22e      	b.n	8004e18 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80049ba:	4aa8      	ldr	r2, [pc, #672]	; (8004c5c <find_volume+0x2c8>)
 80049bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <find_volume+0x3a>
 80049ca:	230c      	movs	r3, #12
 80049cc:	e224      	b.n	8004e18 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01a      	beq.n	8004a1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe fd17 	bl	800341c <disk_status>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80049f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10c      	bne.n	8004a1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <find_volume+0x82>
 8004a06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004a12:	230a      	movs	r3, #10
 8004a14:	e200      	b.n	8004e18 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004a16:	2300      	movs	r3, #0
 8004a18:	e1fe      	b.n	8004e18 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fd0f 	bl	8003450 <disk_initialize>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004a38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004a44:	2303      	movs	r3, #3
 8004a46:	e1e7      	b.n	8004e18 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <find_volume+0xca>
 8004a4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	e1dc      	b.n	8004e18 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004a62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a66:	f7ff ff3f 	bl	80048e8 <check_fs>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d14b      	bne.n	8004b10 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004a78:	2300      	movs	r3, #0
 8004a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a7c:	e01f      	b.n	8004abe <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004a8c:	4413      	add	r3, r2
 8004a8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	3304      	adds	r3, #4
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d006      	beq.n	8004aa8 <find_volume+0x114>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe fd72 	bl	8003588 <ld_dword>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	e000      	b.n	8004aaa <find_volume+0x116>
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aba:	3301      	adds	r3, #1
 8004abc:	643b      	str	r3, [r7, #64]	; 0x40
 8004abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d9dc      	bls.n	8004a7e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <find_volume+0x140>
 8004ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004adc:	4413      	add	r3, r2
 8004ade:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004ae2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <find_volume+0x162>
 8004aea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004aee:	f7ff fefb 	bl	80048e8 <check_fs>
 8004af2:	4603      	mov	r3, r0
 8004af4:	e000      	b.n	8004af8 <find_volume+0x164>
 8004af6:	2303      	movs	r3, #3
 8004af8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d905      	bls.n	8004b10 <find_volume+0x17c>
 8004b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b06:	3301      	adds	r3, #1
 8004b08:	643b      	str	r3, [r7, #64]	; 0x40
 8004b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d9e1      	bls.n	8004ad4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004b10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d101      	bne.n	8004b1c <find_volume+0x188>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e17d      	b.n	8004e18 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d901      	bls.n	8004b28 <find_volume+0x194>
 8004b24:	230d      	movs	r3, #13
 8004b26:	e177      	b.n	8004e18 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	3330      	adds	r3, #48	; 0x30
 8004b2c:	330b      	adds	r3, #11
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fd12 	bl	8003558 <ld_word>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3a:	d001      	beq.n	8004b40 <find_volume+0x1ac>
 8004b3c:	230d      	movs	r3, #13
 8004b3e:	e16b      	b.n	8004e18 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b42:	3330      	adds	r3, #48	; 0x30
 8004b44:	3316      	adds	r3, #22
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fd06 	bl	8003558 <ld_word>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <find_volume+0x1d0>
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	3330      	adds	r3, #48	; 0x30
 8004b5a:	3324      	adds	r3, #36	; 0x24
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fe fd13 	bl	8003588 <ld_dword>
 8004b62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b68:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	789b      	ldrb	r3, [r3, #2]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d005      	beq.n	8004b88 <find_volume+0x1f4>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	789b      	ldrb	r3, [r3, #2]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d001      	beq.n	8004b88 <find_volume+0x1f4>
 8004b84:	230d      	movs	r3, #13
 8004b86:	e147      	b.n	8004e18 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	789b      	ldrb	r3, [r3, #2]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b90:	fb02 f303 	mul.w	r3, r2, r3
 8004b94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	895b      	ldrh	r3, [r3, #10]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <find_volume+0x228>
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	895b      	ldrh	r3, [r3, #10]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	895b      	ldrh	r3, [r3, #10]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <find_volume+0x22c>
 8004bbc:	230d      	movs	r3, #13
 8004bbe:	e12b      	b.n	8004e18 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	3330      	adds	r3, #48	; 0x30
 8004bc4:	3311      	adds	r3, #17
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fcc6 	bl	8003558 <ld_word>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	891b      	ldrh	r3, [r3, #8]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <find_volume+0x252>
 8004be2:	230d      	movs	r3, #13
 8004be4:	e118      	b.n	8004e18 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	3330      	adds	r3, #48	; 0x30
 8004bea:	3313      	adds	r3, #19
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fcb3 	bl	8003558 <ld_word>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <find_volume+0x276>
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	3330      	adds	r3, #48	; 0x30
 8004c00:	3320      	adds	r3, #32
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fcc0 	bl	8003588 <ld_dword>
 8004c08:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	3330      	adds	r3, #48	; 0x30
 8004c0e:	330e      	adds	r3, #14
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe fca1 	bl	8003558 <ld_word>
 8004c16:	4603      	mov	r3, r0
 8004c18:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004c1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <find_volume+0x290>
 8004c20:	230d      	movs	r3, #13
 8004c22:	e0f9      	b.n	8004e18 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004c24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c28:	4413      	add	r3, r2
 8004c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c2c:	8912      	ldrh	r2, [r2, #8]
 8004c2e:	0912      	lsrs	r2, r2, #4
 8004c30:	b292      	uxth	r2, r2
 8004c32:	4413      	add	r3, r2
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d201      	bcs.n	8004c42 <find_volume+0x2ae>
 8004c3e:	230d      	movs	r3, #13
 8004c40:	e0ea      	b.n	8004e18 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c4a:	8952      	ldrh	r2, [r2, #10]
 8004c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <find_volume+0x2cc>
 8004c58:	230d      	movs	r3, #13
 8004c5a:	e0dd      	b.n	8004e18 <find_volume+0x484>
 8004c5c:	2000002c 	.word	0x2000002c
		fmt = FS_FAT32;
 8004c60:	2303      	movs	r3, #3
 8004c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d802      	bhi.n	8004c76 <find_volume+0x2e2>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d802      	bhi.n	8004c86 <find_volume+0x2f2>
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c92:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004c94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c98:	441a      	add	r2, r3
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004c9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	441a      	add	r2, r3
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004ca8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d11e      	bne.n	8004cee <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	3330      	adds	r3, #48	; 0x30
 8004cb4:	332a      	adds	r3, #42	; 0x2a
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fc4e 	bl	8003558 <ld_word>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <find_volume+0x332>
 8004cc2:	230d      	movs	r3, #13
 8004cc4:	e0a8      	b.n	8004e18 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	891b      	ldrh	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <find_volume+0x33e>
 8004cce:	230d      	movs	r3, #13
 8004cd0:	e0a2      	b.n	8004e18 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	3330      	adds	r3, #48	; 0x30
 8004cd6:	332c      	adds	r3, #44	; 0x2c
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fe fc55 	bl	8003588 <ld_dword>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	647b      	str	r3, [r7, #68]	; 0x44
 8004cec:	e01f      	b.n	8004d2e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	891b      	ldrh	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <find_volume+0x366>
 8004cf6:	230d      	movs	r3, #13
 8004cf8:	e08e      	b.n	8004e18 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	6a1a      	ldr	r2, [r3, #32]
 8004cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d00:	441a      	add	r2, r3
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004d06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d103      	bne.n	8004d16 <find_volume+0x382>
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	e00a      	b.n	8004d2c <find_volume+0x398>
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	4413      	add	r3, r2
 8004d20:	085a      	lsrs	r2, r3, #1
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004d2c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d38:	0a5b      	lsrs	r3, r3, #9
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d201      	bcs.n	8004d42 <find_volume+0x3ae>
 8004d3e:	230d      	movs	r3, #13
 8004d40:	e06a      	b.n	8004e18 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	611a      	str	r2, [r3, #16]
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004d58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d149      	bne.n	8004df4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	3330      	adds	r3, #48	; 0x30
 8004d64:	3330      	adds	r3, #48	; 0x30
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe fbf6 	bl	8003558 <ld_word>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d140      	bne.n	8004df4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d74:	3301      	adds	r3, #1
 8004d76:	4619      	mov	r1, r3
 8004d78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d7a:	f7fe fe9d 	bl	8003ab8 <move_window>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d137      	bne.n	8004df4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	2200      	movs	r2, #0
 8004d88:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	3330      	adds	r3, #48	; 0x30
 8004d8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fbe0 	bl	8003558 <ld_word>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d127      	bne.n	8004df4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	3330      	adds	r3, #48	; 0x30
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fe fbed 	bl	8003588 <ld_dword>
 8004dae:	4603      	mov	r3, r0
 8004db0:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <find_volume+0x48c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d11e      	bne.n	8004df4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	3330      	adds	r3, #48	; 0x30
 8004dba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fbe2 	bl	8003588 <ld_dword>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <find_volume+0x490>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d113      	bne.n	8004df4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	3330      	adds	r3, #48	; 0x30
 8004dd0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fe fbd7 	bl	8003588 <ld_dword>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	3330      	adds	r3, #48	; 0x30
 8004de4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fbcd 	bl	8003588 <ld_dword>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004dfa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <find_volume+0x494>)
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	3301      	adds	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <find_volume+0x494>)
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <find_volume+0x494>)
 8004e0a:	881a      	ldrh	r2, [r3, #0]
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004e10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e12:	f7fe fde9 	bl	80039e8 <clear_lock>
#endif
	return FR_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3758      	adds	r7, #88	; 0x58
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	41615252 	.word	0x41615252
 8004e24:	61417272 	.word	0x61417272
 8004e28:	20000030 	.word	0x20000030

08004e2c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004e36:	2309      	movs	r3, #9
 8004e38:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01c      	beq.n	8004e7a <validate+0x4e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d018      	beq.n	8004e7a <validate+0x4e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d013      	beq.n	8004e7a <validate+0x4e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	889a      	ldrh	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	88db      	ldrh	r3, [r3, #6]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d10c      	bne.n	8004e7a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe fad8 	bl	800341c <disk_status>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <validate+0x4e>
			res = FR_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <validate+0x5a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	e000      	b.n	8004e88 <validate+0x5c>
 8004e86:	2300      	movs	r3, #0
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	6013      	str	r3, [r2, #0]
	return res;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004eaa:	f107 0310 	add.w	r3, r7, #16
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fcd5 	bl	800485e <get_ldnumber>
 8004eb4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	da01      	bge.n	8004ec0 <f_mount+0x28>
 8004ebc:	230b      	movs	r3, #11
 8004ebe:	e02b      	b.n	8004f18 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004ec0:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <f_mount+0x88>)
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004ed0:	69b8      	ldr	r0, [r7, #24]
 8004ed2:	f7fe fd89 	bl	80039e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	490d      	ldr	r1, [pc, #52]	; (8004f20 <f_mount+0x88>)
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <f_mount+0x66>
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d001      	beq.n	8004f02 <f_mount+0x6a>
 8004efe:	2300      	movs	r3, #0
 8004f00:	e00a      	b.n	8004f18 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004f02:	f107 010c 	add.w	r1, r7, #12
 8004f06:	f107 0308 	add.w	r3, r7, #8
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fd41 	bl	8004994 <find_volume>
 8004f12:	4603      	mov	r3, r0
 8004f14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	2000002c 	.word	0x2000002c

08004f24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b098      	sub	sp, #96	; 0x60
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <f_open+0x18>
 8004f38:	2309      	movs	r3, #9
 8004f3a:	e1ad      	b.n	8005298 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f42:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004f44:	79fa      	ldrb	r2, [r7, #7]
 8004f46:	f107 0110 	add.w	r1, r7, #16
 8004f4a:	f107 0308 	add.w	r3, r7, #8
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fd20 	bl	8004994 <find_volume>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f040 8191 	bne.w	8005286 <f_open+0x362>
		dj.obj.fs = fs;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	f107 0314 	add.w	r3, r7, #20
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fc03 	bl	800477c <follow_path>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d11a      	bne.n	8004fba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004f84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004f88:	b25b      	sxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	da03      	bge.n	8004f96 <f_open+0x72>
				res = FR_INVALID_NAME;
 8004f8e:	2306      	movs	r3, #6
 8004f90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004f94:	e011      	b.n	8004fba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fbd2 	bl	8003758 <chk_lock>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	f003 031c 	and.w	r3, r3, #28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d07f      	beq.n	80050c4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d017      	beq.n	8004ffc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d10e      	bne.n	8004ff2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004fd4:	f7fe fc1c 	bl	8003810 <enq_lock>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d006      	beq.n	8004fec <f_open+0xc8>
 8004fde:	f107 0314 	add.w	r3, r7, #20
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fb03 	bl	80045ee <dir_register>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	e000      	b.n	8004fee <f_open+0xca>
 8004fec:	2312      	movs	r3, #18
 8004fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	f043 0308 	orr.w	r3, r3, #8
 8004ff8:	71fb      	strb	r3, [r7, #7]
 8004ffa:	e010      	b.n	800501e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004ffc:	7ebb      	ldrb	r3, [r7, #26]
 8004ffe:	f003 0311 	and.w	r3, r3, #17
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <f_open+0xea>
					res = FR_DENIED;
 8005006:	2307      	movs	r3, #7
 8005008:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800500c:	e007      	b.n	800501e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <f_open+0xfa>
 8005018:	2308      	movs	r3, #8
 800501a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800501e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005022:	2b00      	cmp	r3, #0
 8005024:	d168      	bne.n	80050f8 <f_open+0x1d4>
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d063      	beq.n	80050f8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005030:	f7fe f888 	bl	8003144 <get_fattime>
 8005034:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005038:	330e      	adds	r3, #14
 800503a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800503c:	4618      	mov	r0, r3
 800503e:	f7fe fae1 	bl	8003604 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	3316      	adds	r3, #22
 8005046:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe fadb 	bl	8003604 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800504e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005050:	330b      	adds	r3, #11
 8005052:	2220      	movs	r2, #32
 8005054:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800505a:	4611      	mov	r1, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fa32 	bl	80044c6 <ld_clust>
 8005062:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005068:	2200      	movs	r2, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fa4a 	bl	8004504 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	331c      	adds	r3, #28
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fac4 	bl	8003604 <st_dword>
					fs->wflag = 1;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2201      	movs	r2, #1
 8005080:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d037      	beq.n	80050f8 <f_open+0x1d4>
						dw = fs->winsect;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800508e:	f107 0314 	add.w	r3, r7, #20
 8005092:	2200      	movs	r2, #0
 8005094:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe ff5d 	bl	8003f56 <remove_chain>
 800509c:	4603      	mov	r3, r0
 800509e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80050a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d126      	bne.n	80050f8 <f_open+0x1d4>
							res = move_window(fs, dw);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fd02 	bl	8003ab8 <move_window>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050be:	3a01      	subs	r2, #1
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	e019      	b.n	80050f8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80050c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d115      	bne.n	80050f8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80050cc:	7ebb      	ldrb	r3, [r7, #26]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <f_open+0x1ba>
					res = FR_NO_FILE;
 80050d6:	2304      	movs	r3, #4
 80050d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80050dc:	e00c      	b.n	80050f8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <f_open+0x1d4>
 80050e8:	7ebb      	ldrb	r3, [r7, #26]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <f_open+0x1d4>
						res = FR_DENIED;
 80050f2:	2307      	movs	r3, #7
 80050f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80050f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d128      	bne.n	8005152 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005110:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800511a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f7fe fb8b 	bl	8003854 <inc_lock>
 800513e:	4602      	mov	r2, r0
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <f_open+0x22e>
 800514c:	2302      	movs	r3, #2
 800514e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 8095 	bne.w	8005286 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff f9af 	bl	80044c6 <ld_clust>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	331c      	adds	r3, #28
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe fa08 	bl	8003588 <ld_dword>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	88da      	ldrh	r2, [r3, #6]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	79fa      	ldrb	r2, [r7, #7]
 8005196:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3330      	adds	r3, #48	; 0x30
 80051ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fe fa72 	bl	800369e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d060      	beq.n	8005286 <f_open+0x362>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d05c      	beq.n	8005286 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	895b      	ldrh	r3, [r3, #10]
 80051d8:	025b      	lsls	r3, r3, #9
 80051da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	657b      	str	r3, [r7, #84]	; 0x54
 80051e8:	e016      	b.n	8005218 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fd1d 	bl	8003c2e <get_fat>
 80051f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80051f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d802      	bhi.n	8005202 <f_open+0x2de>
 80051fc:	2302      	movs	r3, #2
 80051fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d102      	bne.n	8005210 <f_open+0x2ec>
 800520a:	2301      	movs	r3, #1
 800520c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	657b      	str	r3, [r7, #84]	; 0x54
 8005218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <f_open+0x304>
 8005220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005224:	429a      	cmp	r2, r3
 8005226:	d8e0      	bhi.n	80051ea <f_open+0x2c6>
				}
				fp->clust = clst;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800522c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800522e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005232:	2b00      	cmp	r3, #0
 8005234:	d127      	bne.n	8005286 <f_open+0x362>
 8005236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523c:	2b00      	cmp	r3, #0
 800523e:	d022      	beq.n	8005286 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe fcd3 	bl	8003bf0 <clust2sect>
 800524a:	6478      	str	r0, [r7, #68]	; 0x44
 800524c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <f_open+0x336>
						res = FR_INT_ERR;
 8005252:	2302      	movs	r3, #2
 8005254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005258:	e015      	b.n	8005286 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800525a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800525c:	0a5a      	lsrs	r2, r3, #9
 800525e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	7858      	ldrb	r0, [r3, #1]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	2301      	movs	r3, #1
 8005276:	f7fe f911 	bl	800349c <disk_read>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <f_open+0x362>
 8005280:	2301      	movs	r3, #1
 8005282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005286:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <f_open+0x370>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005294:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005298:	4618      	mov	r0, r3
 800529a:	3760      	adds	r7, #96	; 0x60
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	; 0x30
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f107 0210 	add.w	r2, r7, #16
 80052be:	4611      	mov	r1, r2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fdb3 	bl	8004e2c <validate>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80052cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d107      	bne.n	80052e4 <f_write+0x44>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	7d5b      	ldrb	r3, [r3, #21]
 80052d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80052dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <f_write+0x4a>
 80052e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052e8:	e14b      	b.n	8005582 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	7d1b      	ldrb	r3, [r3, #20]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <f_write+0x5a>
 80052f6:	2307      	movs	r3, #7
 80052f8:	e143      	b.n	8005582 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	441a      	add	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	429a      	cmp	r2, r3
 8005308:	f080 812d 	bcs.w	8005566 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	43db      	mvns	r3, r3
 8005312:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005314:	e127      	b.n	8005566 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 80e3 	bne.w	80054ea <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	0a5b      	lsrs	r3, r3, #9
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	8952      	ldrh	r2, [r2, #10]
 800532e:	3a01      	subs	r2, #1
 8005330:	4013      	ands	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d143      	bne.n	80053c2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d11a      	bne.n	8005384 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe fe64 	bl	8004020 <create_chain>
 8005358:	62b8      	str	r0, [r7, #40]	; 0x28
 800535a:	e013      	b.n	8005384 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	4619      	mov	r1, r3
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7fe fef0 	bl	8004150 <clmt_clust>
 8005370:	62b8      	str	r0, [r7, #40]	; 0x28
 8005372:	e007      	b.n	8005384 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f7fe fe4f 	bl	8004020 <create_chain>
 8005382:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80f2 	beq.w	8005570 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	2b01      	cmp	r3, #1
 8005390:	d104      	bne.n	800539c <f_write+0xfc>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2202      	movs	r2, #2
 8005396:	755a      	strb	r2, [r3, #21]
 8005398:	2302      	movs	r3, #2
 800539a:	e0f2      	b.n	8005582 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d104      	bne.n	80053ae <f_write+0x10e>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	755a      	strb	r2, [r3, #21]
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0e9      	b.n	8005582 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <f_write+0x122>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	7d1b      	ldrb	r3, [r3, #20]
 80053c6:	b25b      	sxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	da18      	bge.n	80053fe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	7858      	ldrb	r0, [r3, #1]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1a      	ldr	r2, [r3, #32]
 80053da:	2301      	movs	r3, #1
 80053dc:	f7fe f87e 	bl	80034dc <disk_write>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <f_write+0x150>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	755a      	strb	r2, [r3, #21]
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0c8      	b.n	8005582 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	7d1b      	ldrb	r3, [r3, #20]
 80053f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f7fe fbf2 	bl	8003bf0 <clust2sect>
 800540c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <f_write+0x17e>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2202      	movs	r2, #2
 8005418:	755a      	strb	r2, [r3, #21]
 800541a:	2302      	movs	r3, #2
 800541c:	e0b1      	b.n	8005582 <f_write+0x2e2>
			sect += csect;
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	4413      	add	r3, r2
 8005424:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	0a5b      	lsrs	r3, r3, #9
 800542a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d03c      	beq.n	80054ac <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	4413      	add	r3, r2
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	8952      	ldrh	r2, [r2, #10]
 800543c:	4293      	cmp	r3, r2
 800543e:	d905      	bls.n	800544c <f_write+0x1ac>
					cc = fs->csize - csect;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	895b      	ldrh	r3, [r3, #10]
 8005444:	461a      	mov	r2, r3
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	7858      	ldrb	r0, [r3, #1]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	f7fe f841 	bl	80034dc <disk_write>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <f_write+0x1ca>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	755a      	strb	r2, [r3, #21]
 8005466:	2301      	movs	r3, #1
 8005468:	e08b      	b.n	8005582 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	429a      	cmp	r2, r3
 8005476:	d915      	bls.n	80054a4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1a      	ldr	r2, [r3, #32]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	025b      	lsls	r3, r3, #9
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	4413      	add	r3, r2
 800548c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005490:	4619      	mov	r1, r3
 8005492:	f7fe f8e3 	bl	800365c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	7d1b      	ldrb	r3, [r3, #20]
 800549a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	025b      	lsls	r3, r3, #9
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80054aa:	e03f      	b.n	800552c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d016      	beq.n	80054e4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80054be:	429a      	cmp	r2, r3
 80054c0:	d210      	bcs.n	80054e4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	7858      	ldrb	r0, [r3, #1]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80054cc:	2301      	movs	r3, #1
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	f7fd ffe4 	bl	800349c <disk_read>
 80054d4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d004      	beq.n	80054e4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	755a      	strb	r2, [r3, #21]
 80054e0:	2301      	movs	r3, #1
 80054e2:	e04e      	b.n	8005582 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d901      	bls.n	8005504 <f_write+0x264>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	4413      	add	r3, r2
 8005514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005516:	69f9      	ldr	r1, [r7, #28]
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe f89f 	bl	800365c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	7d1b      	ldrb	r3, [r3, #20]
 8005522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005526:	b2da      	uxtb	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	4413      	add	r3, r2
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	441a      	add	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	619a      	str	r2, [r3, #24]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	429a      	cmp	r2, r3
 800554a:	bf38      	it	cc
 800554c:	461a      	movcc	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	60da      	str	r2, [r3, #12]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	441a      	add	r2, r3
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f47f aed4 	bne.w	8005316 <f_write+0x76>
 800556e:	e000      	b.n	8005572 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005570:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	7d1b      	ldrb	r3, [r3, #20]
 8005576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3730      	adds	r7, #48	; 0x30
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b086      	sub	sp, #24
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f107 0208 	add.w	r2, r7, #8
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fc46 	bl	8004e2c <validate>
 80055a0:	4603      	mov	r3, r0
 80055a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d168      	bne.n	800567c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	7d1b      	ldrb	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d062      	beq.n	800567c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	7d1b      	ldrb	r3, [r3, #20]
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da15      	bge.n	80055ec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	7858      	ldrb	r0, [r3, #1]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	2301      	movs	r3, #1
 80055d0:	f7fd ff84 	bl	80034dc <disk_write>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <f_sync+0x54>
 80055da:	2301      	movs	r3, #1
 80055dc:	e04f      	b.n	800567e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	7d1b      	ldrb	r3, [r3, #20]
 80055e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80055ec:	f7fd fdaa 	bl	8003144 <get_fattime>
 80055f0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7fe fa5c 	bl	8003ab8 <move_window>
 8005600:	4603      	mov	r3, r0
 8005602:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d138      	bne.n	800567c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	330b      	adds	r3, #11
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	330b      	adds	r3, #11
 800561a:	f042 0220 	orr.w	r2, r2, #32
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	461a      	mov	r2, r3
 800562c:	68f9      	ldr	r1, [r7, #12]
 800562e:	f7fe ff69 	bl	8004504 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f103 021c 	add.w	r2, r3, #28
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7fd ffe0 	bl	8003604 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3316      	adds	r3, #22
 8005648:	6939      	ldr	r1, [r7, #16]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fd ffda 	bl	8003604 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3312      	adds	r3, #18
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd ffb9 	bl	80035ce <st_word>
					fs->wflag = 1;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2201      	movs	r2, #1
 8005660:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f7fe fa55 	bl	8003b14 <sync_fs>
 800566a:	4603      	mov	r3, r0
 800566c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	7d1b      	ldrb	r3, [r3, #20]
 8005672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005676:	b2da      	uxtb	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800567c:	7dfb      	ldrb	r3, [r7, #23]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ff7b 	bl	800558a <f_sync>
 8005694:	4603      	mov	r3, r0
 8005696:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d118      	bne.n	80056d0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f107 0208 	add.w	r2, r7, #8
 80056a4:	4611      	mov	r1, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff fbc0 	bl	8004e2c <validate>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe f958 	bl	8003970 <dec_lock>
 80056c0:	4603      	mov	r3, r0
 80056c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	4613      	mov	r3, r2
 80056e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80056ea:	2301      	movs	r3, #1
 80056ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80056f2:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <FATFS_LinkDriverEx+0x94>)
 80056f4:	7a5b      	ldrb	r3, [r3, #9]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d131      	bne.n	8005760 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80056fc:	4b1c      	ldr	r3, [pc, #112]	; (8005770 <FATFS_LinkDriverEx+0x94>)
 80056fe:	7a5b      	ldrb	r3, [r3, #9]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <FATFS_LinkDriverEx+0x94>)
 8005706:	2100      	movs	r1, #0
 8005708:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800570a:	4b19      	ldr	r3, [pc, #100]	; (8005770 <FATFS_LinkDriverEx+0x94>)
 800570c:	7a5b      	ldrb	r3, [r3, #9]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	4a17      	ldr	r2, [pc, #92]	; (8005770 <FATFS_LinkDriverEx+0x94>)
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800571a:	4b15      	ldr	r3, [pc, #84]	; (8005770 <FATFS_LinkDriverEx+0x94>)
 800571c:	7a5b      	ldrb	r3, [r3, #9]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	4b13      	ldr	r3, [pc, #76]	; (8005770 <FATFS_LinkDriverEx+0x94>)
 8005724:	4413      	add	r3, r2
 8005726:	79fa      	ldrb	r2, [r7, #7]
 8005728:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <FATFS_LinkDriverEx+0x94>)
 800572c:	7a5b      	ldrb	r3, [r3, #9]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	b2d1      	uxtb	r1, r2
 8005734:	4a0e      	ldr	r2, [pc, #56]	; (8005770 <FATFS_LinkDriverEx+0x94>)
 8005736:	7251      	strb	r1, [r2, #9]
 8005738:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800573a:	7dbb      	ldrb	r3, [r7, #22]
 800573c:	3330      	adds	r3, #48	; 0x30
 800573e:	b2da      	uxtb	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	3301      	adds	r3, #1
 8005748:	223a      	movs	r2, #58	; 0x3a
 800574a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	3302      	adds	r3, #2
 8005750:	222f      	movs	r2, #47	; 0x2f
 8005752:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	3303      	adds	r3, #3
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005760:	7dfb      	ldrb	r3, [r7, #23]
}
 8005762:	4618      	mov	r0, r3
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20000054 	.word	0x20000054

08005774 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800577e:	2200      	movs	r2, #0
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ffaa 	bl	80056dc <FATFS_LinkDriverEx>
 8005788:	4603      	mov	r3, r0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <__libc_init_array>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	4d0d      	ldr	r5, [pc, #52]	; (80057cc <__libc_init_array+0x38>)
 8005798:	4c0d      	ldr	r4, [pc, #52]	; (80057d0 <__libc_init_array+0x3c>)
 800579a:	1b64      	subs	r4, r4, r5
 800579c:	10a4      	asrs	r4, r4, #2
 800579e:	2600      	movs	r6, #0
 80057a0:	42a6      	cmp	r6, r4
 80057a2:	d109      	bne.n	80057b8 <__libc_init_array+0x24>
 80057a4:	4d0b      	ldr	r5, [pc, #44]	; (80057d4 <__libc_init_array+0x40>)
 80057a6:	4c0c      	ldr	r4, [pc, #48]	; (80057d8 <__libc_init_array+0x44>)
 80057a8:	f000 f820 	bl	80057ec <_init>
 80057ac:	1b64      	subs	r4, r4, r5
 80057ae:	10a4      	asrs	r4, r4, #2
 80057b0:	2600      	movs	r6, #0
 80057b2:	42a6      	cmp	r6, r4
 80057b4:	d105      	bne.n	80057c2 <__libc_init_array+0x2e>
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057bc:	4798      	blx	r3
 80057be:	3601      	adds	r6, #1
 80057c0:	e7ee      	b.n	80057a0 <__libc_init_array+0xc>
 80057c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c6:	4798      	blx	r3
 80057c8:	3601      	adds	r6, #1
 80057ca:	e7f2      	b.n	80057b2 <__libc_init_array+0x1e>
 80057cc:	08005910 	.word	0x08005910
 80057d0:	08005910 	.word	0x08005910
 80057d4:	08005910 	.word	0x08005910
 80057d8:	08005914 	.word	0x08005914

080057dc <memset>:
 80057dc:	4402      	add	r2, r0
 80057de:	4603      	mov	r3, r0
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d100      	bne.n	80057e6 <memset+0xa>
 80057e4:	4770      	bx	lr
 80057e6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ea:	e7f9      	b.n	80057e0 <memset+0x4>

080057ec <_init>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr

080057f8 <_fini>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	bf00      	nop
 80057fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fe:	bc08      	pop	{r3}
 8005800:	469e      	mov	lr, r3
 8005802:	4770      	bx	lr
