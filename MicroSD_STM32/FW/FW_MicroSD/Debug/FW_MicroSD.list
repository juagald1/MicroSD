
FW_MicroSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a4  080065a4  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ac  080065ac  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080065b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000009e8  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a80  20000a80  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c67  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002803  00000000  00000000  00030d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  00033538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  00034058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022974  00000000  00000000  00034a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1b9  00000000  00000000  000573b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7a89  00000000  00000000  0006656d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012dff6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f90  00000000  00000000  0012e04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800644c 	.word	0x0800644c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800644c 	.word	0x0800644c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <SystemClock_Config>:
 */

#include "stm32f4xx_hal.h"

void SystemClock_Config	(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 fb2a 	bl	8005bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <SystemClock_Config+0xb8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a22      	ldr	r2, [pc, #136]	; (8000620 <SystemClock_Config+0xb8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <SystemClock_Config+0xb8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <SystemClock_Config+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <SystemClock_Config+0xbc>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <SystemClock_Config+0xbc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fe94 	bl	800131c <HAL_RCC_OscConfig>
  {
	   //JGD Generar Error
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2105      	movs	r1, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f8fa 	bl	800180c <HAL_RCC_ClockConfig>
  {
	   //JGD Generar Error
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init	(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <GPIO_Init+0x84>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a1d      	ldr	r2, [pc, #116]	; (80006ac <GPIO_Init+0x84>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <GPIO_Init+0x84>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <GPIO_Init+0x84>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <GPIO_Init+0x84>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <GPIO_Init+0x84>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <GPIO_Init+0x84>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <GPIO_Init+0x84>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <GPIO_Init+0x84>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <GPIO_Init+0x84>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <GPIO_Init+0x84>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <GPIO_Init+0x84>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <Init_HW>:

void Init_HW (void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_Init();
 80006b4:	f000 fb1a 	bl	8000cec <HAL_Init>
	SystemClock_Config();
 80006b8:	f7ff ff56 	bl	8000568 <SystemClock_Config>
	GPIO_Init();
 80006bc:	f7ff ffb4 	bl	8000628 <GPIO_Init>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void SDIO_SD_Init(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  hsd.Instance				    = SDIO;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <SDIO_SD_Init+0x38>)
 80006ca:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <SDIO_SD_Init+0x3c>)
 80006cc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge			= SDIO_CLOCK_EDGE_RISING;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <SDIO_SD_Init+0x38>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass 			= SDIO_CLOCK_BYPASS_DISABLE;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <SDIO_SD_Init+0x38>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave 		= SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <SDIO_SD_Init+0x38>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide 				= SDIO_BUS_WIDE_1B;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <SDIO_SD_Init+0x38>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl  = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <SDIO_SD_Init+0x38>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv 			= 0;
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <SDIO_SD_Init+0x38>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]

}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	2000056c 	.word	0x2000056c
 8000700:	40012c00 	.word	0x40012c00

08000704 <Init_MicroSD>:

void Init_MicroSD (void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	  SDIO_SD_Init();
 8000708:	f7ff ffdc 	bl	80006c4 <SDIO_SD_Init>
	  FATFS_Init();
 800070c:	f002 fefc 	bl	8003508 <FATFS_Init>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <Recorre_Array>:

int Recorre_Array (void){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0

	for (int i= 0; i<=LONGIUD_MAX_DATO;i++){
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e00d      	b.n	800073c <Recorre_Array+0x28>

		if(datos_array[i] == 0){
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <Recorre_Array+0x44>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <Recorre_Array+0x22>
			suma++;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <Recorre_Array+0x48>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <Recorre_Array+0x48>)
 8000734:	6013      	str	r3, [r2, #0]
	for (int i= 0; i<=LONGIUD_MAX_DATO;i++){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	3301      	adds	r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b14      	cmp	r3, #20
 8000740:	ddee      	ble.n	8000720 <Recorre_Array+0xc>
		}
	}
	return suma++;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <Recorre_Array+0x48>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	4904      	ldr	r1, [pc, #16]	; (800075c <Recorre_Array+0x48>)
 800074a:	600a      	str	r2, [r1, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	20000004 	.word	0x20000004
 800075c:	200005f8 	.word	0x200005f8

08000760 <Datos_String>:




uint8_t Datos_String 	 (void *datos, tTipoDatos Tipo_Dato)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	/*!< Filtro para comprobra si el tipo de dato introducido es admisible			 			*/
	//if(Tipo_Dato != 0 || Tipo_Dato != 1 || Tipo_Dato != 2)

	if((Tipo_Dato != 0 || Tipo_Dato != 1))
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <Datos_String+0x18>
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d001      	beq.n	800077c <Datos_String+0x1c>
	{
		Tipo_Dato = Desconocido;
 8000778:	2303      	movs	r3, #3
 800077a:	70fb      	strb	r3, [r7, #3]
	}

		switch (Tipo_Dato)
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d86f      	bhi.n	8000862 <Datos_String+0x102>
 8000782:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <Datos_String+0x28>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	08000799 	.word	0x08000799
 800078c:	080007b7 	.word	0x080007b7
 8000790:	0800084b 	.word	0x0800084b
 8000794:	0800085b 	.word	0x0800085b
		{

		case Entero:
			dato_ent 	  = *(int *) datos;											/*!< Se pasa el numero recibido a decimal      				    */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a40      	ldr	r2, [pc, #256]	; (80008a0 <Datos_String+0x140>)
 800079e:	6013      	str	r3, [r2, #0]
			sprintf (datos_array, "%d", dato_ent);									/*!< Genera un string con la parte entera			 			*/
 80007a0:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <Datos_String+0x140>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	493f      	ldr	r1, [pc, #252]	; (80008a4 <Datos_String+0x144>)
 80007a8:	483f      	ldr	r0, [pc, #252]	; (80008a8 <Datos_String+0x148>)
 80007aa:	f005 fa19 	bl	8005be0 <siprintf>
			add_separador = 1;
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <Datos_String+0x14c>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
			break;
 80007b4:	e055      	b.n	8000862 <Datos_String+0x102>

		case Decimal:
			dato_dec      = *(float *) datos;										/*!< Se pasa el numero recibido a decimal      				    */
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <Datos_String+0x150>)
 80007bc:	6013      	str	r3, [r2, #0]
			parte_entera  = dato_dec;												/*!< Obtiene parte entera del numero recibido       			*/
 80007be:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <Datos_String+0x150>)
 80007c0:	edd3 7a00 	vldr	s15, [r3]
 80007c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c8:	ee17 2a90 	vmov	r2, s15
 80007cc:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <Datos_String+0x154>)
 80007ce:	601a      	str	r2, [r3, #0]
			parte_decimal = (dato_dec-parte_entera);								/*!< Obtiene parte decimal del numero recibido  				*/
 80007d0:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <Datos_String+0x150>)
 80007d2:	ed93 7a00 	vldr	s14, [r3]
 80007d6:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <Datos_String+0x154>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	ee07 3a90 	vmov	s15, r3
 80007de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007e6:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <Datos_String+0x158>)
 80007e8:	edc3 7a00 	vstr	s15, [r3]

			if (dato_dec < 0)														/*!< Si el dato es negativo, cambia a positiva la parte decimal */
 80007ec:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <Datos_String+0x150>)
 80007ee:	edd3 7a00 	vldr	s15, [r3]
 80007f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	d507      	bpl.n	800080c <Datos_String+0xac>
			{
				parte_decimal = (parte_decimal*(-1));
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <Datos_String+0x158>)
 80007fe:	edd3 7a00 	vldr	s15, [r3]
 8000802:	eef1 7a67 	vneg.f32	s15, s15
 8000806:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <Datos_String+0x158>)
 8000808:	edc3 7a00 	vstr	s15, [r3]
			}

			parte_decimal 		 = (parte_decimal*MAX_DECIMALES);					/*!< Tres decimales de precisión ajustar con DEFINE  			 */
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <Datos_String+0x158>)
 800080e:	edd3 7a00 	vldr	s15, [r3]
 8000812:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80008bc <Datos_String+0x15c>
 8000816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <Datos_String+0x158>)
 800081c:	edc3 7a00 	vstr	s15, [r3]
			parte_decimal_entera = parte_decimal;									/*!< Pasa a entera la parte decimal  							 */
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <Datos_String+0x158>)
 8000822:	edd3 7a00 	vldr	s15, [r3]
 8000826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800082a:	ee17 2a90 	vmov	r2, s15
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <Datos_String+0x160>)
 8000830:	601a      	str	r2, [r3, #0]
			sprintf (datos_array, "%d.%d", parte_entera, parte_decimal_entera);		/*!< Genera un string con la parte entera y decimal 			 */
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <Datos_String+0x154>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <Datos_String+0x160>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4922      	ldr	r1, [pc, #136]	; (80008c4 <Datos_String+0x164>)
 800083c:	481a      	ldr	r0, [pc, #104]	; (80008a8 <Datos_String+0x148>)
 800083e:	f005 f9cf 	bl	8005be0 <siprintf>
			add_separador 		 = 1;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <Datos_String+0x14c>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
			break;
 8000848:	e00b      	b.n	8000862 <Datos_String+0x102>

		case Cadena_Caracteres:
			strcpy(datos_array, datos);
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	4816      	ldr	r0, [pc, #88]	; (80008a8 <Datos_String+0x148>)
 800084e:	f005 f9e7 	bl	8005c20 <strcpy>
			add_separador = 1;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <Datos_String+0x14c>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]
			break;
 8000858:	e003      	b.n	8000862 <Datos_String+0x102>

		case Desconocido:
			Estado = 0;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <Datos_String+0x168>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
			break;
 8000860:	bf00      	nop
		}

		/*!< Añade ; para separar datos en archivo ,CSV  */
		if(add_separador == 1)
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <Datos_String+0x14c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d114      	bne.n	8000894 <Datos_String+0x134>
		{
			n_bytes = ((sizeof (datos_array))- Recorre_Array());
 800086a:	f7ff ff53 	bl	8000714 <Recorre_Array>
 800086e:	4603      	mov	r3, r0
 8000870:	f1c3 0314 	rsb	r3, r3, #20
 8000874:	461a      	mov	r2, r3
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <Datos_String+0x16c>)
 8000878:	601a      	str	r2, [r3, #0]
			datos_array[n_bytes] = 0x3B;											/*!< 0x3B -> ';' ASCII  		 								 */
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <Datos_String+0x16c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <Datos_String+0x148>)
 8000880:	213b      	movs	r1, #59	; 0x3b
 8000882:	54d1      	strb	r1, [r2, r3]
			n_bytes = n_bytes+1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <Datos_String+0x16c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <Datos_String+0x16c>)
 800088c:	6013      	str	r3, [r2, #0]
			Estado  = 1;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <Datos_String+0x168>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
		}

		return Estado;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <Datos_String+0x168>)
 8000896:	781b      	ldrb	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000f4 	.word	0x200000f4
 80008a4:	08006464 	.word	0x08006464
 80008a8:	20000004 	.word	0x20000004
 80008ac:	20000330 	.word	0x20000330
 80008b0:	200005f4 	.word	0x200005f4
 80008b4:	20000334 	.word	0x20000334
 80008b8:	200000fc 	.word	0x200000fc
 80008bc:	447a0000 	.word	0x447a0000
 80008c0:	200000f8 	.word	0x200000f8
 80008c4:	08006468 	.word	0x08006468
 80008c8:	20000338 	.word	0x20000338
 80008cc:	200005fc 	.word	0x200005fc

080008d0 <Crea_Archivo>:
  * 		Imporante! Añadir al final del nombre del archivo su formato.
  * @param  TCHAR*: "Nombre del archivo a Crear" (ej. "DATOS.TXT").
  * @retval None
  */
void Crea_Archivo (const TCHAR* nombre_archivo_crear)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if(f_mount(&FAT_FS, RAIZ_SD, 1) == FR_OK)
 80008d8:	2201      	movs	r2, #1
 80008da:	4910      	ldr	r1, [pc, #64]	; (800091c <Crea_Archivo+0x4c>)
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <Crea_Archivo+0x50>)
 80008de:	f004 fccf 	bl	8005280 <f_mount>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d110      	bne.n	800090a <Crea_Archivo+0x3a>
	{
		if(f_open(&Archivo, nombre_archivo_crear, FA_CREATE_NEW | FA_WRITE | FA_READ) != FR_OK)
 80008e8:	2207      	movs	r2, #7
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <Crea_Archivo+0x54>)
 80008ee:	f004 fd0d 	bl	800530c <f_open>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d004      	beq.n	8000902 <Crea_Archivo+0x32>
		{
			Error.Flags.Bit.Crea_Archivo = 1;
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <Crea_Archivo+0x58>)
 80008fa:	7813      	ldrb	r3, [r2, #0]
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	7013      	strb	r3, [r2, #0]
		}
			f_close(&Archivo);
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <Crea_Archivo+0x54>)
 8000904:	f005 f8b3 	bl	8005a6e <f_close>
	}else{
			Error.Flags.Bit.Monta_Memoria = 1;
	}
}
 8000908:	e004      	b.n	8000914 <Crea_Archivo+0x44>
			Error.Flags.Bit.Monta_Memoria = 1;
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <Crea_Archivo+0x58>)
 800090c:	7813      	ldrb	r3, [r2, #0]
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	7013      	strb	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	2000033c 	.word	0x2000033c
 8000924:	20000100 	.word	0x20000100
 8000928:	200005f0 	.word	0x200005f0

0800092c <Escribe_Archivo>:
  * @param  TCHAR*: "Nombre del Archivo a Escribir".
  * @param  void*:  Datos a escribir en archivo
  * @retval None
  */
void Escribe_Archivo (const TCHAR* nombre_archivo, void *Datos, tTipoDatos Tipo_Dato)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	4613      	mov	r3, r2
 8000938:	71fb      	strb	r3, [r7, #7]
	if(f_mount(&FAT_FS, RAIZ_SD, 1) == FR_OK)
 800093a:	2201      	movs	r2, #1
 800093c:	4933      	ldr	r1, [pc, #204]	; (8000a0c <Escribe_Archivo+0xe0>)
 800093e:	4834      	ldr	r0, [pc, #208]	; (8000a10 <Escribe_Archivo+0xe4>)
 8000940:	f004 fc9e 	bl	8005280 <f_mount>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d156      	bne.n	80009f8 <Escribe_Archivo+0xcc>
	{
		if( Datos_String(Datos, Tipo_Dato) == 1)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4619      	mov	r1, r3
 800094e:	68b8      	ldr	r0, [r7, #8]
 8000950:	f7ff ff06 	bl	8000760 <Datos_String>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d148      	bne.n	80009ec <Escribe_Archivo+0xc0>
		{

			if(f_open(&Archivo, nombre_archivo, FA_OPEN_APPEND | FA_WRITE | FA_READ) != FR_OK)
 800095a:	2233      	movs	r2, #51	; 0x33
 800095c:	68f9      	ldr	r1, [r7, #12]
 800095e:	482d      	ldr	r0, [pc, #180]	; (8000a14 <Escribe_Archivo+0xe8>)
 8000960:	f004 fcd4 	bl	800530c <f_open>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d004      	beq.n	8000974 <Escribe_Archivo+0x48>
			{
				Error.Flags.Bit.Apertura_Archivo = 1;
 800096a:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <Escribe_Archivo+0xec>)
 800096c:	7813      	ldrb	r3, [r2, #0]
 800096e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000972:	7013      	strb	r3, [r2, #0]
			}

			if (f_write(&Archivo, &datos_array, n_bytes, &testByte) != FR_OK)
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <Escribe_Archivo+0xf0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <Escribe_Archivo+0xf4>)
 800097c:	4929      	ldr	r1, [pc, #164]	; (8000a24 <Escribe_Archivo+0xf8>)
 800097e:	4825      	ldr	r0, [pc, #148]	; (8000a14 <Escribe_Archivo+0xe8>)
 8000980:	f004 fe82 	bl	8005688 <f_write>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <Escribe_Archivo+0x68>
			{
				Error.Flags.Bit.Escritura_Archivo = 1;
 800098a:	4a23      	ldr	r2, [pc, #140]	; (8000a18 <Escribe_Archivo+0xec>)
 800098c:	7813      	ldrb	r3, [r2, #0]
 800098e:	f043 0320 	orr.w	r3, r3, #32
 8000992:	7013      	strb	r3, [r2, #0]
			}

			if (f_close(&Archivo) != FR_OK)
 8000994:	481f      	ldr	r0, [pc, #124]	; (8000a14 <Escribe_Archivo+0xe8>)
 8000996:	f005 f86a 	bl	8005a6e <f_close>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d004      	beq.n	80009aa <Escribe_Archivo+0x7e>
			{
				Error.Flags.Bit.Cierre_Archivo = 1;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <Escribe_Archivo+0xec>)
 80009a2:	7813      	ldrb	r3, [r2, #0]
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	7013      	strb	r3, [r2, #0]
			}
				n_bytes=suma=0;		//JGD METER EN ESTRUCTURA DE DATOS y dato_ent poner a 0, datos array reiniciar
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <Escribe_Archivo+0xfc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <Escribe_Archivo+0xfc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <Escribe_Archivo+0xf0>)
 80009b6:	6013      	str	r3, [r2, #0]
				add_separador = 0;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <Escribe_Archivo+0x100>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
				dato_dec =0;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <Escribe_Archivo+0x104>)
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
				dato_ent=0;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <Escribe_Archivo+0x108>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
				parte_decimal=0;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <Escribe_Archivo+0x10c>)
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
				parte_decimal_entera=0;
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <Escribe_Archivo+0x110>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
				Estado=0;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <Escribe_Archivo+0x114>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]

				memset(datos_array, '\0', sizeof(datos_array));	//JGD Reset Array
 80009e0:	2214      	movs	r2, #20
 80009e2:	2100      	movs	r1, #0
 80009e4:	480f      	ldr	r0, [pc, #60]	; (8000a24 <Escribe_Archivo+0xf8>)
 80009e6:	f005 f8f3 	bl	8005bd0 <memset>
		}

	}else{
				Error.Flags.Bit.Monta_Memoria = 1;
	}
}
 80009ea:	e00a      	b.n	8000a02 <Escribe_Archivo+0xd6>
				Error.Flags.Bit.Tipo_de_Dato_Desconocido = 1;
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <Escribe_Archivo+0xec>)
 80009ee:	7853      	ldrb	r3, [r2, #1]
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	7053      	strb	r3, [r2, #1]
}
 80009f6:	e004      	b.n	8000a02 <Escribe_Archivo+0xd6>
				Error.Flags.Bit.Monta_Memoria = 1;
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <Escribe_Archivo+0xec>)
 80009fa:	7813      	ldrb	r3, [r2, #0]
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	7013      	strb	r3, [r2, #0]
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	2000033c 	.word	0x2000033c
 8000a14:	20000100 	.word	0x20000100
 8000a18:	200005f0 	.word	0x200005f0
 8000a1c:	200005fc 	.word	0x200005fc
 8000a20:	20000600 	.word	0x20000600
 8000a24:	20000004 	.word	0x20000004
 8000a28:	200005f8 	.word	0x200005f8
 8000a2c:	20000330 	.word	0x20000330
 8000a30:	200005f4 	.word	0x200005f4
 8000a34:	200000f4 	.word	0x200000f4
 8000a38:	200000fc 	.word	0x200000fc
 8000a3c:	200000f8 	.word	0x200000f8
 8000a40:	20000338 	.word	0x20000338

08000a44 <main>:
int 	var1 = 90;
float 	var2 = 619.619;
char 	myData[] = {"AMUNT\0"};

int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  Init_HW();
 8000a48:	f7ff fe32 	bl	80006b0 <Init_HW>
  Init_MicroSD();
 8000a4c:	f7ff fe5a 	bl	8000704 <Init_MicroSD>

  Crea_Archivo	  ("AMUNT.CSV\0");
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <main+0x3c>)
 8000a52:	f7ff ff3d 	bl	80008d0 <Crea_Archivo>
  Escribe_Archivo ("AMUNT.CSV\0", &var1, 			5);
 8000a56:	2205      	movs	r2, #5
 8000a58:	490a      	ldr	r1, [pc, #40]	; (8000a84 <main+0x40>)
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <main+0x3c>)
 8000a5c:	f7ff ff66 	bl	800092c <Escribe_Archivo>
  Escribe_Archivo ("AMUNT.CSV\0", &var2, 			Decimal);
 8000a60:	2201      	movs	r2, #1
 8000a62:	4909      	ldr	r1, [pc, #36]	; (8000a88 <main+0x44>)
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <main+0x3c>)
 8000a66:	f7ff ff61 	bl	800092c <Escribe_Archivo>
  Escribe_Archivo ("AMUNT.CSV\0", &myData, 			Cadena_Caracteres);
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <main+0x48>)
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <main+0x3c>)
 8000a70:	f7ff ff5c 	bl	800092c <Escribe_Archivo>
  Escribe_Archivo ("AMUNT.CSV\0", "VALENCIA\0", 	Cadena_Caracteres);
 8000a74:	2202      	movs	r2, #2
 8000a76:	4906      	ldr	r1, [pc, #24]	; (8000a90 <main+0x4c>)
 8000a78:	4801      	ldr	r0, [pc, #4]	; (8000a80 <main+0x3c>)
 8000a7a:	f7ff ff57 	bl	800092c <Escribe_Archivo>

  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <main+0x3a>
 8000a80:	08006470 	.word	0x08006470
 8000a84:	20000018 	.word	0x20000018
 8000a88:	2000001c 	.word	0x2000001c
 8000a8c:	20000020 	.word	0x20000020
 8000a90:	0800647c 	.word	0x0800647c

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f000 fa52 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a28      	ldr	r2, [pc, #160]	; (8000ba4 <HAL_SD_MspInit+0xc0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d14a      	bne.n	8000b9c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <HAL_SD_MspInit+0xc4>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a26      	ldr	r2, [pc, #152]	; (8000ba8 <HAL_SD_MspInit+0xc4>)
 8000b10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <HAL_SD_MspInit+0xc4>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <HAL_SD_MspInit+0xc4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <HAL_SD_MspInit+0xc4>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <HAL_SD_MspInit+0xc4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_SD_MspInit+0xc4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <HAL_SD_MspInit+0xc4>)
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_SD_MspInit+0xc4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000b5a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <HAL_SD_MspInit+0xc8>)
 8000b78:	f000 fa34 	bl	8000fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <HAL_SD_MspInit+0xcc>)
 8000b98:	f000 fa24 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40012c00 	.word	0x40012c00
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	40020c00 	.word	0x40020c00

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 f8c6 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f004 ffa0 	bl	8005b7c <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20020000 	.word	0x20020000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200000b4 	.word	0x200000b4
 8000c70:	20000a80 	.word	0x20000a80

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc2:	f7ff ffd7 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f004 ff5f 	bl	8005b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff febb 	bl	8000a44 <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000cdc:	080065b4 	.word	0x080065b4
  ldr r2, =_sbss
 8000ce0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000ce4:	20000a80 	.word	0x20000a80

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f931 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f808 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff feb8 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f93b 	bl	8000fca <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f911 	bl	8000f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000028 	.word	0x20000028
 8000d88:	20000030 	.word	0x20000030
 8000d8c:	2000002c 	.word	0x2000002c

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000030 	.word	0x20000030
 8000db4:	20000604 	.word	0x20000604

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000604 	.word	0x20000604

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000030 	.word	0x20000030

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff47 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff5c 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff8e 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffb0 	bl	8000f38 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e16b      	b.n	80012d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 815a 	bne.w	80012d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80b4 	beq.w	80012d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b60      	ldr	r3, [pc, #384]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a5f      	ldr	r2, [pc, #380]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001186:	4a5b      	ldr	r2, [pc, #364]	; (80012f4 <HAL_GPIO_Init+0x310>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x314>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d02b      	beq.n	800120a <HAL_GPIO_Init+0x226>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a51      	ldr	r2, [pc, #324]	; (80012fc <HAL_GPIO_Init+0x318>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x222>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a50      	ldr	r2, [pc, #320]	; (8001300 <HAL_GPIO_Init+0x31c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x21e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <HAL_GPIO_Init+0x320>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x21a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4e      	ldr	r2, [pc, #312]	; (8001308 <HAL_GPIO_Init+0x324>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x216>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4d      	ldr	r2, [pc, #308]	; (800130c <HAL_GPIO_Init+0x328>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x212>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4c      	ldr	r2, [pc, #304]	; (8001310 <HAL_GPIO_Init+0x32c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x20e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4b      	ldr	r2, [pc, #300]	; (8001314 <HAL_GPIO_Init+0x330>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x20a>
 80011ea:	2307      	movs	r3, #7
 80011ec:	e00e      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011ee:	2308      	movs	r3, #8
 80011f0:	e00c      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011f2:	2306      	movs	r3, #6
 80011f4:	e00a      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x228>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x228>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x228>
 800120a:	2300      	movs	r3, #0
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121c:	4935      	ldr	r1, [pc, #212]	; (80012f4 <HAL_GPIO_Init+0x310>)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_GPIO_Init+0x334>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124e:	4a32      	ldr	r2, [pc, #200]	; (8001318 <HAL_GPIO_Init+0x334>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_GPIO_Init+0x334>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <HAL_GPIO_Init+0x334>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_GPIO_Init+0x334>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a2:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_GPIO_Init+0x334>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_GPIO_Init+0x334>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_GPIO_Init+0x334>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	f67f ae90 	bls.w	8001000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40013800 	.word	0x40013800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020800 	.word	0x40020800
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40021000 	.word	0x40021000
 800130c:	40021400 	.word	0x40021400
 8001310:	40021800 	.word	0x40021800
 8001314:	40021c00 	.word	0x40021c00
 8001318:	40013c00 	.word	0x40013c00

0800131c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e264      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d075      	beq.n	8001426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800133a:	4ba3      	ldr	r3, [pc, #652]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b04      	cmp	r3, #4
 8001344:	d00c      	beq.n	8001360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001346:	4ba0      	ldr	r3, [pc, #640]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134e:	2b08      	cmp	r3, #8
 8001350:	d112      	bne.n	8001378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001352:	4b9d      	ldr	r3, [pc, #628]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800135e:	d10b      	bne.n	8001378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	4b99      	ldr	r3, [pc, #612]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d05b      	beq.n	8001424 <HAL_RCC_OscConfig+0x108>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d157      	bne.n	8001424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e23f      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001380:	d106      	bne.n	8001390 <HAL_RCC_OscConfig+0x74>
 8001382:	4b91      	ldr	r3, [pc, #580]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a90      	ldr	r2, [pc, #576]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e01d      	b.n	80013cc <HAL_RCC_OscConfig+0xb0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x98>
 800139a:	4b8b      	ldr	r3, [pc, #556]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a8a      	ldr	r2, [pc, #552]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a87      	ldr	r2, [pc, #540]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0xb0>
 80013b4:	4b84      	ldr	r3, [pc, #528]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a83      	ldr	r2, [pc, #524]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b81      	ldr	r3, [pc, #516]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a80      	ldr	r2, [pc, #512]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fcf0 	bl	8000db8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fcec 	bl	8000db8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e204      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	4b76      	ldr	r3, [pc, #472]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0xc0>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fcdc 	bl	8000db8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fcd8 	bl	8000db8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e1f0      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0xe8>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d063      	beq.n	80014fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001432:	4b65      	ldr	r3, [pc, #404]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143e:	4b62      	ldr	r3, [pc, #392]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001446:	2b08      	cmp	r3, #8
 8001448:	d11c      	bne.n	8001484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d116      	bne.n	8001484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	4b5c      	ldr	r3, [pc, #368]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x152>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e1c4      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4952      	ldr	r1, [pc, #328]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	e03a      	b.n	80014fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d020      	beq.n	80014ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <HAL_RCC_OscConfig+0x2b0>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fc91 	bl	8000db8 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fc8d 	bl	8000db8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e1a5      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4940      	ldr	r1, [pc, #256]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]
 80014cc:	e015      	b.n	80014fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ce:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <HAL_RCC_OscConfig+0x2b0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc70 	bl	8000db8 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc6c 	bl	8000db8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e184      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d030      	beq.n	8001568 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d016      	beq.n	800153c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <HAL_RCC_OscConfig+0x2b4>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fc50 	bl	8000db8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fc4c 	bl	8000db8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e164      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x200>
 800153a:	e015      	b.n	8001568 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <HAL_RCC_OscConfig+0x2b4>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fc39 	bl	8000db8 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154a:	f7ff fc35 	bl	8000db8 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e14d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a0 	beq.w	80016b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10f      	bne.n	80015a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_RCC_OscConfig+0x2b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d121      	bne.n	80015f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_RCC_OscConfig+0x2b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_RCC_OscConfig+0x2b8>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff fbfb 	bl	8000db8 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e011      	b.n	80015ea <HAL_RCC_OscConfig+0x2ce>
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	42470000 	.word	0x42470000
 80015d0:	42470e80 	.word	0x42470e80
 80015d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d8:	f7ff fbee 	bl	8000db8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e106      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b85      	ldr	r3, [pc, #532]	; (8001800 <HAL_RCC_OscConfig+0x4e4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d106      	bne.n	800160c <HAL_RCC_OscConfig+0x2f0>
 80015fe:	4b81      	ldr	r3, [pc, #516]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	4a80      	ldr	r2, [pc, #512]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6713      	str	r3, [r2, #112]	; 0x70
 800160a:	e01c      	b.n	8001646 <HAL_RCC_OscConfig+0x32a>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d10c      	bne.n	800162e <HAL_RCC_OscConfig+0x312>
 8001614:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	4a7a      	ldr	r2, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6713      	str	r3, [r2, #112]	; 0x70
 8001620:	4b78      	ldr	r3, [pc, #480]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	4a77      	ldr	r2, [pc, #476]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6713      	str	r3, [r2, #112]	; 0x70
 800162c:	e00b      	b.n	8001646 <HAL_RCC_OscConfig+0x32a>
 800162e:	4b75      	ldr	r3, [pc, #468]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4a74      	ldr	r2, [pc, #464]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6713      	str	r3, [r2, #112]	; 0x70
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	4a71      	ldr	r2, [pc, #452]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d015      	beq.n	800167a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164e:	f7ff fbb3 	bl	8000db8 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001654:	e00a      	b.n	800166c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff fbaf 	bl	8000db8 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	; 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e0c5      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166c:	4b65      	ldr	r3, [pc, #404]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ee      	beq.n	8001656 <HAL_RCC_OscConfig+0x33a>
 8001678:	e014      	b.n	80016a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167a:	f7ff fb9d 	bl	8000db8 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fb99 	bl	8000db8 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e0af      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001698:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ee      	bne.n	8001682 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d105      	bne.n	80016b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016aa:	4b56      	ldr	r3, [pc, #344]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a55      	ldr	r2, [pc, #340]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 80016b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 809b 	beq.w	80017f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d05c      	beq.n	8001786 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d141      	bne.n	8001758 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d4:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <HAL_RCC_OscConfig+0x4ec>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fb6d 	bl	8000db8 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff fb69 	bl	8000db8 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e081      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	019b      	lsls	r3, r3, #6
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	041b      	lsls	r3, r3, #16
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	061b      	lsls	r3, r3, #24
 8001724:	4937      	ldr	r1, [pc, #220]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <HAL_RCC_OscConfig+0x4ec>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fb42 	bl	8000db8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fb3e 	bl	8000db8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e056      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x41c>
 8001756:	e04e      	b.n	80017f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_RCC_OscConfig+0x4ec>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff fb2b 	bl	8000db8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff fb27 	bl	8000db8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e03f      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x44a>
 8001784:	e037      	b.n	80017f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e032      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_RCC_OscConfig+0x4e8>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d028      	beq.n	80017f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d121      	bne.n	80017f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d11a      	bne.n	80017f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c2:	4013      	ands	r3, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d111      	bne.n	80017f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	3b01      	subs	r3, #1
 80017dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40007000 	.word	0x40007000
 8001804:	40023800 	.word	0x40023800
 8001808:	42470060 	.word	0x42470060

0800180c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0cc      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d90c      	bls.n	8001848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0b8      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800186a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	494d      	ldr	r1, [pc, #308]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d044      	beq.n	800192c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d119      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e07f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e06f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e067      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4934      	ldr	r1, [pc, #208]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018fc:	f7ff fa5c 	bl	8000db8 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff fa58 	bl	8000db8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e04f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d20c      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e032      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4916      	ldr	r1, [pc, #88]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001992:	f000 f821 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	490a      	ldr	r1, [pc, #40]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f9bc 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00
 80019c8:	40023800 	.word	0x40023800
 80019cc:	080064cc 	.word	0x080064cc
 80019d0:	20000028 	.word	0x20000028
 80019d4:	2000002c 	.word	0x2000002c

080019d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	2300      	movs	r3, #0
 80019ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f0:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d00d      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x40>
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	f200 80bd 	bhi.w	8001b7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x34>
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a0a:	e0b7      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a0c:	4b61      	ldr	r3, [pc, #388]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a0e:	60bb      	str	r3, [r7, #8]
       break;
 8001a10:	e0b7      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a12:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a14:	60bb      	str	r3, [r7, #8]
      break;
 8001a16:	e0b4      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a18:	4b5d      	ldr	r3, [pc, #372]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a22:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d04d      	beq.n	8001aca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	461a      	mov	r2, r3
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	ea02 0800 	and.w	r8, r2, r0
 8001a46:	ea03 0901 	and.w	r9, r3, r1
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	4649      	mov	r1, r9
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	014b      	lsls	r3, r1, #5
 8001a58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a5c:	0142      	lsls	r2, r0, #5
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	ebb0 0008 	subs.w	r0, r0, r8
 8001a66:	eb61 0109 	sbc.w	r1, r1, r9
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	018b      	lsls	r3, r1, #6
 8001a74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a78:	0182      	lsls	r2, r0, #6
 8001a7a:	1a12      	subs	r2, r2, r0
 8001a7c:	eb63 0301 	sbc.w	r3, r3, r1
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	00d9      	lsls	r1, r3, #3
 8001a8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a8e:	00d0      	lsls	r0, r2, #3
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	eb12 0208 	adds.w	r2, r2, r8
 8001a98:	eb43 0309 	adc.w	r3, r3, r9
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0259      	lsls	r1, r3, #9
 8001aa6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001aaa:	0250      	lsls	r0, r2, #9
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	f7fe fbd8 	bl	8000270 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e04a      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	099b      	lsrs	r3, r3, #6
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	ea02 0400 	and.w	r4, r2, r0
 8001ae2:	ea03 0501 	and.w	r5, r3, r1
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4629      	mov	r1, r5
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	014b      	lsls	r3, r1, #5
 8001af4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001af8:	0142      	lsls	r2, r0, #5
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	1b00      	subs	r0, r0, r4
 8001b00:	eb61 0105 	sbc.w	r1, r1, r5
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	018b      	lsls	r3, r1, #6
 8001b0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b12:	0182      	lsls	r2, r0, #6
 8001b14:	1a12      	subs	r2, r2, r0
 8001b16:	eb63 0301 	sbc.w	r3, r3, r1
 8001b1a:	f04f 0000 	mov.w	r0, #0
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	00d9      	lsls	r1, r3, #3
 8001b24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b28:	00d0      	lsls	r0, r2, #3
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	1912      	adds	r2, r2, r4
 8001b30:	eb45 0303 	adc.w	r3, r5, r3
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	0299      	lsls	r1, r3, #10
 8001b3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b42:	0290      	lsls	r0, r2, #10
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	f7fe fb8c 	bl	8000270 <__aeabi_uldivmod>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	60bb      	str	r3, [r7, #8]
      break;
 8001b7a:	e002      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b7e:	60bb      	str	r3, [r7, #8]
      break;
 8001b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b82:	68bb      	ldr	r3, [r7, #8]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	00f42400 	.word	0x00f42400
 8001b98:	007a1200 	.word	0x007a1200

08001b9c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e022      	b.n	8001bf4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe ff8f 	bl	8000ae4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f814 	bl	8001bfc <HAL_SD_InitCard>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00a      	b.n	8001bf4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b08e      	sub	sp, #56	; 0x38
 8001c00:	af04      	add	r7, sp, #16
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001c18:	2376      	movs	r3, #118	; 0x76
 8001c1a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681d      	ldr	r5, [r3, #0]
 8001c20:	466c      	mov	r4, sp
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c34:	4628      	mov	r0, r5
 8001c36:	f000 ff35 	bl	8002aa4 <SDIO_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e04c      	b.n	8001ce6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_SD_InitCard+0xf4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 ff6d 	bl	8002b36 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_SD_InitCard+0xf4>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fe68 	bl	8002938 <SD_PowerON>
 8001c68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02e      	b.n	8001ce6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fd89 	bl	80027a0 <SD_InitCard>
 8001c8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e01b      	b.n	8001ce6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 ffd0 	bl	8002c5c <SDMMC_CmdBlockLength>
 8001cbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00f      	beq.n	8001ce4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_SD_InitCard+0xf8>)
 8001cca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bdb0      	pop	{r4, r5, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	422580a0 	.word	0x422580a0
 8001cf4:	004005ff 	.word	0x004005ff

08001cf8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b092      	sub	sp, #72	; 0x48
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001d06:	f7ff f857 	bl	8000db8 <HAL_GetTick>
 8001d0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1bd      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	f040 81b0 	bne.w	8002098 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	441a      	add	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d907      	bls.n	8001d5c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e1a4      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d002      	beq.n	8001d7a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d86:	2390      	movs	r3, #144	; 0x90
 8001d88:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001d92:	2301      	movs	r3, #1
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f107 0214 	add.w	r2, r7, #20
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 ff2f 	bl	8002c04 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d90a      	bls.n	8001dc2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2202      	movs	r2, #2
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 ff93 	bl	8002ce4 <SDMMC_CmdReadMultiBlock>
 8001dbe:	6478      	str	r0, [r7, #68]	; 0x44
 8001dc0:	e009      	b.n	8001dd6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 ff66 	bl	8002ca0 <SDMMC_CmdReadSingleBlock>
 8001dd4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d012      	beq.n	8001e02 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <HAL_SD_ReadBlocks+0x2d4>)
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dea:	431a      	orrs	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e151      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001e06:	e061      	b.n	8001ecc <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03c      	beq.n	8001e90 <HAL_SD_ReadBlocks+0x198>
 8001e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d039      	beq.n	8001e90 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e20:	e033      	b.n	8001e8a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fe67 	bl	8002afa <SDIO_ReadFIFO>
 8001e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e38:	3301      	adds	r3, #1
 8001e3a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4e:	3301      	adds	r3, #1
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e54:	3b01      	subs	r3, #1
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	0c1b      	lsrs	r3, r3, #16
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	3301      	adds	r3, #1
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e70:	0e1b      	lsrs	r3, r3, #24
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e80:	3b01      	subs	r3, #1
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e86:	3301      	adds	r3, #1
 8001e88:	643b      	str	r3, [r7, #64]	; 0x40
 8001e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8c:	2b07      	cmp	r3, #7
 8001e8e:	d9c8      	bls.n	8001e22 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001e90:	f7fe ff92 	bl	8000db8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d902      	bls.n	8001ea6 <HAL_SD_ReadBlocks+0x1ae>
 8001ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d112      	bne.n	8001ecc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_SD_ReadBlocks+0x2d4>)
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0ec      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed2:	f240 332a 	movw	r3, #810	; 0x32a
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d095      	beq.n	8001e08 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d022      	beq.n	8001f30 <HAL_SD_ReadBlocks+0x238>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d91f      	bls.n	8001f30 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d01b      	beq.n	8001f30 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 ff57 	bl	8002db0 <SDMMC_CmdStopTransfer>
 8001f02:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d012      	beq.n	8001f30 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <HAL_SD_ReadBlocks+0x2d4>)
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0ba      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d012      	beq.n	8001f64 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <HAL_SD_ReadBlocks+0x2d4>)
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	f043 0208 	orr.w	r2, r3, #8
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0a0      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d012      	beq.n	8001f98 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <HAL_SD_ReadBlocks+0x2d4>)
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e086      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d063      	beq.n	800206e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <HAL_SD_ReadBlocks+0x2d4>)
 8001fac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	f043 0220 	orr.w	r2, r3, #32
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e06c      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
 8001fcc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fd90 	bl	8002afa <SDIO_ReadFIFO>
 8001fda:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fec:	3b01      	subs	r3, #1
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002002:	3b01      	subs	r3, #1
 8002004:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	b2da      	uxtb	r2, r3
 800200c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002012:	3301      	adds	r3, #1
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002018:	3b01      	subs	r3, #1
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201e:	0e1b      	lsrs	r3, r3, #24
 8002020:	b2da      	uxtb	r2, r3
 8002022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002024:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	3301      	adds	r3, #1
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800202c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202e:	3b01      	subs	r3, #1
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002032:	f7fe fec1 	bl	8000db8 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800203e:	429a      	cmp	r2, r3
 8002040:	d902      	bls.n	8002048 <HAL_SD_ReadBlocks+0x350>
 8002042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002044:	2b00      	cmp	r3, #0
 8002046:	d112      	bne.n	800206e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <HAL_SD_ReadBlocks+0x3b8>)
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002054:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e01b      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_SD_ReadBlocks+0x38a>
 800207c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1a6      	bne.n	8001fd0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f240 523a 	movw	r2, #1338	; 0x53a
 800208a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e006      	b.n	80020a6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3748      	adds	r7, #72	; 0x48
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	004005ff 	.word	0x004005ff

080020b4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b092      	sub	sp, #72	; 0x48
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80020c2:	f7fe fe79 	bl	8000db8 <HAL_GetTick>
 80020c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d107      	bne.n	80020e6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e166      	b.n	80023b4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f040 8159 	bne.w	80023a6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80020fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	441a      	add	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	429a      	cmp	r2, r3
 8002106:	d907      	bls.n	8002118 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e14d      	b.n	80023b4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2203      	movs	r2, #3
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	2b01      	cmp	r3, #1
 800212e:	d002      	beq.n	8002136 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	025b      	lsls	r3, r3, #9
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	025b      	lsls	r3, r3, #9
 8002140:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002142:	2390      	movs	r3, #144	; 0x90
 8002144:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800214a:	2300      	movs	r3, #0
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800214e:	2301      	movs	r3, #1
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f107 0218 	add.w	r2, r7, #24
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fd51 	bl	8002c04 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d90a      	bls.n	800217e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fdf9 	bl	8002d6c <SDMMC_CmdWriteMultiBlock>
 800217a:	6478      	str	r0, [r7, #68]	; 0x44
 800217c:	e009      	b.n	8002192 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2210      	movs	r2, #16
 8002182:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fdcc 	bl	8002d28 <SDMMC_CmdWriteSingleBlock>
 8002190:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002194:	2b00      	cmp	r3, #0
 8002196:	d012      	beq.n	80021be <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a87      	ldr	r2, [pc, #540]	; (80023bc <HAL_SD_WriteBlocks+0x308>)
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a6:	431a      	orrs	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0fa      	b.n	80023b4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80021c2:	e065      	b.n	8002290 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d040      	beq.n	8002254 <HAL_SD_WriteBlocks+0x1a0>
 80021d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d03d      	beq.n	8002254 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80021d8:	2300      	movs	r3, #0
 80021da:	643b      	str	r3, [r7, #64]	; 0x40
 80021dc:	e037      	b.n	800224e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	3301      	adds	r3, #1
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	3b01      	subs	r3, #1
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80021fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fe:	3301      	adds	r3, #1
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002204:	3b01      	subs	r3, #1
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	3301      	adds	r3, #1
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800221a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221c:	3b01      	subs	r3, #1
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	061a      	lsls	r2, r3, #24
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	3301      	adds	r3, #1
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002234:	3b01      	subs	r3, #1
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f107 0214 	add.w	r2, r7, #20
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fc66 	bl	8002b14 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224a:	3301      	adds	r3, #1
 800224c:	643b      	str	r3, [r7, #64]	; 0x40
 800224e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002250:	2b07      	cmp	r3, #7
 8002252:	d9c4      	bls.n	80021de <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002254:	f7fe fdb0 	bl	8000db8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002260:	429a      	cmp	r2, r3
 8002262:	d902      	bls.n	800226a <HAL_SD_WriteBlocks+0x1b6>
 8002264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002266:	2b00      	cmp	r3, #0
 8002268:	d112      	bne.n	8002290 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a53      	ldr	r2, [pc, #332]	; (80023bc <HAL_SD_WriteBlocks+0x308>)
 8002270:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e091      	b.n	80023b4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002296:	f240 331a 	movw	r3, #794	; 0x31a
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d091      	beq.n	80021c4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d022      	beq.n	80022f4 <HAL_SD_WriteBlocks+0x240>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d91f      	bls.n	80022f4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d01b      	beq.n	80022f4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fd75 	bl	8002db0 <SDMMC_CmdStopTransfer>
 80022c6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80022c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d012      	beq.n	80022f4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a3a      	ldr	r2, [pc, #232]	; (80023bc <HAL_SD_WriteBlocks+0x308>)
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022dc:	431a      	orrs	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e05f      	b.n	80023b4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d012      	beq.n	8002328 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2d      	ldr	r2, [pc, #180]	; (80023bc <HAL_SD_WriteBlocks+0x308>)
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	f043 0208 	orr.w	r2, r3, #8
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e045      	b.n	80023b4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d012      	beq.n	800235c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a20      	ldr	r2, [pc, #128]	; (80023bc <HAL_SD_WriteBlocks+0x308>)
 800233c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	f043 0202 	orr.w	r2, r3, #2
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e02b      	b.n	80023b4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d012      	beq.n	8002390 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <HAL_SD_WriteBlocks+0x308>)
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e011      	b.n	80023b4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f240 523a 	movw	r2, #1338	; 0x53a
 8002398:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e006      	b.n	80023b4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
  }
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3748      	adds	r7, #72	; 0x48
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	004005ff 	.word	0x004005ff

080023c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ce:	0f9b      	lsrs	r3, r3, #30
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023da:	0e9b      	lsrs	r3, r3, #26
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ec:	0e1b      	lsrs	r3, r3, #24
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	b2da      	uxtb	r2, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b2da      	uxtb	r2, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002416:	b2da      	uxtb	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002420:	0d1b      	lsrs	r3, r3, #20
 8002422:	b29a      	uxth	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	b2da      	uxtb	r2, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243e:	0bdb      	lsrs	r3, r3, #15
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002450:	0b9b      	lsrs	r3, r3, #14
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002462:	0b5b      	lsrs	r3, r3, #13
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	b2da      	uxtb	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002474:	0b1b      	lsrs	r3, r3, #12
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2200      	movs	r2, #0
 8002486:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	2b00      	cmp	r3, #0
 800248e:	d163      	bne.n	8002558 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002494:	009a      	lsls	r2, r3, #2
 8002496:	f640 73fc 	movw	r3, #4092	; 0xffc
 800249a:	4013      	ands	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80024a0:	0f92      	lsrs	r2, r2, #30
 80024a2:	431a      	orrs	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ac:	0edb      	lsrs	r3, r3, #27
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024be:	0e1b      	lsrs	r3, r3, #24
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d0:	0d5b      	lsrs	r3, r3, #21
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e2:	0c9b      	lsrs	r3, r3, #18
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f4:	0bdb      	lsrs	r3, r3, #15
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	7e1b      	ldrb	r3, [r3, #24]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	3302      	adds	r3, #2
 8002518:	2201      	movs	r2, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002522:	fb02 f203 	mul.w	r2, r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	7a1b      	ldrb	r3, [r3, #8]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	2201      	movs	r2, #1
 8002536:	409a      	lsls	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002544:	0a52      	lsrs	r2, r2, #9
 8002546:	fb02 f203 	mul.w	r2, r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002554:	661a      	str	r2, [r3, #96]	; 0x60
 8002556:	e031      	b.n	80025bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	2b01      	cmp	r3, #1
 800255e:	d11d      	bne.n	800259c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800256e:	0c1b      	lsrs	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	3301      	adds	r3, #1
 800257c:	029a      	lsls	r2, r3, #10
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002590:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	661a      	str	r2, [r3, #96]	; 0x60
 800259a:	e00f      	b.n	80025bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_SD_GetCardCSD+0x344>)
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e09d      	b.n	80026f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c0:	0b9b      	lsrs	r3, r3, #14
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d2:	09db      	lsrs	r3, r3, #7
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	0fdb      	lsrs	r3, r3, #31
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	0f5b      	lsrs	r3, r3, #29
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	b2da      	uxtb	r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	b2da      	uxtb	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	0d9b      	lsrs	r3, r3, #22
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	b2da      	uxtb	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	0d5b      	lsrs	r3, r3, #21
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	0c1b      	lsrs	r3, r3, #16
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	b2da      	uxtb	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	0bdb      	lsrs	r3, r3, #15
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	0b9b      	lsrs	r3, r3, #14
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	0b5b      	lsrs	r3, r3, #13
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	b2da      	uxtb	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	0b1b      	lsrs	r3, r3, #12
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	0a9b      	lsrs	r3, r3, #10
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	004005ff 	.word	0x004005ff

08002708 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	4619      	mov	r1, r3
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f96e 	bl	8002a54 <SD_SendStatus>
 8002778:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	0a5b      	lsrs	r3, r3, #9
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002796:	693b      	ldr	r3, [r7, #16]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b094      	sub	sp, #80	; 0x50
 80027a4:	af04      	add	r7, sp, #16
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80027a8:	2301      	movs	r3, #1
 80027aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f9cf 	bl	8002b54 <SDIO_GetPowerState>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80027bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027c0:	e0b6      	b.n	8002930 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d02f      	beq.n	800282a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fbb5 	bl	8002f3e <SDMMC_CmdSendCID>
 80027d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80027d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80027dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027de:	e0a7      	b.n	8002930 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f9f9 	bl	8002bde <SDIO_GetResponse>
 80027ec:	4602      	mov	r2, r0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2104      	movs	r1, #4
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f9f0 	bl	8002bde <SDIO_GetResponse>
 80027fe:	4602      	mov	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2108      	movs	r1, #8
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f9e7 	bl	8002bde <SDIO_GetResponse>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	210c      	movs	r1, #12
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f9de 	bl	8002bde <SDIO_GetResponse>
 8002822:	4602      	mov	r2, r0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	2b03      	cmp	r3, #3
 8002830:	d00d      	beq.n	800284e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f107 020e 	add.w	r2, r7, #14
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fbbb 	bl	8002fb8 <SDMMC_CmdSetRelAdd>
 8002842:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <SD_InitCard+0xae>
    {
      return errorstate;
 800284a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284c:	e070      	b.n	8002930 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	2b03      	cmp	r3, #3
 8002854:	d036      	beq.n	80028c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 fb85 	bl	8002f7a <SDMMC_CmdSendCSD>
 8002870:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <SD_InitCard+0xdc>
    {
      return errorstate;
 8002878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287a:	e059      	b.n	8002930 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f9ab 	bl	8002bde <SDIO_GetResponse>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2104      	movs	r1, #4
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f9a2 	bl	8002bde <SDIO_GetResponse>
 800289a:	4602      	mov	r2, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2108      	movs	r1, #8
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f999 	bl	8002bde <SDIO_GetResponse>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	210c      	movs	r1, #12
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f990 	bl	8002bde <SDIO_GetResponse>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2104      	movs	r1, #4
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f987 	bl	8002bde <SDIO_GetResponse>
 80028d0:	4603      	mov	r3, r0
 80028d2:	0d1a      	lsrs	r2, r3, #20
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80028d8:	f107 0310 	add.w	r3, r7, #16
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fd6e 	bl	80023c0 <HAL_SD_GetCardCSD>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028ee:	e01f      	b.n	8002930 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	461a      	mov	r2, r3
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	4608      	mov	r0, r1
 8002902:	f000 fa77 	bl	8002df4 <SDMMC_CmdSelDesel>
 8002906:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SD_InitCard+0x172>
  {
    return errorstate;
 800290e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002910:	e00e      	b.n	8002930 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681d      	ldr	r5, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	466c      	mov	r4, sp
 800291a:	f103 0210 	add.w	r2, r3, #16
 800291e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002920:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002924:	3304      	adds	r3, #4
 8002926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002928:	4628      	mov	r0, r5
 800292a:	f000 f8bb 	bl	8002aa4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3740      	adds	r7, #64	; 0x40
 8002934:	46bd      	mov	sp, r7
 8002936:	bdb0      	pop	{r4, r5, r7, pc}

08002938 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fa72 	bl	8002e3a <SDMMC_CmdGoIdleState>
 8002956:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <SD_PowerON+0x2a>
  {
    return errorstate;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	e072      	b.n	8002a48 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fa85 	bl	8002e76 <SDMMC_CmdOperCond>
 800296c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fa5b 	bl	8002e3a <SDMMC_CmdGoIdleState>
 8002984:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <SD_PowerON+0x5e>
    {
      return errorstate;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	e05b      	b.n	8002a48 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299a:	2b01      	cmp	r3, #1
 800299c:	d137      	bne.n	8002a0e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fa85 	bl	8002eb4 <SDMMC_CmdAppCommand>
 80029aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d02d      	beq.n	8002a0e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80029b6:	e047      	b.n	8002a48 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fa78 	bl	8002eb4 <SDMMC_CmdAppCommand>
 80029c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	e03b      	b.n	8002a48 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	491e      	ldr	r1, [pc, #120]	; (8002a50 <SD_PowerON+0x118>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fa8e 	bl	8002ef8 <SDMMC_CmdAppOperCommand>
 80029dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80029e8:	e02e      	b.n	8002a48 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 f8f4 	bl	8002bde <SDIO_GetResponse>
 80029f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	0fdb      	lsrs	r3, r3, #31
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <SD_PowerON+0xcc>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <SD_PowerON+0xce>
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]

    count++;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d802      	bhi.n	8002a1e <SD_PowerON+0xe6>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0cc      	beq.n	80029b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d902      	bls.n	8002a2e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a2c:	e00c      	b.n	8002a48 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
 8002a3e:	e002      	b.n	8002a46 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	c1100000 	.word	0xc1100000

08002a54 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002a64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a68:	e018      	b.n	8002a9c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f000 fabf 	bl	8002ffa <SDMMC_CmdSendStatus>
 8002a7c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	e009      	b.n	8002a9c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f8a5 	bl	8002bde <SDIO_GetResponse>
 8002a94:	4602      	mov	r2, r0
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	f107 001c 	add.w	r0, r7, #28
 8002ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002aba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002abc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002abe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8002ac2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8002ac6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8002aca:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8002ace:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8002ade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	b004      	add	sp, #16
 8002af8:	4770      	bx	lr

08002afa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2203      	movs	r2, #3
 8002b42:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7fe f943 	bl	8000dd0 <HAL_Delay>
  
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0303 	and.w	r3, r3, #3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002b8e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002b94:	431a      	orrs	r2, r3
                       Command->CPSM);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8002b9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002baa:	f023 030f 	bic.w	r3, r3, #15
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	b2db      	uxtb	r3, r3
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3314      	adds	r3, #20
 8002bec:	461a      	mov	r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
}  
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002c2a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002c30:	431a      	orrs	r2, r3
                       Data->DPSM);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8002c36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0

}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c6e:	2340      	movs	r3, #64	; 0x40
 8002c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff74 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	2110      	movs	r1, #16
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa02 	bl	8003098 <SDMMC_GetCmdResp1>
 8002c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c96:	69fb      	ldr	r3, [r7, #28]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002cae:	2311      	movs	r3, #17
 8002cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002cb2:	2340      	movs	r3, #64	; 0x40
 8002cb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002cc0:	f107 0308 	add.w	r3, r7, #8
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff52 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	2111      	movs	r1, #17
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9e0 	bl	8003098 <SDMMC_GetCmdResp1>
 8002cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002cda:	69fb      	ldr	r3, [r7, #28]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002cf2:	2312      	movs	r3, #18
 8002cf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002cf6:	2340      	movs	r3, #64	; 0x40
 8002cf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d04:	f107 0308 	add.w	r3, r7, #8
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ff30 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	2112      	movs	r1, #18
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f9be 	bl	8003098 <SDMMC_GetCmdResp1>
 8002d1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002d36:	2318      	movs	r3, #24
 8002d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d3a:	2340      	movs	r3, #64	; 0x40
 8002d3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d48:	f107 0308 	add.w	r3, r7, #8
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ff0e 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	2118      	movs	r1, #24
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f99c 	bl	8003098 <SDMMC_GetCmdResp1>
 8002d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002d62:	69fb      	ldr	r3, [r7, #28]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002d7a:	2319      	movs	r3, #25
 8002d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d8c:	f107 0308 	add.w	r3, r7, #8
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff feec 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	2119      	movs	r1, #25
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f97a 	bl	8003098 <SDMMC_GetCmdResp1>
 8002da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002da6:	69fb      	ldr	r3, [r7, #28]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dc0:	2340      	movs	r3, #64	; 0x40
 8002dc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002dce:	f107 0308 	add.w	r3, r7, #8
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fecb 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002dda:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <SDMMC_CmdStopTransfer+0x40>)
 8002ddc:	210c      	movs	r1, #12
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f95a 	bl	8003098 <SDMMC_GetCmdResp1>
 8002de4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002de6:	69fb      	ldr	r3, [r7, #28]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	05f5e100 	.word	0x05f5e100

08002df4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002e04:	2307      	movs	r3, #7
 8002e06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e08:	2340      	movs	r3, #64	; 0x40
 8002e0a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e14:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff fea7 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e26:	2107      	movs	r1, #7
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f935 	bl	8003098 <SDMMC_GetCmdResp1>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b088      	sub	sp, #32
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e58:	f107 0308 	add.w	r3, r7, #8
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fe86 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f8eb 	bl	8003040 <SDMMC_GetCmdError>
 8002e6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b088      	sub	sp, #32
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002e7e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002e84:	2308      	movs	r3, #8
 8002e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e88:	2340      	movs	r3, #64	; 0x40
 8002e8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e96:	f107 0308 	add.w	r3, r7, #8
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff fe67 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fae2 	bl	800346c <SDMMC_GetCmdResp7>
 8002ea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002ec2:	2337      	movs	r3, #55	; 0x37
 8002ec4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ec6:	2340      	movs	r3, #64	; 0x40
 8002ec8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ed4:	f107 0308 	add.w	r3, r7, #8
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fe48 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	2137      	movs	r1, #55	; 0x37
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8d6 	bl	8003098 <SDMMC_GetCmdResp1>
 8002eec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002eee:	69fb      	ldr	r3, [r7, #28]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002f0e:	2329      	movs	r3, #41	; 0x29
 8002f10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f12:	2340      	movs	r3, #64	; 0x40
 8002f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f20:	f107 0308 	add.w	r3, r7, #8
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff fe22 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f9e9 	bl	8003304 <SDMMC_GetCmdResp3>
 8002f32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002f34:	69fb      	ldr	r3, [r7, #28]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b088      	sub	sp, #32
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002f4e:	23c0      	movs	r3, #192	; 0xc0
 8002f50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fe04 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f983 	bl	8003274 <SDMMC_GetCmdResp2>
 8002f6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002f70:	69fb      	ldr	r3, [r7, #28]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002f88:	2309      	movs	r3, #9
 8002f8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002f8c:	23c0      	movs	r3, #192	; 0xc0
 8002f8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff fde5 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f964 	bl	8003274 <SDMMC_GetCmdResp2>
 8002fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002fae:	69fb      	ldr	r3, [r7, #28]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002fca:	2340      	movs	r3, #64	; 0x40
 8002fcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fd8:	f107 0308 	add.w	r3, r7, #8
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fdc6 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f9c9 	bl	8003380 <SDMMC_GetCmdResp6>
 8002fee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b088      	sub	sp, #32
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003008:	230d      	movs	r3, #13
 800300a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800300c:	2340      	movs	r3, #64	; 0x40
 800300e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003018:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800301a:	f107 0308 	add.w	r3, r7, #8
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff fda5 	bl	8002b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	210d      	movs	r1, #13
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f833 	bl	8003098 <SDMMC_GetCmdResp1>
 8003032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003034:	69fb      	ldr	r3, [r7, #28]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <SDMMC_GetCmdError+0x50>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a11      	ldr	r2, [pc, #68]	; (8003094 <SDMMC_GetCmdError+0x54>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a5b      	lsrs	r3, r3, #9
 8003054:	f241 3288 	movw	r2, #5000	; 0x1388
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e5a      	subs	r2, r3, #1
 8003062:	60fa      	str	r2, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800306c:	e009      	b.n	8003082 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f1      	beq.n	800305e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	22c5      	movs	r2, #197	; 0xc5
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000028 	.word	0x20000028
 8003094:	10624dd3 	.word	0x10624dd3

08003098 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	460b      	mov	r3, r1
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80030a6:	4b70      	ldr	r3, [pc, #448]	; (8003268 <SDMMC_GetCmdResp1+0x1d0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a70      	ldr	r2, [pc, #448]	; (800326c <SDMMC_GetCmdResp1+0x1d4>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	0a5a      	lsrs	r2, r3, #9
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	1e5a      	subs	r2, r3, #1
 80030be:	61fa      	str	r2, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80030c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030c8:	e0c9      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ef      	beq.n	80030ba <SDMMC_GetCmdResp1+0x22>
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ea      	bne.n	80030ba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2204      	movs	r2, #4
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80030f6:	2304      	movs	r3, #4
 80030f8:	e0b1      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800310c:	2301      	movs	r3, #1
 800310e:	e0a6      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	22c5      	movs	r2, #197	; 0xc5
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff fd54 	bl	8002bc4 <SDIO_GetCommandResponse>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	7afb      	ldrb	r3, [r7, #11]
 8003122:	4293      	cmp	r3, r2
 8003124:	d001      	beq.n	800312a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003126:	2301      	movs	r3, #1
 8003128:	e099      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800312a:	2100      	movs	r1, #0
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff fd56 	bl	8002bde <SDIO_GetResponse>
 8003132:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4b4e      	ldr	r3, [pc, #312]	; (8003270 <SDMMC_GetCmdResp1+0x1d8>)
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800313e:	2300      	movs	r3, #0
 8003140:	e08d      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	da02      	bge.n	800314e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314c:	e087      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003158:	2340      	movs	r3, #64	; 0x40
 800315a:	e080      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	e079      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003178:	e071      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003188:	e069      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003198:	e061      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80031a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031a8:	e059      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80031b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b8:	e051      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80031c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031c8:	e049      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80031d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031d8:	e041      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80031e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e8:	e039      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80031f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f8:	e031      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003204:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003208:	e029      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003214:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003218:	e021      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003228:	e019      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003238:	e011      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003244:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003248:	e009      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003254:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003258:	e001      	b.n	800325e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800325a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000028 	.word	0x20000028
 800326c:	10624dd3 	.word	0x10624dd3
 8003270:	fdffe008 	.word	0xfdffe008

08003274 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <SDMMC_GetCmdResp2+0x88>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <SDMMC_GetCmdResp2+0x8c>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0a5b      	lsrs	r3, r3, #9
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	60fa      	str	r2, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800329c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80032a0:	e026      	b.n	80032f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ef      	beq.n	8003292 <SDMMC_GetCmdResp2+0x1e>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ea      	bne.n	8003292 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d004      	beq.n	80032d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2204      	movs	r2, #4
 80032cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80032ce:	2304      	movs	r3, #4
 80032d0:	e00e      	b.n	80032f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e003      	b.n	80032f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	22c5      	movs	r2, #197	; 0xc5
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	20000028 	.word	0x20000028
 8003300:	10624dd3 	.word	0x10624dd3

08003304 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <SDMMC_GetCmdResp3+0x74>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1a      	ldr	r2, [pc, #104]	; (800337c <SDMMC_GetCmdResp3+0x78>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0a5b      	lsrs	r3, r3, #9
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e5a      	subs	r2, r3, #1
 8003326:	60fa      	str	r2, [r7, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800332c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003330:	e01b      	b.n	800336a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003336:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ef      	beq.n	8003322 <SDMMC_GetCmdResp3+0x1e>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ea      	bne.n	8003322 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800335e:	2304      	movs	r3, #4
 8003360:	e003      	b.n	800336a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	22c5      	movs	r2, #197	; 0xc5
 8003366:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000028 	.word	0x20000028
 800337c:	10624dd3 	.word	0x10624dd3

08003380 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	460b      	mov	r3, r1
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800338e:	4b35      	ldr	r3, [pc, #212]	; (8003464 <SDMMC_GetCmdResp6+0xe4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a35      	ldr	r2, [pc, #212]	; (8003468 <SDMMC_GetCmdResp6+0xe8>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	0a5b      	lsrs	r3, r3, #9
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	1e5a      	subs	r2, r3, #1
 80033a8:	61fa      	str	r2, [r7, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80033ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80033b2:	e052      	b.n	800345a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ef      	beq.n	80033a4 <SDMMC_GetCmdResp6+0x24>
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ea      	bne.n	80033a4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2204      	movs	r2, #4
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80033e0:	2304      	movs	r3, #4
 80033e2:	e03a      	b.n	800345a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e02f      	b.n	800345a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff fbe2 	bl	8002bc4 <SDIO_GetCommandResponse>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	7afb      	ldrb	r3, [r7, #11]
 8003406:	4293      	cmp	r3, r2
 8003408:	d001      	beq.n	800340e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800340a:	2301      	movs	r3, #1
 800340c:	e025      	b.n	800345a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	22c5      	movs	r2, #197	; 0xc5
 8003412:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003414:	2100      	movs	r1, #0
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff fbe1 	bl	8002bde <SDIO_GetResponse>
 800341c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d106      	bne.n	8003436 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003432:	2300      	movs	r3, #0
 8003434:	e011      	b.n	800345a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003444:	e009      	b.n	800345a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003454:	e001      	b.n	800345a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000028 	.word	0x20000028
 8003468:	10624dd3 	.word	0x10624dd3

0800346c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <SDMMC_GetCmdResp7+0x94>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a22      	ldr	r2, [pc, #136]	; (8003504 <SDMMC_GetCmdResp7+0x98>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0a5b      	lsrs	r3, r3, #9
 8003480:	f241 3288 	movw	r2, #5000	; 0x1388
 8003484:	fb02 f303 	mul.w	r3, r2, r3
 8003488:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1e5a      	subs	r2, r3, #1
 800348e:	60fa      	str	r2, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003494:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003498:	e02c      	b.n	80034f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ef      	beq.n	800348a <SDMMC_GetCmdResp7+0x1e>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ea      	bne.n	800348a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2204      	movs	r2, #4
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80034c6:	2304      	movs	r3, #4
 80034c8:	e014      	b.n	80034f4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d004      	beq.n	80034e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034dc:	2301      	movs	r3, #1
 80034de:	e009      	b.n	80034f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80034f2:	2300      	movs	r3, #0
  
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	20000028 	.word	0x20000028
 8003504:	10624dd3 	.word	0x10624dd3

08003508 <FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void FATFS_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800350c:	4904      	ldr	r1, [pc, #16]	; (8003520 <FATFS_Init+0x18>)
 800350e:	4805      	ldr	r0, [pc, #20]	; (8003524 <FATFS_Init+0x1c>)
 8003510:	f002 fb24 	bl	8005b5c <FATFS_LinkDriver>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <FATFS_Init+0x20>)
 800351a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}
 8003520:	2000060c 	.word	0x2000060c
 8003524:	080064dc 	.word	0x080064dc
 8003528:	20000608 	.word	0x20000608

0800352c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003530:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003546:	f000 f86b 	bl	8003620 <BSP_SD_IsDetected>
 800354a:	4603      	mov	r3, r0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d001      	beq.n	8003554 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e005      	b.n	8003560 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003554:	4804      	ldr	r0, [pc, #16]	; (8003568 <BSP_SD_Init+0x2c>)
 8003556:	f7fe fb21 	bl	8001b9c <HAL_SD_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800355e:	79fb      	ldrb	r3, [r7, #7]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	2000056c 	.word	0x2000056c

0800356c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	4806      	ldr	r0, [pc, #24]	; (80035a4 <BSP_SD_ReadBlocks+0x38>)
 800358a:	f7fe fbb5 	bl	8001cf8 <HAL_SD_ReadBlocks>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003598:	7dfb      	ldrb	r3, [r7, #23]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	2000056c 	.word	0x2000056c

080035a8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	4806      	ldr	r0, [pc, #24]	; (80035e0 <BSP_SD_WriteBlocks+0x38>)
 80035c6:	f7fe fd75 	bl	80020b4 <HAL_SD_WriteBlocks>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	2000056c 	.word	0x2000056c

080035e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80035e8:	4805      	ldr	r0, [pc, #20]	; (8003600 <BSP_SD_GetCardState+0x1c>)
 80035ea:	f7ff f8b9 	bl	8002760 <HAL_SD_GetCardState>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	2000056c 	.word	0x2000056c

08003604 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4803      	ldr	r0, [pc, #12]	; (800361c <BSP_SD_GetCardInfo+0x18>)
 8003610:	f7ff f87a 	bl	8002708 <HAL_SD_GetCardInfo>
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	2000056c 	.word	0x2000056c

08003620 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003626:	2301      	movs	r3, #1
 8003628:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	b2db      	uxtb	r3, r3
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <SD_CheckStatus+0x38>)
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800364c:	f7ff ffca 	bl	80035e4 <BSP_SD_GetCardState>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003656:	4b07      	ldr	r3, [pc, #28]	; (8003674 <SD_CheckStatus+0x38>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4b04      	ldr	r3, [pc, #16]	; (8003674 <SD_CheckStatus+0x38>)
 8003664:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003666:	4b03      	ldr	r3, [pc, #12]	; (8003674 <SD_CheckStatus+0x38>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b2db      	uxtb	r3, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000031 	.word	0x20000031

08003678 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <SD_initialize+0x38>)
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003688:	f7ff ff58 	bl	800353c <BSP_SD_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ffd1 	bl	800363c <SD_CheckStatus>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <SD_initialize+0x38>)
 80036a0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80036a2:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <SD_initialize+0x38>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b2db      	uxtb	r3, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000031 	.word	0x20000031

080036b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff ffbb 	bl	800363c <SD_CheckStatus>
 80036c6:	4603      	mov	r3, r0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4603      	mov	r3, r0
 80036de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80036e4:	f04f 33ff 	mov.w	r3, #4294967295
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	68b8      	ldr	r0, [r7, #8]
 80036ee:	f7ff ff3d 	bl	800356c <BSP_SD_ReadBlocks>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80036f8:	bf00      	nop
 80036fa:	f7ff ff73 	bl	80035e4 <BSP_SD_GetCardState>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1fa      	bne.n	80036fa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003708:	7dfb      	ldrb	r3, [r7, #23]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	4603      	mov	r3, r0
 8003720:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	68b8      	ldr	r0, [r7, #8]
 8003730:	f7ff ff3a 	bl	80035a8 <BSP_SD_WriteBlocks>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d107      	bne.n	800374a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800373a:	bf00      	nop
 800373c:	f7ff ff52 	bl	80035e4 <BSP_SD_GetCardState>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1fa      	bne.n	800373c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800374a:	7dfb      	ldrb	r3, [r7, #23]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	603a      	str	r2, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
 8003760:	460b      	mov	r3, r1
 8003762:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800376a:	4b25      	ldr	r3, [pc, #148]	; (8003800 <SD_ioctl+0xac>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <SD_ioctl+0x28>
 8003778:	2303      	movs	r3, #3
 800377a:	e03c      	b.n	80037f6 <SD_ioctl+0xa2>

  switch (cmd)
 800377c:	79bb      	ldrb	r3, [r7, #6]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d834      	bhi.n	80037ec <SD_ioctl+0x98>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <SD_ioctl+0x34>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	08003799 	.word	0x08003799
 800378c:	080037a1 	.word	0x080037a1
 8003790:	080037b9 	.word	0x080037b9
 8003794:	080037d3 	.word	0x080037d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800379e:	e028      	b.n	80037f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff2d 	bl	8003604 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80037aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80037b6:	e01c      	b.n	80037f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff21 	bl	8003604 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80037d0:	e00f      	b.n	80037f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80037d2:	f107 030c 	add.w	r3, r7, #12
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ff14 	bl	8003604 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	0a5a      	lsrs	r2, r3, #9
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80037ea:	e002      	b.n	80037f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80037ec:	2304      	movs	r3, #4
 80037ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80037f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3730      	adds	r7, #48	; 0x30
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000031 	.word	0x20000031

08003804 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	4a08      	ldr	r2, [pc, #32]	; (8003834 <disk_status+0x30>)
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	79fa      	ldrb	r2, [r7, #7]
 800381c:	4905      	ldr	r1, [pc, #20]	; (8003834 <disk_status+0x30>)
 800381e:	440a      	add	r2, r1
 8003820:	7a12      	ldrb	r2, [r2, #8]
 8003822:	4610      	mov	r0, r2
 8003824:	4798      	blx	r3
 8003826:	4603      	mov	r3, r0
 8003828:	73fb      	strb	r3, [r7, #15]
  return stat;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	200000e0 	.word	0x200000e0

08003838 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <disk_initialize+0x48>)
 800384a:	5cd3      	ldrb	r3, [r2, r3]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d111      	bne.n	8003874 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <disk_initialize+0x48>)
 8003854:	2101      	movs	r1, #1
 8003856:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <disk_initialize+0x48>)
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	79fa      	ldrb	r2, [r7, #7]
 8003866:	4906      	ldr	r1, [pc, #24]	; (8003880 <disk_initialize+0x48>)
 8003868:	440a      	add	r2, r1
 800386a:	7a12      	ldrb	r2, [r2, #8]
 800386c:	4610      	mov	r0, r2
 800386e:	4798      	blx	r3
 8003870:	4603      	mov	r3, r0
 8003872:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200000e0 	.word	0x200000e0

08003884 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <disk_read+0x3c>)
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	689c      	ldr	r4, [r3, #8]
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	4a07      	ldr	r2, [pc, #28]	; (80038c0 <disk_read+0x3c>)
 80038a4:	4413      	add	r3, r2
 80038a6:	7a18      	ldrb	r0, [r3, #8]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	47a0      	blx	r4
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd90      	pop	{r4, r7, pc}
 80038be:	bf00      	nop
 80038c0:	200000e0 	.word	0x200000e0

080038c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	4603      	mov	r3, r0
 80038d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <disk_write+0x3c>)
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68dc      	ldr	r4, [r3, #12]
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <disk_write+0x3c>)
 80038e4:	4413      	add	r3, r2
 80038e6:	7a18      	ldrb	r0, [r3, #8]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	47a0      	blx	r4
 80038f0:	4603      	mov	r3, r0
 80038f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	bf00      	nop
 8003900:	200000e0 	.word	0x200000e0

08003904 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	603a      	str	r2, [r7, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
 8003910:	460b      	mov	r3, r1
 8003912:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <disk_ioctl+0x38>)
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	79fa      	ldrb	r2, [r7, #7]
 8003922:	4906      	ldr	r1, [pc, #24]	; (800393c <disk_ioctl+0x38>)
 8003924:	440a      	add	r2, r1
 8003926:	7a10      	ldrb	r0, [r2, #8]
 8003928:	79b9      	ldrb	r1, [r7, #6]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	4798      	blx	r3
 800392e:	4603      	mov	r3, r0
 8003930:	73fb      	strb	r3, [r7, #15]
  return res;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200000e0 	.word	0x200000e0

08003940 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3301      	adds	r3, #1
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003950:	89fb      	ldrh	r3, [r7, #14]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	b21a      	sxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b21b      	sxth	r3, r3
 800395c:	4313      	orrs	r3, r2
 800395e:	b21b      	sxth	r3, r3
 8003960:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003962:	89fb      	ldrh	r3, [r7, #14]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3303      	adds	r3, #3
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	3202      	adds	r2, #2
 8003988:	7812      	ldrb	r2, [r2, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	3201      	adds	r2, #1
 8003996:	7812      	ldrb	r2, [r2, #0]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	7812      	ldrb	r2, [r2, #0]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80039a8:	68fb      	ldr	r3, [r7, #12]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	887a      	ldrh	r2, [r7, #2]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	1c53      	adds	r3, r2, #1
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1c59      	adds	r1, r3, #1
 8003a68:	6179      	str	r1, [r7, #20]
 8003a6a:	7812      	ldrb	r2, [r2, #0]
 8003a6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f1      	bne.n	8003a5e <mem_cpy+0x1a>
	}
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003a86:	b480      	push	{r7}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	617a      	str	r2, [r7, #20]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f3      	bne.n	8003a96 <mem_set+0x10>
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	61fa      	str	r2, [r7, #28]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	4619      	mov	r1, r3
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	61ba      	str	r2, [r7, #24]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	1acb      	subs	r3, r1, r3
 8003ae8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <mem_cmp+0x40>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0eb      	beq.n	8003ad4 <mem_cmp+0x18>

	return r;
 8003afc:	697b      	ldr	r3, [r7, #20]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003b14:	e002      	b.n	8003b1c <chk_chr+0x12>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <chk_chr+0x26>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d1f2      	bne.n	8003b16 <chk_chr+0xc>
	return *str;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	781b      	ldrb	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e029      	b.n	8003ba8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003b54:	4a27      	ldr	r2, [pc, #156]	; (8003bf4 <chk_lock+0xb4>)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	4413      	add	r3, r2
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01d      	beq.n	8003b9e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b62:	4a24      	ldr	r2, [pc, #144]	; (8003bf4 <chk_lock+0xb4>)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	4413      	add	r3, r2
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d116      	bne.n	8003ba2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <chk_lock+0xb4>)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d10c      	bne.n	8003ba2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003b88:	4a1a      	ldr	r2, [pc, #104]	; (8003bf4 <chk_lock+0xb4>)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	4413      	add	r3, r2
 8003b90:	3308      	adds	r3, #8
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d102      	bne.n	8003ba2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003b9c:	e007      	b.n	8003bae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d9d2      	bls.n	8003b54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d109      	bne.n	8003bc8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <chk_lock+0x80>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d101      	bne.n	8003bc4 <chk_lock+0x84>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e010      	b.n	8003be6 <chk_lock+0xa6>
 8003bc4:	2312      	movs	r3, #18
 8003bc6:	e00e      	b.n	8003be6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <chk_lock+0xa0>
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <chk_lock+0xb4>)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4413      	add	r3, r2
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bde:	d101      	bne.n	8003be4 <chk_lock+0xa4>
 8003be0:	2310      	movs	r3, #16
 8003be2:	e000      	b.n	8003be6 <chk_lock+0xa6>
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	200000c0 	.word	0x200000c0

08003bf8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	e002      	b.n	8003c0a <enq_lock+0x12>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3301      	adds	r3, #1
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d806      	bhi.n	8003c1e <enq_lock+0x26>
 8003c10:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <enq_lock+0x40>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	4413      	add	r3, r2
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f2      	bne.n	8003c04 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	200000c0 	.word	0x200000c0

08003c3c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e01f      	b.n	8003c8c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003c4c:	4a41      	ldr	r2, [pc, #260]	; (8003d54 <inc_lock+0x118>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	4413      	add	r3, r2
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d113      	bne.n	8003c86 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003c5e:	4a3d      	ldr	r2, [pc, #244]	; (8003d54 <inc_lock+0x118>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4413      	add	r3, r2
 8003c66:	3304      	adds	r3, #4
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d109      	bne.n	8003c86 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003c72:	4a38      	ldr	r2, [pc, #224]	; (8003d54 <inc_lock+0x118>)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	4413      	add	r3, r2
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d006      	beq.n	8003c94 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d9dc      	bls.n	8003c4c <inc_lock+0x10>
 8003c92:	e000      	b.n	8003c96 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003c94:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d132      	bne.n	8003d02 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e002      	b.n	8003ca8 <inc_lock+0x6c>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d806      	bhi.n	8003cbc <inc_lock+0x80>
 8003cae:	4a29      	ldr	r2, [pc, #164]	; (8003d54 <inc_lock+0x118>)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	4413      	add	r3, r2
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f2      	bne.n	8003ca2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d101      	bne.n	8003cc6 <inc_lock+0x8a>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e040      	b.n	8003d48 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4922      	ldr	r1, [pc, #136]	; (8003d54 <inc_lock+0x118>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	440b      	add	r3, r1
 8003cd2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	491e      	ldr	r1, [pc, #120]	; (8003d54 <inc_lock+0x118>)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	440b      	add	r3, r1
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	491a      	ldr	r1, [pc, #104]	; (8003d54 <inc_lock+0x118>)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	440b      	add	r3, r1
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <inc_lock+0x118>)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	4413      	add	r3, r2
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	2200      	movs	r2, #0
 8003d00:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <inc_lock+0xe0>
 8003d08:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <inc_lock+0x118>)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	4413      	add	r3, r2
 8003d10:	330c      	adds	r3, #12
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <inc_lock+0xe0>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e015      	b.n	8003d48 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <inc_lock+0xf8>
 8003d22:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <inc_lock+0x118>)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	4413      	add	r3, r2
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	e001      	b.n	8003d38 <inc_lock+0xfc>
 8003d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d38:	4906      	ldr	r1, [pc, #24]	; (8003d54 <inc_lock+0x118>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	440b      	add	r3, r1
 8003d40:	330c      	adds	r3, #12
 8003d42:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3301      	adds	r3, #1
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	200000c0 	.word	0x200000c0

08003d58 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d825      	bhi.n	8003db8 <dec_lock+0x60>
		n = Files[i].ctr;
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <dec_lock+0x74>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	4413      	add	r3, r2
 8003d74:	330c      	adds	r3, #12
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003d7a:	89fb      	ldrh	r3, [r7, #14]
 8003d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d80:	d101      	bne.n	8003d86 <dec_lock+0x2e>
 8003d82:	2300      	movs	r3, #0
 8003d84:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003d86:	89fb      	ldrh	r3, [r7, #14]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <dec_lock+0x3a>
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003d92:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <dec_lock+0x74>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	89fa      	ldrh	r2, [r7, #14]
 8003d9e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003da0:	89fb      	ldrh	r3, [r7, #14]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <dec_lock+0x5a>
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <dec_lock+0x74>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	4413      	add	r3, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	737b      	strb	r3, [r7, #13]
 8003db6:	e001      	b.n	8003dbc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003db8:	2302      	movs	r3, #2
 8003dba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003dbc:	7b7b      	ldrb	r3, [r7, #13]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	200000c0 	.word	0x200000c0

08003dd0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e010      	b.n	8003e00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003dde:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <clear_lock+0x44>)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	4413      	add	r3, r2
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d105      	bne.n	8003dfa <clear_lock+0x2a>
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <clear_lock+0x44>)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	4413      	add	r3, r2
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d9eb      	bls.n	8003dde <clear_lock+0xe>
	}
}
 8003e06:	bf00      	nop
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	200000c0 	.word	0x200000c0

08003e18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	78db      	ldrb	r3, [r3, #3]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d034      	beq.n	8003e96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	7858      	ldrb	r0, [r3, #1]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	f7ff fd40 	bl	80038c4 <disk_write>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
 8003e4e:	e022      	b.n	8003e96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	1ad2      	subs	r2, r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d217      	bcs.n	8003e96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	789b      	ldrb	r3, [r3, #2]
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	e010      	b.n	8003e90 <sync_window+0x78>
					wsect += fs->fsize;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4413      	add	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7858      	ldrb	r0, [r3, #1]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003e82:	2301      	movs	r3, #1
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	f7ff fd1d 	bl	80038c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d8eb      	bhi.n	8003e6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d01b      	beq.n	8003ef0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ffad 	bl	8003e18 <sync_window>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d113      	bne.n	8003ef0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	7858      	ldrb	r0, [r3, #1]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	f7ff fcd5 	bl	8003884 <disk_read>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff87 	bl	8003e18 <sync_window>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d158      	bne.n	8003fc6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d148      	bne.n	8003fae <sync_fs+0xb2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	791b      	ldrb	r3, [r3, #4]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d144      	bne.n	8003fae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3330      	adds	r3, #48	; 0x30
 8003f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fda9 	bl	8003a86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3330      	adds	r3, #48	; 0x30
 8003f38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003f3c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fd38 	bl	80039b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3330      	adds	r3, #48	; 0x30
 8003f4a:	4921      	ldr	r1, [pc, #132]	; (8003fd0 <sync_fs+0xd4>)
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fd4d 	bl	80039ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3330      	adds	r3, #48	; 0x30
 8003f56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003f5a:	491e      	ldr	r1, [pc, #120]	; (8003fd4 <sync_fs+0xd8>)
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fd45 	bl	80039ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3330      	adds	r3, #48	; 0x30
 8003f66:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f7ff fd3b 	bl	80039ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3330      	adds	r3, #48	; 0x30
 8003f7a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f7ff fd31 	bl	80039ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7858      	ldrb	r0, [r3, #1]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f7ff fc8e 	bl	80038c4 <disk_write>
			fs->fsi_flag = 0;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	785b      	ldrb	r3, [r3, #1]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fca4 	bl	8003904 <disk_ioctl>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <sync_fs+0xca>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	41615252 	.word	0x41615252
 8003fd4:	61417272 	.word	0x61417272

08003fd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	3b02      	subs	r3, #2
 8003fe6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	3b02      	subs	r3, #2
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d301      	bcc.n	8003ff8 <clust2sect+0x20>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e008      	b.n	800400a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	895b      	ldrh	r3, [r3, #10]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	fb03 f202 	mul.w	r2, r3, r2
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	4413      	add	r3, r2
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b086      	sub	sp, #24
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d904      	bls.n	8004036 <get_fat+0x20>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004036:	2301      	movs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e08f      	b.n	800415c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d062      	beq.n	8004110 <get_fat+0xfa>
 800404a:	2b03      	cmp	r3, #3
 800404c:	dc7c      	bgt.n	8004148 <get_fat+0x132>
 800404e:	2b01      	cmp	r3, #1
 8004050:	d002      	beq.n	8004058 <get_fat+0x42>
 8004052:	2b02      	cmp	r3, #2
 8004054:	d042      	beq.n	80040dc <get_fat+0xc6>
 8004056:	e077      	b.n	8004148 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	0a5b      	lsrs	r3, r3, #9
 800406e:	4413      	add	r3, r2
 8004070:	4619      	mov	r1, r3
 8004072:	6938      	ldr	r0, [r7, #16]
 8004074:	f7ff ff14 	bl	8003ea0 <move_window>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d167      	bne.n	800414e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	60fa      	str	r2, [r7, #12]
 8004084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004090:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	0a5b      	lsrs	r3, r3, #9
 800409a:	4413      	add	r3, r2
 800409c:	4619      	mov	r1, r3
 800409e:	6938      	ldr	r0, [r7, #16]
 80040a0:	f7ff fefe 	bl	8003ea0 <move_window>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d153      	bne.n	8004152 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4413      	add	r3, r2
 80040b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	461a      	mov	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <get_fat+0xbc>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	e002      	b.n	80040d8 <get_fat+0xc2>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d8:	617b      	str	r3, [r7, #20]
			break;
 80040da:	e03f      	b.n	800415c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	4413      	add	r3, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	6938      	ldr	r0, [r7, #16]
 80040ea:	f7ff fed9 	bl	8003ea0 <move_window>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d130      	bne.n	8004156 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004102:	4413      	add	r3, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fc1b 	bl	8003940 <ld_word>
 800410a:	4603      	mov	r3, r0
 800410c:	617b      	str	r3, [r7, #20]
			break;
 800410e:	e025      	b.n	800415c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6a1a      	ldr	r2, [r3, #32]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	09db      	lsrs	r3, r3, #7
 8004118:	4413      	add	r3, r2
 800411a:	4619      	mov	r1, r3
 800411c:	6938      	ldr	r0, [r7, #16]
 800411e:	f7ff febf 	bl	8003ea0 <move_window>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d118      	bne.n	800415a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004136:	4413      	add	r3, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fc19 	bl	8003970 <ld_dword>
 800413e:	4603      	mov	r3, r0
 8004140:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004144:	617b      	str	r3, [r7, #20]
			break;
 8004146:	e009      	b.n	800415c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e006      	b.n	800415c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800414e:	bf00      	nop
 8004150:	e004      	b.n	800415c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004152:	bf00      	nop
 8004154:	e002      	b.n	800415c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004156:	bf00      	nop
 8004158:	e000      	b.n	800415c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800415a:	bf00      	nop
		}
	}

	return val;
 800415c:	697b      	ldr	r3, [r7, #20]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004166:	b590      	push	{r4, r7, lr}
 8004168:	b089      	sub	sp, #36	; 0x24
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b01      	cmp	r3, #1
 800417a:	f240 80d2 	bls.w	8004322 <put_fat+0x1bc>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	f080 80cc 	bcs.w	8004322 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b03      	cmp	r3, #3
 8004190:	f000 8096 	beq.w	80042c0 <put_fat+0x15a>
 8004194:	2b03      	cmp	r3, #3
 8004196:	f300 80cd 	bgt.w	8004334 <put_fat+0x1ce>
 800419a:	2b01      	cmp	r3, #1
 800419c:	d002      	beq.n	80041a4 <put_fat+0x3e>
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d06e      	beq.n	8004280 <put_fat+0x11a>
 80041a2:	e0c7      	b.n	8004334 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4413      	add	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1a      	ldr	r2, [r3, #32]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	0a5b      	lsrs	r3, r3, #9
 80041ba:	4413      	add	r3, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff fe6e 	bl	8003ea0 <move_window>
 80041c4:	4603      	mov	r3, r0
 80041c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041c8:	7ffb      	ldrb	r3, [r7, #31]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 80ab 	bne.w	8004326 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	1c59      	adds	r1, r3, #1
 80041da:	61b9      	str	r1, [r7, #24]
 80041dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e0:	4413      	add	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <put_fat+0xa4>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	b25a      	sxtb	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	b25b      	sxtb	r3, r3
 8004202:	4313      	orrs	r3, r2
 8004204:	b25b      	sxtb	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e001      	b.n	800420e <put_fat+0xa8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1a      	ldr	r2, [r3, #32]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	0a5b      	lsrs	r3, r3, #9
 8004220:	4413      	add	r3, r2
 8004222:	4619      	mov	r1, r3
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fe3b 	bl	8003ea0 <move_window>
 800422a:	4603      	mov	r3, r0
 800422c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800422e:	7ffb      	ldrb	r3, [r7, #31]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d17a      	bne.n	800432a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004240:	4413      	add	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <put_fat+0xf0>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e00e      	b.n	8004274 <put_fat+0x10e>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	b25b      	sxtb	r3, r3
 800425c:	f023 030f 	bic.w	r3, r3, #15
 8004260:	b25a      	sxtb	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	b25b      	sxtb	r3, r3
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	b25b      	sxtb	r3, r3
 800426e:	4313      	orrs	r3, r2
 8004270:	b25b      	sxtb	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	70da      	strb	r2, [r3, #3]
			break;
 800427e:	e059      	b.n	8004334 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	4413      	add	r3, r2
 800428a:	4619      	mov	r1, r3
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff fe07 	bl	8003ea0 <move_window>
 8004292:	4603      	mov	r3, r0
 8004294:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004296:	7ffb      	ldrb	r3, [r7, #31]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d148      	bne.n	800432e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80042aa:	4413      	add	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	b292      	uxth	r2, r2
 80042b0:	4611      	mov	r1, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fb7f 	bl	80039b6 <st_word>
			fs->wflag = 1;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	70da      	strb	r2, [r3, #3]
			break;
 80042be:	e039      	b.n	8004334 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	09db      	lsrs	r3, r3, #7
 80042c8:	4413      	add	r3, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff fde7 	bl	8003ea0 <move_window>
 80042d2:	4603      	mov	r3, r0
 80042d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042d6:	7ffb      	ldrb	r3, [r7, #31]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d12a      	bne.n	8004332 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80042f0:	4413      	add	r3, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fb3c 	bl	8003970 <ld_dword>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80042fe:	4323      	orrs	r3, r4
 8004300:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004310:	4413      	add	r3, r2
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fb69 	bl	80039ec <st_dword>
			fs->wflag = 1;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	70da      	strb	r2, [r3, #3]
			break;
 8004320:	e008      	b.n	8004334 <put_fat+0x1ce>
		}
	}
 8004322:	bf00      	nop
 8004324:	e006      	b.n	8004334 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004326:	bf00      	nop
 8004328:	e004      	b.n	8004334 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004332:	bf00      	nop
	return res;
 8004334:	7ffb      	ldrb	r3, [r7, #31]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3724      	adds	r7, #36	; 0x24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd90      	pop	{r4, r7, pc}

0800433e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b088      	sub	sp, #32
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d904      	bls.n	8004364 <remove_chain+0x26>
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	d301      	bcc.n	8004368 <remove_chain+0x2a>
 8004364:	2302      	movs	r3, #2
 8004366:	e04b      	b.n	8004400 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800436e:	f04f 32ff 	mov.w	r2, #4294967295
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	69b8      	ldr	r0, [r7, #24]
 8004376:	f7ff fef6 	bl	8004166 <put_fat>
 800437a:	4603      	mov	r3, r0
 800437c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800437e:	7ffb      	ldrb	r3, [r7, #31]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <remove_chain+0x4a>
 8004384:	7ffb      	ldrb	r3, [r7, #31]
 8004386:	e03b      	b.n	8004400 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff fe43 	bl	8004016 <get_fat>
 8004390:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d031      	beq.n	80043fc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <remove_chain+0x64>
 800439e:	2302      	movs	r3, #2
 80043a0:	e02e      	b.n	8004400 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d101      	bne.n	80043ae <remove_chain+0x70>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e028      	b.n	8004400 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80043ae:	2200      	movs	r2, #0
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	69b8      	ldr	r0, [r7, #24]
 80043b4:	f7ff fed7 	bl	8004166 <put_fat>
 80043b8:	4603      	mov	r3, r0
 80043ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80043bc:	7ffb      	ldrb	r3, [r7, #31]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <remove_chain+0x88>
 80043c2:	7ffb      	ldrb	r3, [r7, #31]
 80043c4:	e01c      	b.n	8004400 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	3b02      	subs	r3, #2
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d20b      	bcs.n	80043ec <remove_chain+0xae>
			fs->free_clst++;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	791b      	ldrb	r3, [r3, #4]
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d3c6      	bcc.n	8004388 <remove_chain+0x4a>
 80043fa:	e000      	b.n	80043fe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80043fc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <create_chain+0x2c>
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	429a      	cmp	r2, r3
 8004432:	d31b      	bcc.n	800446c <create_chain+0x64>
 8004434:	2301      	movs	r3, #1
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	e018      	b.n	800446c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800443a:	6839      	ldr	r1, [r7, #0]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fdea 	bl	8004016 <get_fat>
 8004442:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d801      	bhi.n	800444e <create_chain+0x46>
 800444a:	2301      	movs	r3, #1
 800444c:	e070      	b.n	8004530 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d101      	bne.n	800445a <create_chain+0x52>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	e06a      	b.n	8004530 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	429a      	cmp	r2, r3
 8004462:	d201      	bcs.n	8004468 <create_chain+0x60>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	e063      	b.n	8004530 <create_chain+0x128>
		scl = clst;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3301      	adds	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	429a      	cmp	r2, r3
 800447e:	d307      	bcc.n	8004490 <create_chain+0x88>
				ncl = 2;
 8004480:	2302      	movs	r3, #2
 8004482:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d901      	bls.n	8004490 <create_chain+0x88>
 800448c:	2300      	movs	r3, #0
 800448e:	e04f      	b.n	8004530 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004490:	69f9      	ldr	r1, [r7, #28]
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fdbf 	bl	8004016 <get_fat>
 8004498:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00e      	beq.n	80044be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d003      	beq.n	80044ae <create_chain+0xa6>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d101      	bne.n	80044b2 <create_chain+0xaa>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	e03e      	b.n	8004530 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d1da      	bne.n	8004470 <create_chain+0x68>
 80044ba:	2300      	movs	r3, #0
 80044bc:	e038      	b.n	8004530 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80044be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80044c0:	f04f 32ff 	mov.w	r2, #4294967295
 80044c4:	69f9      	ldr	r1, [r7, #28]
 80044c6:	6938      	ldr	r0, [r7, #16]
 80044c8:	f7ff fe4d 	bl	8004166 <put_fat>
 80044cc:	4603      	mov	r3, r0
 80044ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <create_chain+0xe2>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	6938      	ldr	r0, [r7, #16]
 80044e2:	f7ff fe40 	bl	8004166 <put_fat>
 80044e6:	4603      	mov	r3, r0
 80044e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <create_chain+0x116>
		fs->last_clst = ncl;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	3b02      	subs	r3, #2
 8004500:	429a      	cmp	r2, r3
 8004502:	d804      	bhi.n	800450e <create_chain+0x106>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	791b      	ldrb	r3, [r3, #4]
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	b2da      	uxtb	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	711a      	strb	r2, [r3, #4]
 800451c:	e007      	b.n	800452e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800451e:	7dfb      	ldrb	r3, [r7, #23]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d102      	bne.n	800452a <create_chain+0x122>
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
 8004528:	e000      	b.n	800452c <create_chain+0x124>
 800452a:	2301      	movs	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800452e:	69fb      	ldr	r3, [r7, #28]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	3304      	adds	r3, #4
 800454e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	0a5b      	lsrs	r3, r3, #9
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	8952      	ldrh	r2, [r2, #10]
 8004558:	fbb3 f3f2 	udiv	r3, r3, r2
 800455c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	613a      	str	r2, [r7, #16]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <clmt_clust+0x3a>
 800456e:	2300      	movs	r3, #0
 8004570:	e010      	b.n	8004594 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	429a      	cmp	r2, r3
 8004578:	d307      	bcc.n	800458a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3304      	adds	r3, #4
 8004586:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004588:	e7e9      	b.n	800455e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800458a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	4413      	add	r3, r2
}
 8004594:	4618      	mov	r0, r3
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b6:	d204      	bcs.n	80045c2 <dir_sdi+0x22>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80045c2:	2302      	movs	r3, #2
 80045c4:	e063      	b.n	800468e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <dir_sdi+0x46>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d902      	bls.n	80045e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10c      	bne.n	8004606 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	8912      	ldrh	r2, [r2, #8]
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d301      	bcc.n	80045fc <dir_sdi+0x5c>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e048      	b.n	800468e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	61da      	str	r2, [r3, #28]
 8004604:	e029      	b.n	800465a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	895b      	ldrh	r3, [r3, #10]
 800460a:	025b      	lsls	r3, r3, #9
 800460c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800460e:	e019      	b.n	8004644 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6979      	ldr	r1, [r7, #20]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fcfe 	bl	8004016 <get_fat>
 800461a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d101      	bne.n	8004628 <dir_sdi+0x88>
 8004624:	2301      	movs	r3, #1
 8004626:	e032      	b.n	800468e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d904      	bls.n	8004638 <dir_sdi+0x98>
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	429a      	cmp	r2, r3
 8004636:	d301      	bcc.n	800463c <dir_sdi+0x9c>
 8004638:	2302      	movs	r3, #2
 800463a:	e028      	b.n	800468e <dir_sdi+0xee>
			ofs -= csz;
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d2e1      	bcs.n	8004610 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800464c:	6979      	ldr	r1, [r7, #20]
 800464e:	6938      	ldr	r0, [r7, #16]
 8004650:	f7ff fcc2 	bl	8003fd8 <clust2sect>
 8004654:	4602      	mov	r2, r0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <dir_sdi+0xcc>
 8004668:	2302      	movs	r3, #2
 800466a:	e010      	b.n	800468e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	0a5b      	lsrs	r3, r3, #9
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004686:	441a      	add	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	3320      	adds	r3, #32
 80046ac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <dir_next+0x28>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046bc:	d301      	bcc.n	80046c2 <dir_next+0x2c>
 80046be:	2304      	movs	r3, #4
 80046c0:	e0aa      	b.n	8004818 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 8098 	bne.w	80047fe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	8912      	ldrh	r2, [r2, #8]
 80046e8:	4293      	cmp	r3, r2
 80046ea:	f0c0 8088 	bcc.w	80047fe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	61da      	str	r2, [r3, #28]
 80046f4:	2304      	movs	r3, #4
 80046f6:	e08f      	b.n	8004818 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	0a5b      	lsrs	r3, r3, #9
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	8952      	ldrh	r2, [r2, #10]
 8004700:	3a01      	subs	r2, #1
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d17a      	bne.n	80047fe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f7ff fc80 	bl	8004016 <get_fat>
 8004716:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d801      	bhi.n	8004722 <dir_next+0x8c>
 800471e:	2302      	movs	r3, #2
 8004720:	e07a      	b.n	8004818 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d101      	bne.n	800472e <dir_next+0x98>
 800472a:	2301      	movs	r3, #1
 800472c:	e074      	b.n	8004818 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	429a      	cmp	r2, r3
 8004736:	d358      	bcc.n	80047ea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	61da      	str	r2, [r3, #28]
 8004744:	2304      	movs	r3, #4
 8004746:	e067      	b.n	8004818 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7ff fe59 	bl	8004408 <create_chain>
 8004756:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <dir_next+0xcc>
 800475e:	2307      	movs	r3, #7
 8004760:	e05a      	b.n	8004818 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <dir_next+0xd6>
 8004768:	2302      	movs	r3, #2
 800476a:	e055      	b.n	8004818 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d101      	bne.n	8004778 <dir_next+0xe2>
 8004774:	2301      	movs	r3, #1
 8004776:	e04f      	b.n	8004818 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff fb4d 	bl	8003e18 <sync_window>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <dir_next+0xf2>
 8004784:	2301      	movs	r3, #1
 8004786:	e047      	b.n	8004818 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3330      	adds	r3, #48	; 0x30
 800478c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff f977 	bl	8003a86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	6979      	ldr	r1, [r7, #20]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff fc1a 	bl	8003fd8 <clust2sect>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80047aa:	e012      	b.n	80047d2 <dir_next+0x13c>
						fs->wflag = 1;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f7ff fb30 	bl	8003e18 <sync_window>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <dir_next+0x12c>
 80047be:	2301      	movs	r3, #1
 80047c0:	e02a      	b.n	8004818 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	3301      	adds	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	895b      	ldrh	r3, [r3, #10]
 80047d6:	461a      	mov	r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4293      	cmp	r3, r2
 80047dc:	d3e6      	bcc.n	80047ac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad2      	subs	r2, r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80047f0:	6979      	ldr	r1, [r7, #20]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff fbf0 	bl	8003fd8 <clust2sect>
 80047f8:	4602      	mov	r2, r0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004810:	441a      	add	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004830:	2100      	movs	r1, #0
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff feb4 	bl	80045a0 <dir_sdi>
 8004838:	4603      	mov	r3, r0
 800483a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d12b      	bne.n	800489a <dir_alloc+0x7a>
		n = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	4619      	mov	r1, r3
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff fb27 	bl	8003ea0 <move_window>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d11d      	bne.n	8004898 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2be5      	cmp	r3, #229	; 0xe5
 8004864:	d004      	beq.n	8004870 <dir_alloc+0x50>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	3301      	adds	r3, #1
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d102      	bne.n	8004884 <dir_alloc+0x64>
 800487e:	e00c      	b.n	800489a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004884:	2101      	movs	r1, #1
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff05 	bl	8004696 <dir_next>
 800488c:	4603      	mov	r3, r0
 800488e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004890:	7dfb      	ldrb	r3, [r7, #23]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0d7      	beq.n	8004846 <dir_alloc+0x26>
 8004896:	e000      	b.n	800489a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004898:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b04      	cmp	r3, #4
 800489e:	d101      	bne.n	80048a4 <dir_alloc+0x84>
 80048a0:	2307      	movs	r3, #7
 80048a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80048a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	331a      	adds	r3, #26
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff f83f 	bl	8003940 <ld_word>
 80048c2:	4603      	mov	r3, r0
 80048c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d109      	bne.n	80048e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	3314      	adds	r3, #20
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff f834 	bl	8003940 <ld_word>
 80048d8:	4603      	mov	r3, r0
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80048e2:	68fb      	ldr	r3, [r7, #12]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	331a      	adds	r3, #26
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	b292      	uxth	r2, r2
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff f857 	bl	80039b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d109      	bne.n	8004924 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f103 0214 	add.w	r2, r3, #20
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	b29b      	uxth	r3, r3
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7ff f849 	bl	80039b6 <st_word>
	}
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800493a:	2100      	movs	r1, #0
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff fe2f 	bl	80045a0 <dir_sdi>
 8004942:	4603      	mov	r3, r0
 8004944:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <dir_find+0x24>
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	e03e      	b.n	80049ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	4619      	mov	r1, r3
 8004956:	6938      	ldr	r0, [r7, #16]
 8004958:	f7ff faa2 	bl	8003ea0 <move_window>
 800495c:	4603      	mov	r3, r0
 800495e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d12f      	bne.n	80049c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <dir_find+0x4e>
 8004974:	2304      	movs	r3, #4
 8004976:	75fb      	strb	r3, [r7, #23]
 8004978:	e028      	b.n	80049cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	330b      	adds	r3, #11
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004986:	b2da      	uxtb	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	330b      	adds	r3, #11
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <dir_find+0x86>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a18      	ldr	r0, [r3, #32]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3324      	adds	r3, #36	; 0x24
 80049a4:	220b      	movs	r2, #11
 80049a6:	4619      	mov	r1, r3
 80049a8:	f7ff f888 	bl	8003abc <mem_cmp>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80049b2:	2100      	movs	r1, #0
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff fe6e 	bl	8004696 <dir_next>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0c5      	beq.n	8004950 <dir_find+0x24>
 80049c4:	e002      	b.n	80049cc <dir_find+0xa0>
		if (res != FR_OK) break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80049ca:	bf00      	nop

	return res;
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80049e4:	2101      	movs	r1, #1
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff ff1a 	bl	8004820 <dir_alloc>
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d11c      	bne.n	8004a30 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	4619      	mov	r1, r3
 80049fc:	68b8      	ldr	r0, [r7, #8]
 80049fe:	f7ff fa4f 	bl	8003ea0 <move_window>
 8004a02:	4603      	mov	r3, r0
 8004a04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d111      	bne.n	8004a30 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	2220      	movs	r2, #32
 8004a12:	2100      	movs	r1, #0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff f836 	bl	8003a86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a18      	ldr	r0, [r3, #32]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3324      	adds	r3, #36	; 0x24
 8004a22:	220b      	movs	r2, #11
 8004a24:	4619      	mov	r1, r3
 8004a26:	f7ff f80d 	bl	8003a44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3324      	adds	r3, #36	; 0x24
 8004a50:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004a52:	220b      	movs	r2, #11
 8004a54:	2120      	movs	r1, #32
 8004a56:	68b8      	ldr	r0, [r7, #8]
 8004a58:	f7ff f815 	bl	8003a86 <mem_set>
	si = i = 0; ni = 8;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	2308      	movs	r3, #8
 8004a66:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	61fa      	str	r2, [r7, #28]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004a76:	7efb      	ldrb	r3, [r7, #27]
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d94e      	bls.n	8004b1a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004a7c:	7efb      	ldrb	r3, [r7, #27]
 8004a7e:	2b2f      	cmp	r3, #47	; 0x2f
 8004a80:	d006      	beq.n	8004a90 <create_name+0x54>
 8004a82:	7efb      	ldrb	r3, [r7, #27]
 8004a84:	2b5c      	cmp	r3, #92	; 0x5c
 8004a86:	d110      	bne.n	8004aaa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004a88:	e002      	b.n	8004a90 <create_name+0x54>
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b2f      	cmp	r3, #47	; 0x2f
 8004a9a:	d0f6      	beq.n	8004a8a <create_name+0x4e>
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b5c      	cmp	r3, #92	; 0x5c
 8004aa6:	d0f0      	beq.n	8004a8a <create_name+0x4e>
			break;
 8004aa8:	e038      	b.n	8004b1c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004aaa:	7efb      	ldrb	r3, [r7, #27]
 8004aac:	2b2e      	cmp	r3, #46	; 0x2e
 8004aae:	d003      	beq.n	8004ab8 <create_name+0x7c>
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d30c      	bcc.n	8004ad2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b0b      	cmp	r3, #11
 8004abc:	d002      	beq.n	8004ac4 <create_name+0x88>
 8004abe:	7efb      	ldrb	r3, [r7, #27]
 8004ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac2:	d001      	beq.n	8004ac8 <create_name+0x8c>
 8004ac4:	2306      	movs	r3, #6
 8004ac6:	e044      	b.n	8004b52 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004ac8:	2308      	movs	r3, #8
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	230b      	movs	r3, #11
 8004ace:	617b      	str	r3, [r7, #20]
			continue;
 8004ad0:	e022      	b.n	8004b18 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004ad2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	da04      	bge.n	8004ae4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004ada:	7efb      	ldrb	r3, [r7, #27]
 8004adc:	3b80      	subs	r3, #128	; 0x80
 8004ade:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <create_name+0x120>)
 8004ae0:	5cd3      	ldrb	r3, [r2, r3]
 8004ae2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004ae4:	7efb      	ldrb	r3, [r7, #27]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	481d      	ldr	r0, [pc, #116]	; (8004b60 <create_name+0x124>)
 8004aea:	f7ff f80e 	bl	8003b0a <chk_chr>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <create_name+0xbc>
 8004af4:	2306      	movs	r3, #6
 8004af6:	e02c      	b.n	8004b52 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004af8:	7efb      	ldrb	r3, [r7, #27]
 8004afa:	2b60      	cmp	r3, #96	; 0x60
 8004afc:	d905      	bls.n	8004b0a <create_name+0xce>
 8004afe:	7efb      	ldrb	r3, [r7, #27]
 8004b00:	2b7a      	cmp	r3, #122	; 0x7a
 8004b02:	d802      	bhi.n	8004b0a <create_name+0xce>
 8004b04:	7efb      	ldrb	r3, [r7, #27]
 8004b06:	3b20      	subs	r3, #32
 8004b08:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	613a      	str	r2, [r7, #16]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	4413      	add	r3, r2
 8004b14:	7efa      	ldrb	r2, [r7, #27]
 8004b16:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004b18:	e7a6      	b.n	8004a68 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b1a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	441a      	add	r2, r3
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <create_name+0xf4>
 8004b2c:	2306      	movs	r3, #6
 8004b2e:	e010      	b.n	8004b52 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2be5      	cmp	r3, #229	; 0xe5
 8004b36:	d102      	bne.n	8004b3e <create_name+0x102>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2205      	movs	r2, #5
 8004b3c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004b3e:	7efb      	ldrb	r3, [r7, #27]
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d801      	bhi.n	8004b48 <create_name+0x10c>
 8004b44:	2204      	movs	r2, #4
 8004b46:	e000      	b.n	8004b4a <create_name+0x10e>
 8004b48:	2200      	movs	r2, #0
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	330b      	adds	r3, #11
 8004b4e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004b50:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	080064f0 	.word	0x080064f0
 8004b60:	08006488 	.word	0x08006488

08004b64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004b78:	e002      	b.n	8004b80 <follow_path+0x1c>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b2f      	cmp	r3, #47	; 0x2f
 8004b86:	d0f8      	beq.n	8004b7a <follow_path+0x16>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b5c      	cmp	r3, #92	; 0x5c
 8004b8e:	d0f4      	beq.n	8004b7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b1f      	cmp	r3, #31
 8004b9c:	d80a      	bhi.n	8004bb4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2280      	movs	r2, #128	; 0x80
 8004ba2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff fcf9 	bl	80045a0 <dir_sdi>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	75fb      	strb	r3, [r7, #23]
 8004bb2:	e043      	b.n	8004c3c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004bb4:	463b      	mov	r3, r7
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff3f 	bl	8004a3c <create_name>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d134      	bne.n	8004c32 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff feaf 	bl	800492c <dir_find>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004bd8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d127      	bne.n	8004c36 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004be6:	7afb      	ldrb	r3, [r7, #11]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d122      	bne.n	8004c36 <follow_path+0xd2>
 8004bf0:	2305      	movs	r3, #5
 8004bf2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004bf4:	e01f      	b.n	8004c36 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004bf6:	7afb      	ldrb	r3, [r7, #11]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11c      	bne.n	8004c3a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	799b      	ldrb	r3, [r3, #6]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004c0c:	2305      	movs	r3, #5
 8004c0e:	75fb      	strb	r3, [r7, #23]
 8004c10:	e014      	b.n	8004c3c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c20:	4413      	add	r3, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff fe42 	bl	80048ae <ld_clust>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c30:	e7c0      	b.n	8004bb4 <follow_path+0x50>
			if (res != FR_OK) break;
 8004c32:	bf00      	nop
 8004c34:	e002      	b.n	8004c3c <follow_path+0xd8>
				break;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c3a:	bf00      	nop
			}
		}
	}

	return res;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b087      	sub	sp, #28
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d031      	beq.n	8004cc0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e002      	b.n	8004c6a <get_ldnumber+0x24>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	3301      	adds	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d903      	bls.n	8004c7a <get_ldnumber+0x34>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b3a      	cmp	r3, #58	; 0x3a
 8004c78:	d1f4      	bne.n	8004c64 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b3a      	cmp	r3, #58	; 0x3a
 8004c80:	d11c      	bne.n	8004cbc <get_ldnumber+0x76>
			tp = *path;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	60fa      	str	r2, [r7, #12]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	3b30      	subs	r3, #48	; 0x30
 8004c92:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b09      	cmp	r3, #9
 8004c98:	d80e      	bhi.n	8004cb8 <get_ldnumber+0x72>
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d10a      	bne.n	8004cb8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <get_ldnumber+0x72>
					vol = (int)i;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	e002      	b.n	8004cc2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004cc0:	693b      	ldr	r3, [r7, #16]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	70da      	strb	r2, [r3, #3]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff f8d8 	bl	8003ea0 <move_window>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <check_fs+0x2a>
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	e038      	b.n	8004d6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3330      	adds	r3, #48	; 0x30
 8004cfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fe1c 	bl	8003940 <ld_word>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <check_fs+0x48>
 8004d14:	2303      	movs	r3, #3
 8004d16:	e029      	b.n	8004d6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d1e:	2be9      	cmp	r3, #233	; 0xe9
 8004d20:	d009      	beq.n	8004d36 <check_fs+0x66>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d28:	2beb      	cmp	r3, #235	; 0xeb
 8004d2a:	d11e      	bne.n	8004d6a <check_fs+0x9a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d32:	2b90      	cmp	r3, #144	; 0x90
 8004d34:	d119      	bne.n	8004d6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3330      	adds	r3, #48	; 0x30
 8004d3a:	3336      	adds	r3, #54	; 0x36
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fe17 	bl	8003970 <ld_dword>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d48:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <check_fs+0xa4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d101      	bne.n	8004d52 <check_fs+0x82>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e00c      	b.n	8004d6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3330      	adds	r3, #48	; 0x30
 8004d56:	3352      	adds	r3, #82	; 0x52
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe fe09 	bl	8003970 <ld_dword>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4a05      	ldr	r2, [pc, #20]	; (8004d78 <check_fs+0xa8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d101      	bne.n	8004d6a <check_fs+0x9a>
 8004d66:	2300      	movs	r3, #0
 8004d68:	e000      	b.n	8004d6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004d6a:	2302      	movs	r3, #2
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	00544146 	.word	0x00544146
 8004d78:	33544146 	.word	0x33544146

08004d7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b096      	sub	sp, #88	; 0x58
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff ff58 	bl	8004c46 <get_ldnumber>
 8004d96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	da01      	bge.n	8004da2 <find_volume+0x26>
 8004d9e:	230b      	movs	r3, #11
 8004da0:	e22e      	b.n	8005200 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004da2:	4aa8      	ldr	r2, [pc, #672]	; (8005044 <find_volume+0x2c8>)
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004daa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <find_volume+0x3a>
 8004db2:	230c      	movs	r3, #12
 8004db4:	e224      	b.n	8005200 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	f023 0301 	bic.w	r3, r3, #1
 8004dc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01a      	beq.n	8004e02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fe fd17 	bl	8003804 <disk_status>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10c      	bne.n	8004e02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <find_volume+0x82>
 8004dee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004dfa:	230a      	movs	r3, #10
 8004dfc:	e200      	b.n	8005200 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e1fe      	b.n	8005200 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe fd0f 	bl	8003838 <disk_initialize>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004e20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e1e7      	b.n	8005200 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <find_volume+0xca>
 8004e36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004e42:	230a      	movs	r3, #10
 8004e44:	e1dc      	b.n	8005200 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004e4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e4e:	f7ff ff3f 	bl	8004cd0 <check_fs>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004e58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d14b      	bne.n	8004ef8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004e60:	2300      	movs	r3, #0
 8004e62:	643b      	str	r3, [r7, #64]	; 0x40
 8004e64:	e01f      	b.n	8004ea6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004e74:	4413      	add	r3, r2
 8004e76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d006      	beq.n	8004e90 <find_volume+0x114>
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	3308      	adds	r3, #8
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe fd72 	bl	8003970 <ld_dword>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	e000      	b.n	8004e92 <find_volume+0x116>
 8004e90:	2200      	movs	r2, #0
 8004e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d9dc      	bls.n	8004e66 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004eac:	2300      	movs	r3, #0
 8004eae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <find_volume+0x140>
 8004eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <find_volume+0x162>
 8004ed2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ed4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ed6:	f7ff fefb 	bl	8004cd0 <check_fs>
 8004eda:	4603      	mov	r3, r0
 8004edc:	e000      	b.n	8004ee0 <find_volume+0x164>
 8004ede:	2303      	movs	r3, #3
 8004ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d905      	bls.n	8004ef8 <find_volume+0x17c>
 8004eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eee:	3301      	adds	r3, #1
 8004ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d9e1      	bls.n	8004ebc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d101      	bne.n	8004f04 <find_volume+0x188>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e17d      	b.n	8005200 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004f04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d901      	bls.n	8004f10 <find_volume+0x194>
 8004f0c:	230d      	movs	r3, #13
 8004f0e:	e177      	b.n	8005200 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	3330      	adds	r3, #48	; 0x30
 8004f14:	330b      	adds	r3, #11
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fd12 	bl	8003940 <ld_word>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f22:	d001      	beq.n	8004f28 <find_volume+0x1ac>
 8004f24:	230d      	movs	r3, #13
 8004f26:	e16b      	b.n	8005200 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	3330      	adds	r3, #48	; 0x30
 8004f2c:	3316      	adds	r3, #22
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fd06 	bl	8003940 <ld_word>
 8004f34:	4603      	mov	r3, r0
 8004f36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <find_volume+0x1d0>
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	3330      	adds	r3, #48	; 0x30
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fe fd13 	bl	8003970 <ld_dword>
 8004f4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f50:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	789b      	ldrb	r3, [r3, #2]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d005      	beq.n	8004f70 <find_volume+0x1f4>
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	789b      	ldrb	r3, [r3, #2]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d001      	beq.n	8004f70 <find_volume+0x1f4>
 8004f6c:	230d      	movs	r3, #13
 8004f6e:	e147      	b.n	8005200 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	789b      	ldrb	r3, [r3, #2]
 8004f74:	461a      	mov	r2, r3
 8004f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	895b      	ldrh	r3, [r3, #10]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <find_volume+0x228>
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	895b      	ldrh	r3, [r3, #10]
 8004f96:	461a      	mov	r2, r3
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	895b      	ldrh	r3, [r3, #10]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <find_volume+0x22c>
 8004fa4:	230d      	movs	r3, #13
 8004fa6:	e12b      	b.n	8005200 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	3330      	adds	r3, #48	; 0x30
 8004fac:	3311      	adds	r3, #17
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fcc6 	bl	8003940 <ld_word>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	891b      	ldrh	r3, [r3, #8]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <find_volume+0x252>
 8004fca:	230d      	movs	r3, #13
 8004fcc:	e118      	b.n	8005200 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd0:	3330      	adds	r3, #48	; 0x30
 8004fd2:	3313      	adds	r3, #19
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe fcb3 	bl	8003940 <ld_word>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <find_volume+0x276>
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	3330      	adds	r3, #48	; 0x30
 8004fe8:	3320      	adds	r3, #32
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe fcc0 	bl	8003970 <ld_dword>
 8004ff0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	3330      	adds	r3, #48	; 0x30
 8004ff6:	330e      	adds	r3, #14
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fe fca1 	bl	8003940 <ld_word>
 8004ffe:	4603      	mov	r3, r0
 8005000:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005002:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <find_volume+0x290>
 8005008:	230d      	movs	r3, #13
 800500a:	e0f9      	b.n	8005200 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800500c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800500e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005010:	4413      	add	r3, r2
 8005012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005014:	8912      	ldrh	r2, [r2, #8]
 8005016:	0912      	lsrs	r2, r2, #4
 8005018:	b292      	uxth	r2, r2
 800501a:	4413      	add	r3, r2
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800501e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	429a      	cmp	r2, r3
 8005024:	d201      	bcs.n	800502a <find_volume+0x2ae>
 8005026:	230d      	movs	r3, #13
 8005028:	e0ea      	b.n	8005200 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800502a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005032:	8952      	ldrh	r2, [r2, #10]
 8005034:	fbb3 f3f2 	udiv	r3, r3, r2
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <find_volume+0x2cc>
 8005040:	230d      	movs	r3, #13
 8005042:	e0dd      	b.n	8005200 <find_volume+0x484>
 8005044:	200000b8 	.word	0x200000b8
		fmt = FS_FAT32;
 8005048:	2303      	movs	r3, #3
 800504a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005054:	4293      	cmp	r3, r2
 8005056:	d802      	bhi.n	800505e <find_volume+0x2e2>
 8005058:	2302      	movs	r3, #2
 800505a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005064:	4293      	cmp	r3, r2
 8005066:	d802      	bhi.n	800506e <find_volume+0x2f2>
 8005068:	2301      	movs	r3, #1
 800506a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	1c9a      	adds	r2, r3, #2
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800507a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800507c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800507e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005080:	441a      	add	r2, r3
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005086:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	441a      	add	r2, r3
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005094:	2b03      	cmp	r3, #3
 8005096:	d11e      	bne.n	80050d6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	3330      	adds	r3, #48	; 0x30
 800509c:	332a      	adds	r3, #42	; 0x2a
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fc4e 	bl	8003940 <ld_word>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <find_volume+0x332>
 80050aa:	230d      	movs	r3, #13
 80050ac:	e0a8      	b.n	8005200 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	891b      	ldrh	r3, [r3, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <find_volume+0x33e>
 80050b6:	230d      	movs	r3, #13
 80050b8:	e0a2      	b.n	8005200 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	3330      	adds	r3, #48	; 0x30
 80050be:	332c      	adds	r3, #44	; 0x2c
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe fc55 	bl	8003970 <ld_dword>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	647b      	str	r3, [r7, #68]	; 0x44
 80050d4:	e01f      	b.n	8005116 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	891b      	ldrh	r3, [r3, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <find_volume+0x366>
 80050de:	230d      	movs	r3, #13
 80050e0:	e08e      	b.n	8005200 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	6a1a      	ldr	r2, [r3, #32]
 80050e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e8:	441a      	add	r2, r3
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80050ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d103      	bne.n	80050fe <find_volume+0x382>
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	e00a      	b.n	8005114 <find_volume+0x398>
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	085a      	lsrs	r2, r3, #1
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005114:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005120:	0a5b      	lsrs	r3, r3, #9
 8005122:	429a      	cmp	r2, r3
 8005124:	d201      	bcs.n	800512a <find_volume+0x3ae>
 8005126:	230d      	movs	r3, #13
 8005128:	e06a      	b.n	8005200 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	f04f 32ff 	mov.w	r2, #4294967295
 8005130:	611a      	str	r2, [r3, #16]
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	2280      	movs	r2, #128	; 0x80
 800513e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005144:	2b03      	cmp	r3, #3
 8005146:	d149      	bne.n	80051dc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	3330      	adds	r3, #48	; 0x30
 800514c:	3330      	adds	r3, #48	; 0x30
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fbf6 	bl	8003940 <ld_word>
 8005154:	4603      	mov	r3, r0
 8005156:	2b01      	cmp	r3, #1
 8005158:	d140      	bne.n	80051dc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800515a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515c:	3301      	adds	r3, #1
 800515e:	4619      	mov	r1, r3
 8005160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005162:	f7fe fe9d 	bl	8003ea0 <move_window>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d137      	bne.n	80051dc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	2200      	movs	r2, #0
 8005170:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	3330      	adds	r3, #48	; 0x30
 8005176:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe fbe0 	bl	8003940 <ld_word>
 8005180:	4603      	mov	r3, r0
 8005182:	461a      	mov	r2, r3
 8005184:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005188:	429a      	cmp	r2, r3
 800518a:	d127      	bne.n	80051dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	3330      	adds	r3, #48	; 0x30
 8005190:	4618      	mov	r0, r3
 8005192:	f7fe fbed 	bl	8003970 <ld_dword>
 8005196:	4603      	mov	r3, r0
 8005198:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <find_volume+0x48c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d11e      	bne.n	80051dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	3330      	adds	r3, #48	; 0x30
 80051a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe fbe2 	bl	8003970 <ld_dword>
 80051ac:	4603      	mov	r3, r0
 80051ae:	4a17      	ldr	r2, [pc, #92]	; (800520c <find_volume+0x490>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d113      	bne.n	80051dc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	3330      	adds	r3, #48	; 0x30
 80051b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe fbd7 	bl	8003970 <ld_dword>
 80051c2:	4602      	mov	r2, r0
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	3330      	adds	r3, #48	; 0x30
 80051cc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe fbcd 	bl	8003970 <ld_dword>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80051e2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <find_volume+0x494>)
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <find_volume+0x494>)
 80051ee:	801a      	strh	r2, [r3, #0]
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <find_volume+0x494>)
 80051f2:	881a      	ldrh	r2, [r3, #0]
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80051f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051fa:	f7fe fde9 	bl	8003dd0 <clear_lock>
#endif
	return FR_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3758      	adds	r7, #88	; 0x58
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	41615252 	.word	0x41615252
 800520c:	61417272 	.word	0x61417272
 8005210:	200000bc 	.word	0x200000bc

08005214 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800521e:	2309      	movs	r3, #9
 8005220:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01c      	beq.n	8005262 <validate+0x4e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d018      	beq.n	8005262 <validate+0x4e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d013      	beq.n	8005262 <validate+0x4e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	889a      	ldrh	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	88db      	ldrh	r3, [r3, #6]
 8005244:	429a      	cmp	r2, r3
 8005246:	d10c      	bne.n	8005262 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fad8 	bl	8003804 <disk_status>
 8005254:	4603      	mov	r3, r0
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <validate+0x4e>
			res = FR_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <validate+0x5a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	e000      	b.n	8005270 <validate+0x5c>
 800526e:	2300      	movs	r3, #0
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	6013      	str	r3, [r2, #0]
	return res;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005292:	f107 0310 	add.w	r3, r7, #16
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fcd5 	bl	8004c46 <get_ldnumber>
 800529c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	da01      	bge.n	80052a8 <f_mount+0x28>
 80052a4:	230b      	movs	r3, #11
 80052a6:	e02b      	b.n	8005300 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80052a8:	4a17      	ldr	r2, [pc, #92]	; (8005308 <f_mount+0x88>)
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80052b8:	69b8      	ldr	r0, [r7, #24]
 80052ba:	f7fe fd89 	bl	8003dd0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	490d      	ldr	r1, [pc, #52]	; (8005308 <f_mount+0x88>)
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <f_mount+0x66>
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d001      	beq.n	80052ea <f_mount+0x6a>
 80052e6:	2300      	movs	r3, #0
 80052e8:	e00a      	b.n	8005300 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80052ea:	f107 010c 	add.w	r1, r7, #12
 80052ee:	f107 0308 	add.w	r3, r7, #8
 80052f2:	2200      	movs	r2, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fd41 	bl	8004d7c <find_volume>
 80052fa:	4603      	mov	r3, r0
 80052fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	200000b8 	.word	0x200000b8

0800530c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b098      	sub	sp, #96	; 0x60
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <f_open+0x18>
 8005320:	2309      	movs	r3, #9
 8005322:	e1ad      	b.n	8005680 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800532a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800532c:	79fa      	ldrb	r2, [r7, #7]
 800532e:	f107 0110 	add.w	r1, r7, #16
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fd20 	bl	8004d7c <find_volume>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005346:	2b00      	cmp	r3, #0
 8005348:	f040 8191 	bne.w	800566e <f_open+0x362>
		dj.obj.fs = fs;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	f107 0314 	add.w	r3, r7, #20
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff fc03 	bl	8004b64 <follow_path>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005368:	2b00      	cmp	r3, #0
 800536a:	d11a      	bne.n	80053a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800536c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005370:	b25b      	sxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	da03      	bge.n	800537e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005376:	2306      	movs	r3, #6
 8005378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800537c:	e011      	b.n	80053a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fbd2 	bl	8003b40 <chk_lock>
 800539c:	4603      	mov	r3, r0
 800539e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	f003 031c 	and.w	r3, r3, #28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d07f      	beq.n	80054ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80053ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d017      	beq.n	80053e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80053b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d10e      	bne.n	80053da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80053bc:	f7fe fc1c 	bl	8003bf8 <enq_lock>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d006      	beq.n	80053d4 <f_open+0xc8>
 80053c6:	f107 0314 	add.w	r3, r7, #20
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fb03 	bl	80049d6 <dir_register>
 80053d0:	4603      	mov	r3, r0
 80053d2:	e000      	b.n	80053d6 <f_open+0xca>
 80053d4:	2312      	movs	r3, #18
 80053d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	f043 0308 	orr.w	r3, r3, #8
 80053e0:	71fb      	strb	r3, [r7, #7]
 80053e2:	e010      	b.n	8005406 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80053e4:	7ebb      	ldrb	r3, [r7, #26]
 80053e6:	f003 0311 	and.w	r3, r3, #17
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <f_open+0xea>
					res = FR_DENIED;
 80053ee:	2307      	movs	r3, #7
 80053f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80053f4:	e007      	b.n	8005406 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <f_open+0xfa>
 8005400:	2308      	movs	r3, #8
 8005402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800540a:	2b00      	cmp	r3, #0
 800540c:	d168      	bne.n	80054e0 <f_open+0x1d4>
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d063      	beq.n	80054e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005418:	f7fe f888 	bl	800352c <get_fattime>
 800541c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	330e      	adds	r3, #14
 8005422:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe fae1 	bl	80039ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	3316      	adds	r3, #22
 800542e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe fadb 	bl	80039ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	330b      	adds	r3, #11
 800543a:	2220      	movs	r2, #32
 800543c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005442:	4611      	mov	r1, r2
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fa32 	bl	80048ae <ld_clust>
 800544a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005450:	2200      	movs	r2, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fa4a 	bl	80048ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545a:	331c      	adds	r3, #28
 800545c:	2100      	movs	r1, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fac4 	bl	80039ec <st_dword>
					fs->wflag = 1;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2201      	movs	r2, #1
 8005468:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800546a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d037      	beq.n	80054e0 <f_open+0x1d4>
						dw = fs->winsect;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005476:	f107 0314 	add.w	r3, r7, #20
 800547a:	2200      	movs	r2, #0
 800547c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe ff5d 	bl	800433e <remove_chain>
 8005484:	4603      	mov	r3, r0
 8005486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800548a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800548e:	2b00      	cmp	r3, #0
 8005490:	d126      	bne.n	80054e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fd02 	bl	8003ea0 <move_window>
 800549c:	4603      	mov	r3, r0
 800549e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054a6:	3a01      	subs	r2, #1
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	e019      	b.n	80054e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80054ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d115      	bne.n	80054e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80054b4:	7ebb      	ldrb	r3, [r7, #26]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80054be:	2304      	movs	r3, #4
 80054c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80054c4:	e00c      	b.n	80054e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <f_open+0x1d4>
 80054d0:	7ebb      	ldrb	r3, [r7, #26]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <f_open+0x1d4>
						res = FR_DENIED;
 80054da:	2307      	movs	r3, #7
 80054dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80054e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d128      	bne.n	800553a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf14      	ite	ne
 8005512:	2301      	movne	r3, #1
 8005514:	2300      	moveq	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	f107 0314 	add.w	r3, r7, #20
 800551e:	4611      	mov	r1, r2
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe fb8b 	bl	8003c3c <inc_lock>
 8005526:	4602      	mov	r2, r0
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <f_open+0x22e>
 8005534:	2302      	movs	r3, #2
 8005536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800553a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800553e:	2b00      	cmp	r3, #0
 8005540:	f040 8095 	bne.w	800566e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005548:	4611      	mov	r1, r2
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff f9af 	bl	80048ae <ld_clust>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	331c      	adds	r3, #28
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fa08 	bl	8003970 <ld_dword>
 8005560:	4602      	mov	r2, r0
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	88da      	ldrh	r2, [r3, #6]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	79fa      	ldrb	r2, [r7, #7]
 800557e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3330      	adds	r3, #48	; 0x30
 8005596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f7fe fa72 	bl	8003a86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d060      	beq.n	800566e <f_open+0x362>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d05c      	beq.n	800566e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	895b      	ldrh	r3, [r3, #10]
 80055c0:	025b      	lsls	r3, r3, #9
 80055c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	657b      	str	r3, [r7, #84]	; 0x54
 80055d0:	e016      	b.n	8005600 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fd1d 	bl	8004016 <get_fat>
 80055dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80055de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d802      	bhi.n	80055ea <f_open+0x2de>
 80055e4:	2302      	movs	r3, #2
 80055e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80055ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d102      	bne.n	80055f8 <f_open+0x2ec>
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80055f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005604:	2b00      	cmp	r3, #0
 8005606:	d103      	bne.n	8005610 <f_open+0x304>
 8005608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560c:	429a      	cmp	r2, r3
 800560e:	d8e0      	bhi.n	80055d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005614:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800561a:	2b00      	cmp	r3, #0
 800561c:	d127      	bne.n	800566e <f_open+0x362>
 800561e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005624:	2b00      	cmp	r3, #0
 8005626:	d022      	beq.n	800566e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe fcd3 	bl	8003fd8 <clust2sect>
 8005632:	6478      	str	r0, [r7, #68]	; 0x44
 8005634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <f_open+0x336>
						res = FR_INT_ERR;
 800563a:	2302      	movs	r3, #2
 800563c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005640:	e015      	b.n	800566e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005644:	0a5a      	lsrs	r2, r3, #9
 8005646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005648:	441a      	add	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	7858      	ldrb	r0, [r3, #1]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	2301      	movs	r3, #1
 800565e:	f7fe f911 	bl	8003884 <disk_read>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <f_open+0x362>
 8005668:	2301      	movs	r3, #1
 800566a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800566e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <f_open+0x370>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800567c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005680:	4618      	mov	r0, r3
 8005682:	3760      	adds	r7, #96	; 0x60
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	; 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f107 0210 	add.w	r2, r7, #16
 80056a6:	4611      	mov	r1, r2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fdb3 	bl	8005214 <validate>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80056b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d107      	bne.n	80056cc <f_write+0x44>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	7d5b      	ldrb	r3, [r3, #21]
 80056c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80056c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <f_write+0x4a>
 80056cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056d0:	e14b      	b.n	800596a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	7d1b      	ldrb	r3, [r3, #20]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <f_write+0x5a>
 80056de:	2307      	movs	r3, #7
 80056e0:	e143      	b.n	800596a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	441a      	add	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	f080 812d 	bcs.w	800594e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	43db      	mvns	r3, r3
 80056fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80056fc:	e127      	b.n	800594e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 80e3 	bne.w	80058d2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	0a5b      	lsrs	r3, r3, #9
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	8952      	ldrh	r2, [r2, #10]
 8005716:	3a01      	subs	r2, #1
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d143      	bne.n	80057aa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10c      	bne.n	8005744 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	2b00      	cmp	r3, #0
 8005734:	d11a      	bne.n	800576c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fe64 	bl	8004408 <create_chain>
 8005740:	62b8      	str	r0, [r7, #40]	; 0x28
 8005742:	e013      	b.n	800576c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	4619      	mov	r1, r3
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7fe fef0 	bl	8004538 <clmt_clust>
 8005758:	62b8      	str	r0, [r7, #40]	; 0x28
 800575a:	e007      	b.n	800576c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f7fe fe4f 	bl	8004408 <create_chain>
 800576a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 80f2 	beq.w	8005958 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	2b01      	cmp	r3, #1
 8005778:	d104      	bne.n	8005784 <f_write+0xfc>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2202      	movs	r2, #2
 800577e:	755a      	strb	r2, [r3, #21]
 8005780:	2302      	movs	r3, #2
 8005782:	e0f2      	b.n	800596a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578a:	d104      	bne.n	8005796 <f_write+0x10e>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	755a      	strb	r2, [r3, #21]
 8005792:	2301      	movs	r3, #1
 8005794:	e0e9      	b.n	800596a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <f_write+0x122>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	7d1b      	ldrb	r3, [r3, #20]
 80057ae:	b25b      	sxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	da18      	bge.n	80057e6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	7858      	ldrb	r0, [r3, #1]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1a      	ldr	r2, [r3, #32]
 80057c2:	2301      	movs	r3, #1
 80057c4:	f7fe f87e 	bl	80038c4 <disk_write>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <f_write+0x150>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	755a      	strb	r2, [r3, #21]
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0c8      	b.n	800596a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	7d1b      	ldrb	r3, [r3, #20]
 80057dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe fbf2 	bl	8003fd8 <clust2sect>
 80057f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <f_write+0x17e>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2202      	movs	r2, #2
 8005800:	755a      	strb	r2, [r3, #21]
 8005802:	2302      	movs	r3, #2
 8005804:	e0b1      	b.n	800596a <f_write+0x2e2>
			sect += csect;
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	4413      	add	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0a5b      	lsrs	r3, r3, #9
 8005812:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d03c      	beq.n	8005894 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	4413      	add	r3, r2
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	8952      	ldrh	r2, [r2, #10]
 8005824:	4293      	cmp	r3, r2
 8005826:	d905      	bls.n	8005834 <f_write+0x1ac>
					cc = fs->csize - csect;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	895b      	ldrh	r3, [r3, #10]
 800582c:	461a      	mov	r2, r3
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	7858      	ldrb	r0, [r3, #1]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	69f9      	ldr	r1, [r7, #28]
 800583e:	f7fe f841 	bl	80038c4 <disk_write>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <f_write+0x1ca>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	755a      	strb	r2, [r3, #21]
 800584e:	2301      	movs	r3, #1
 8005850:	e08b      	b.n	800596a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	6a3a      	ldr	r2, [r7, #32]
 800585c:	429a      	cmp	r2, r3
 800585e:	d915      	bls.n	800588c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1a      	ldr	r2, [r3, #32]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	025b      	lsls	r3, r3, #9
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005878:	4619      	mov	r1, r3
 800587a:	f7fe f8e3 	bl	8003a44 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	7d1b      	ldrb	r3, [r3, #20]
 8005882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	025b      	lsls	r3, r3, #9
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005892:	e03f      	b.n	8005914 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	429a      	cmp	r2, r3
 800589c:	d016      	beq.n	80058cc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d210      	bcs.n	80058cc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	7858      	ldrb	r0, [r3, #1]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80058b4:	2301      	movs	r3, #1
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	f7fd ffe4 	bl	8003884 <disk_read>
 80058bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d004      	beq.n	80058cc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	755a      	strb	r2, [r3, #21]
 80058c8:	2301      	movs	r3, #1
 80058ca:	e04e      	b.n	800596a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80058e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d901      	bls.n	80058ec <f_write+0x264>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fa:	4413      	add	r3, r2
 80058fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fe:	69f9      	ldr	r1, [r7, #28]
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe f89f 	bl	8003a44 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	7d1b      	ldrb	r3, [r3, #20]
 800590a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800590e:	b2da      	uxtb	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	4413      	add	r3, r2
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	441a      	add	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	619a      	str	r2, [r3, #24]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	429a      	cmp	r2, r3
 8005932:	bf38      	it	cc
 8005934:	461a      	movcc	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	441a      	add	r2, r3
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	f47f aed4 	bne.w	80056fe <f_write+0x76>
 8005956:	e000      	b.n	800595a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005958:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	7d1b      	ldrb	r3, [r3, #20]
 800595e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3730      	adds	r7, #48	; 0x30
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b086      	sub	sp, #24
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f107 0208 	add.w	r2, r7, #8
 8005980:	4611      	mov	r1, r2
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fc46 	bl	8005214 <validate>
 8005988:	4603      	mov	r3, r0
 800598a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d168      	bne.n	8005a64 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	7d1b      	ldrb	r3, [r3, #20]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d062      	beq.n	8005a64 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7d1b      	ldrb	r3, [r3, #20]
 80059a2:	b25b      	sxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	da15      	bge.n	80059d4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	7858      	ldrb	r0, [r3, #1]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1a      	ldr	r2, [r3, #32]
 80059b6:	2301      	movs	r3, #1
 80059b8:	f7fd ff84 	bl	80038c4 <disk_write>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <f_sync+0x54>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e04f      	b.n	8005a66 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	7d1b      	ldrb	r3, [r3, #20]
 80059ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80059d4:	f7fd fdaa 	bl	800352c <get_fattime>
 80059d8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe fa5c 	bl	8003ea0 <move_window>
 80059e8:	4603      	mov	r3, r0
 80059ea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d138      	bne.n	8005a64 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	330b      	adds	r3, #11
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	330b      	adds	r3, #11
 8005a02:	f042 0220 	orr.w	r2, r2, #32
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	f7fe ff69 	bl	80048ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f103 021c 	add.w	r2, r3, #28
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f7fd ffe0 	bl	80039ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3316      	adds	r3, #22
 8005a30:	6939      	ldr	r1, [r7, #16]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fd ffda 	bl	80039ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3312      	adds	r3, #18
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fd ffb9 	bl	80039b6 <st_word>
					fs->wflag = 1;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2201      	movs	r2, #1
 8005a48:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fa55 	bl	8003efc <sync_fs>
 8005a52:	4603      	mov	r3, r0
 8005a54:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	7d1b      	ldrb	r3, [r3, #20]
 8005a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff ff7b 	bl	8005972 <f_sync>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d118      	bne.n	8005ab8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f107 0208 	add.w	r2, r7, #8
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fbc0 	bl	8005214 <validate>
 8005a94:	4603      	mov	r3, r0
 8005a96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10c      	bne.n	8005ab8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe f958 	bl	8003d58 <dec_lock>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005ada:	4b1f      	ldr	r3, [pc, #124]	; (8005b58 <FATFS_LinkDriverEx+0x94>)
 8005adc:	7a5b      	ldrb	r3, [r3, #9]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d131      	bne.n	8005b48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <FATFS_LinkDriverEx+0x94>)
 8005ae6:	7a5b      	ldrb	r3, [r3, #9]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <FATFS_LinkDriverEx+0x94>)
 8005aee:	2100      	movs	r1, #0
 8005af0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005af2:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <FATFS_LinkDriverEx+0x94>)
 8005af4:	7a5b      	ldrb	r3, [r3, #9]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <FATFS_LinkDriverEx+0x94>)
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005b02:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <FATFS_LinkDriverEx+0x94>)
 8005b04:	7a5b      	ldrb	r3, [r3, #9]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <FATFS_LinkDriverEx+0x94>)
 8005b0c:	4413      	add	r3, r2
 8005b0e:	79fa      	ldrb	r2, [r7, #7]
 8005b10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005b12:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <FATFS_LinkDriverEx+0x94>)
 8005b14:	7a5b      	ldrb	r3, [r3, #9]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	b2d1      	uxtb	r1, r2
 8005b1c:	4a0e      	ldr	r2, [pc, #56]	; (8005b58 <FATFS_LinkDriverEx+0x94>)
 8005b1e:	7251      	strb	r1, [r2, #9]
 8005b20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005b22:	7dbb      	ldrb	r3, [r7, #22]
 8005b24:	3330      	adds	r3, #48	; 0x30
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	223a      	movs	r2, #58	; 0x3a
 8005b32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	3302      	adds	r3, #2
 8005b38:	222f      	movs	r2, #47	; 0x2f
 8005b3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	3303      	adds	r3, #3
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	200000e0 	.word	0x200000e0

08005b5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005b66:	2200      	movs	r2, #0
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff ffaa 	bl	8005ac4 <FATFS_LinkDriverEx>
 8005b70:	4603      	mov	r3, r0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <__errno>:
 8005b7c:	4b01      	ldr	r3, [pc, #4]	; (8005b84 <__errno+0x8>)
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000034 	.word	0x20000034

08005b88 <__libc_init_array>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	4d0d      	ldr	r5, [pc, #52]	; (8005bc0 <__libc_init_array+0x38>)
 8005b8c:	4c0d      	ldr	r4, [pc, #52]	; (8005bc4 <__libc_init_array+0x3c>)
 8005b8e:	1b64      	subs	r4, r4, r5
 8005b90:	10a4      	asrs	r4, r4, #2
 8005b92:	2600      	movs	r6, #0
 8005b94:	42a6      	cmp	r6, r4
 8005b96:	d109      	bne.n	8005bac <__libc_init_array+0x24>
 8005b98:	4d0b      	ldr	r5, [pc, #44]	; (8005bc8 <__libc_init_array+0x40>)
 8005b9a:	4c0c      	ldr	r4, [pc, #48]	; (8005bcc <__libc_init_array+0x44>)
 8005b9c:	f000 fc56 	bl	800644c <_init>
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	42a6      	cmp	r6, r4
 8005ba8:	d105      	bne.n	8005bb6 <__libc_init_array+0x2e>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb0:	4798      	blx	r3
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7ee      	b.n	8005b94 <__libc_init_array+0xc>
 8005bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bba:	4798      	blx	r3
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	e7f2      	b.n	8005ba6 <__libc_init_array+0x1e>
 8005bc0:	080065ac 	.word	0x080065ac
 8005bc4:	080065ac 	.word	0x080065ac
 8005bc8:	080065ac 	.word	0x080065ac
 8005bcc:	080065b0 	.word	0x080065b0

08005bd0 <memset>:
 8005bd0:	4402      	add	r2, r0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d100      	bne.n	8005bda <memset+0xa>
 8005bd8:	4770      	bx	lr
 8005bda:	f803 1b01 	strb.w	r1, [r3], #1
 8005bde:	e7f9      	b.n	8005bd4 <memset+0x4>

08005be0 <siprintf>:
 8005be0:	b40e      	push	{r1, r2, r3}
 8005be2:	b500      	push	{lr}
 8005be4:	b09c      	sub	sp, #112	; 0x70
 8005be6:	ab1d      	add	r3, sp, #116	; 0x74
 8005be8:	9002      	str	r0, [sp, #8]
 8005bea:	9006      	str	r0, [sp, #24]
 8005bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bf0:	4809      	ldr	r0, [pc, #36]	; (8005c18 <siprintf+0x38>)
 8005bf2:	9107      	str	r1, [sp, #28]
 8005bf4:	9104      	str	r1, [sp, #16]
 8005bf6:	4909      	ldr	r1, [pc, #36]	; (8005c1c <siprintf+0x3c>)
 8005bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bfc:	9105      	str	r1, [sp, #20]
 8005bfe:	6800      	ldr	r0, [r0, #0]
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	a902      	add	r1, sp, #8
 8005c04:	f000 f870 	bl	8005ce8 <_svfiprintf_r>
 8005c08:	9b02      	ldr	r3, [sp, #8]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	b01c      	add	sp, #112	; 0x70
 8005c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c14:	b003      	add	sp, #12
 8005c16:	4770      	bx	lr
 8005c18:	20000034 	.word	0x20000034
 8005c1c:	ffff0208 	.word	0xffff0208

08005c20 <strcpy>:
 8005c20:	4603      	mov	r3, r0
 8005c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c26:	f803 2b01 	strb.w	r2, [r3], #1
 8005c2a:	2a00      	cmp	r2, #0
 8005c2c:	d1f9      	bne.n	8005c22 <strcpy+0x2>
 8005c2e:	4770      	bx	lr

08005c30 <__ssputs_r>:
 8005c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	688e      	ldr	r6, [r1, #8]
 8005c36:	429e      	cmp	r6, r3
 8005c38:	4682      	mov	sl, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	4690      	mov	r8, r2
 8005c3e:	461f      	mov	r7, r3
 8005c40:	d838      	bhi.n	8005cb4 <__ssputs_r+0x84>
 8005c42:	898a      	ldrh	r2, [r1, #12]
 8005c44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c48:	d032      	beq.n	8005cb0 <__ssputs_r+0x80>
 8005c4a:	6825      	ldr	r5, [r4, #0]
 8005c4c:	6909      	ldr	r1, [r1, #16]
 8005c4e:	eba5 0901 	sub.w	r9, r5, r1
 8005c52:	6965      	ldr	r5, [r4, #20]
 8005c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	444b      	add	r3, r9
 8005c60:	106d      	asrs	r5, r5, #1
 8005c62:	429d      	cmp	r5, r3
 8005c64:	bf38      	it	cc
 8005c66:	461d      	movcc	r5, r3
 8005c68:	0553      	lsls	r3, r2, #21
 8005c6a:	d531      	bpl.n	8005cd0 <__ssputs_r+0xa0>
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f000 fb47 	bl	8006300 <_malloc_r>
 8005c72:	4606      	mov	r6, r0
 8005c74:	b950      	cbnz	r0, 8005c8c <__ssputs_r+0x5c>
 8005c76:	230c      	movs	r3, #12
 8005c78:	f8ca 3000 	str.w	r3, [sl]
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8c:	6921      	ldr	r1, [r4, #16]
 8005c8e:	464a      	mov	r2, r9
 8005c90:	f000 fabe 	bl	8006210 <memcpy>
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9e:	81a3      	strh	r3, [r4, #12]
 8005ca0:	6126      	str	r6, [r4, #16]
 8005ca2:	6165      	str	r5, [r4, #20]
 8005ca4:	444e      	add	r6, r9
 8005ca6:	eba5 0509 	sub.w	r5, r5, r9
 8005caa:	6026      	str	r6, [r4, #0]
 8005cac:	60a5      	str	r5, [r4, #8]
 8005cae:	463e      	mov	r6, r7
 8005cb0:	42be      	cmp	r6, r7
 8005cb2:	d900      	bls.n	8005cb6 <__ssputs_r+0x86>
 8005cb4:	463e      	mov	r6, r7
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	4641      	mov	r1, r8
 8005cbc:	f000 fab6 	bl	800622c <memmove>
 8005cc0:	68a3      	ldr	r3, [r4, #8]
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	1b9b      	subs	r3, r3, r6
 8005cc6:	4432      	add	r2, r6
 8005cc8:	60a3      	str	r3, [r4, #8]
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e7db      	b.n	8005c88 <__ssputs_r+0x58>
 8005cd0:	462a      	mov	r2, r5
 8005cd2:	f000 fb6f 	bl	80063b4 <_realloc_r>
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d1e1      	bne.n	8005ca0 <__ssputs_r+0x70>
 8005cdc:	6921      	ldr	r1, [r4, #16]
 8005cde:	4650      	mov	r0, sl
 8005ce0:	f000 fabe 	bl	8006260 <_free_r>
 8005ce4:	e7c7      	b.n	8005c76 <__ssputs_r+0x46>
	...

08005ce8 <_svfiprintf_r>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	4698      	mov	r8, r3
 8005cee:	898b      	ldrh	r3, [r1, #12]
 8005cf0:	061b      	lsls	r3, r3, #24
 8005cf2:	b09d      	sub	sp, #116	; 0x74
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	4614      	mov	r4, r2
 8005cfa:	d50e      	bpl.n	8005d1a <_svfiprintf_r+0x32>
 8005cfc:	690b      	ldr	r3, [r1, #16]
 8005cfe:	b963      	cbnz	r3, 8005d1a <_svfiprintf_r+0x32>
 8005d00:	2140      	movs	r1, #64	; 0x40
 8005d02:	f000 fafd 	bl	8006300 <_malloc_r>
 8005d06:	6028      	str	r0, [r5, #0]
 8005d08:	6128      	str	r0, [r5, #16]
 8005d0a:	b920      	cbnz	r0, 8005d16 <_svfiprintf_r+0x2e>
 8005d0c:	230c      	movs	r3, #12
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	e0d1      	b.n	8005eba <_svfiprintf_r+0x1d2>
 8005d16:	2340      	movs	r3, #64	; 0x40
 8005d18:	616b      	str	r3, [r5, #20]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d1e:	2320      	movs	r3, #32
 8005d20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d28:	2330      	movs	r3, #48	; 0x30
 8005d2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ed4 <_svfiprintf_r+0x1ec>
 8005d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d32:	f04f 0901 	mov.w	r9, #1
 8005d36:	4623      	mov	r3, r4
 8005d38:	469a      	mov	sl, r3
 8005d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d3e:	b10a      	cbz	r2, 8005d44 <_svfiprintf_r+0x5c>
 8005d40:	2a25      	cmp	r2, #37	; 0x25
 8005d42:	d1f9      	bne.n	8005d38 <_svfiprintf_r+0x50>
 8005d44:	ebba 0b04 	subs.w	fp, sl, r4
 8005d48:	d00b      	beq.n	8005d62 <_svfiprintf_r+0x7a>
 8005d4a:	465b      	mov	r3, fp
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	4629      	mov	r1, r5
 8005d50:	4638      	mov	r0, r7
 8005d52:	f7ff ff6d 	bl	8005c30 <__ssputs_r>
 8005d56:	3001      	adds	r0, #1
 8005d58:	f000 80aa 	beq.w	8005eb0 <_svfiprintf_r+0x1c8>
 8005d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d5e:	445a      	add	r2, fp
 8005d60:	9209      	str	r2, [sp, #36]	; 0x24
 8005d62:	f89a 3000 	ldrb.w	r3, [sl]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 80a2 	beq.w	8005eb0 <_svfiprintf_r+0x1c8>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d76:	f10a 0a01 	add.w	sl, sl, #1
 8005d7a:	9304      	str	r3, [sp, #16]
 8005d7c:	9307      	str	r3, [sp, #28]
 8005d7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d82:	931a      	str	r3, [sp, #104]	; 0x68
 8005d84:	4654      	mov	r4, sl
 8005d86:	2205      	movs	r2, #5
 8005d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8c:	4851      	ldr	r0, [pc, #324]	; (8005ed4 <_svfiprintf_r+0x1ec>)
 8005d8e:	f7fa fa1f 	bl	80001d0 <memchr>
 8005d92:	9a04      	ldr	r2, [sp, #16]
 8005d94:	b9d8      	cbnz	r0, 8005dce <_svfiprintf_r+0xe6>
 8005d96:	06d0      	lsls	r0, r2, #27
 8005d98:	bf44      	itt	mi
 8005d9a:	2320      	movmi	r3, #32
 8005d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da0:	0711      	lsls	r1, r2, #28
 8005da2:	bf44      	itt	mi
 8005da4:	232b      	movmi	r3, #43	; 0x2b
 8005da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005daa:	f89a 3000 	ldrb.w	r3, [sl]
 8005dae:	2b2a      	cmp	r3, #42	; 0x2a
 8005db0:	d015      	beq.n	8005dde <_svfiprintf_r+0xf6>
 8005db2:	9a07      	ldr	r2, [sp, #28]
 8005db4:	4654      	mov	r4, sl
 8005db6:	2000      	movs	r0, #0
 8005db8:	f04f 0c0a 	mov.w	ip, #10
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dc2:	3b30      	subs	r3, #48	; 0x30
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	d94e      	bls.n	8005e66 <_svfiprintf_r+0x17e>
 8005dc8:	b1b0      	cbz	r0, 8005df8 <_svfiprintf_r+0x110>
 8005dca:	9207      	str	r2, [sp, #28]
 8005dcc:	e014      	b.n	8005df8 <_svfiprintf_r+0x110>
 8005dce:	eba0 0308 	sub.w	r3, r0, r8
 8005dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	46a2      	mov	sl, r4
 8005ddc:	e7d2      	b.n	8005d84 <_svfiprintf_r+0x9c>
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	1d19      	adds	r1, r3, #4
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	9103      	str	r1, [sp, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bfbb      	ittet	lt
 8005dea:	425b      	neglt	r3, r3
 8005dec:	f042 0202 	orrlt.w	r2, r2, #2
 8005df0:	9307      	strge	r3, [sp, #28]
 8005df2:	9307      	strlt	r3, [sp, #28]
 8005df4:	bfb8      	it	lt
 8005df6:	9204      	strlt	r2, [sp, #16]
 8005df8:	7823      	ldrb	r3, [r4, #0]
 8005dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8005dfc:	d10c      	bne.n	8005e18 <_svfiprintf_r+0x130>
 8005dfe:	7863      	ldrb	r3, [r4, #1]
 8005e00:	2b2a      	cmp	r3, #42	; 0x2a
 8005e02:	d135      	bne.n	8005e70 <_svfiprintf_r+0x188>
 8005e04:	9b03      	ldr	r3, [sp, #12]
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	9203      	str	r2, [sp, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	bfb8      	it	lt
 8005e10:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e14:	3402      	adds	r4, #2
 8005e16:	9305      	str	r3, [sp, #20]
 8005e18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ee4 <_svfiprintf_r+0x1fc>
 8005e1c:	7821      	ldrb	r1, [r4, #0]
 8005e1e:	2203      	movs	r2, #3
 8005e20:	4650      	mov	r0, sl
 8005e22:	f7fa f9d5 	bl	80001d0 <memchr>
 8005e26:	b140      	cbz	r0, 8005e3a <_svfiprintf_r+0x152>
 8005e28:	2340      	movs	r3, #64	; 0x40
 8005e2a:	eba0 000a 	sub.w	r0, r0, sl
 8005e2e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e32:	9b04      	ldr	r3, [sp, #16]
 8005e34:	4303      	orrs	r3, r0
 8005e36:	3401      	adds	r4, #1
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e3e:	4826      	ldr	r0, [pc, #152]	; (8005ed8 <_svfiprintf_r+0x1f0>)
 8005e40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e44:	2206      	movs	r2, #6
 8005e46:	f7fa f9c3 	bl	80001d0 <memchr>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d038      	beq.n	8005ec0 <_svfiprintf_r+0x1d8>
 8005e4e:	4b23      	ldr	r3, [pc, #140]	; (8005edc <_svfiprintf_r+0x1f4>)
 8005e50:	bb1b      	cbnz	r3, 8005e9a <_svfiprintf_r+0x1b2>
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	3307      	adds	r3, #7
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	9303      	str	r3, [sp, #12]
 8005e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e60:	4433      	add	r3, r6
 8005e62:	9309      	str	r3, [sp, #36]	; 0x24
 8005e64:	e767      	b.n	8005d36 <_svfiprintf_r+0x4e>
 8005e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	e7a5      	b.n	8005dbc <_svfiprintf_r+0xd4>
 8005e70:	2300      	movs	r3, #0
 8005e72:	3401      	adds	r4, #1
 8005e74:	9305      	str	r3, [sp, #20]
 8005e76:	4619      	mov	r1, r3
 8005e78:	f04f 0c0a 	mov.w	ip, #10
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e82:	3a30      	subs	r2, #48	; 0x30
 8005e84:	2a09      	cmp	r2, #9
 8005e86:	d903      	bls.n	8005e90 <_svfiprintf_r+0x1a8>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0c5      	beq.n	8005e18 <_svfiprintf_r+0x130>
 8005e8c:	9105      	str	r1, [sp, #20]
 8005e8e:	e7c3      	b.n	8005e18 <_svfiprintf_r+0x130>
 8005e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e94:	4604      	mov	r4, r0
 8005e96:	2301      	movs	r3, #1
 8005e98:	e7f0      	b.n	8005e7c <_svfiprintf_r+0x194>
 8005e9a:	ab03      	add	r3, sp, #12
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	462a      	mov	r2, r5
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <_svfiprintf_r+0x1f8>)
 8005ea2:	a904      	add	r1, sp, #16
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f3af 8000 	nop.w
 8005eaa:	1c42      	adds	r2, r0, #1
 8005eac:	4606      	mov	r6, r0
 8005eae:	d1d6      	bne.n	8005e5e <_svfiprintf_r+0x176>
 8005eb0:	89ab      	ldrh	r3, [r5, #12]
 8005eb2:	065b      	lsls	r3, r3, #25
 8005eb4:	f53f af2c 	bmi.w	8005d10 <_svfiprintf_r+0x28>
 8005eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eba:	b01d      	add	sp, #116	; 0x74
 8005ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec0:	ab03      	add	r3, sp, #12
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	462a      	mov	r2, r5
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <_svfiprintf_r+0x1f8>)
 8005ec8:	a904      	add	r1, sp, #16
 8005eca:	4638      	mov	r0, r7
 8005ecc:	f000 f87a 	bl	8005fc4 <_printf_i>
 8005ed0:	e7eb      	b.n	8005eaa <_svfiprintf_r+0x1c2>
 8005ed2:	bf00      	nop
 8005ed4:	08006570 	.word	0x08006570
 8005ed8:	0800657a 	.word	0x0800657a
 8005edc:	00000000 	.word	0x00000000
 8005ee0:	08005c31 	.word	0x08005c31
 8005ee4:	08006576 	.word	0x08006576

08005ee8 <_printf_common>:
 8005ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	4616      	mov	r6, r2
 8005eee:	4699      	mov	r9, r3
 8005ef0:	688a      	ldr	r2, [r1, #8]
 8005ef2:	690b      	ldr	r3, [r1, #16]
 8005ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	bfb8      	it	lt
 8005efc:	4613      	movlt	r3, r2
 8005efe:	6033      	str	r3, [r6, #0]
 8005f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f04:	4607      	mov	r7, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	b10a      	cbz	r2, 8005f0e <_printf_common+0x26>
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	6033      	str	r3, [r6, #0]
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	0699      	lsls	r1, r3, #26
 8005f12:	bf42      	ittt	mi
 8005f14:	6833      	ldrmi	r3, [r6, #0]
 8005f16:	3302      	addmi	r3, #2
 8005f18:	6033      	strmi	r3, [r6, #0]
 8005f1a:	6825      	ldr	r5, [r4, #0]
 8005f1c:	f015 0506 	ands.w	r5, r5, #6
 8005f20:	d106      	bne.n	8005f30 <_printf_common+0x48>
 8005f22:	f104 0a19 	add.w	sl, r4, #25
 8005f26:	68e3      	ldr	r3, [r4, #12]
 8005f28:	6832      	ldr	r2, [r6, #0]
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	42ab      	cmp	r3, r5
 8005f2e:	dc26      	bgt.n	8005f7e <_printf_common+0x96>
 8005f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f34:	1e13      	subs	r3, r2, #0
 8005f36:	6822      	ldr	r2, [r4, #0]
 8005f38:	bf18      	it	ne
 8005f3a:	2301      	movne	r3, #1
 8005f3c:	0692      	lsls	r2, r2, #26
 8005f3e:	d42b      	bmi.n	8005f98 <_printf_common+0xb0>
 8005f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f44:	4649      	mov	r1, r9
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c0      	blx	r8
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d01e      	beq.n	8005f8c <_printf_common+0xa4>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	68e5      	ldr	r5, [r4, #12]
 8005f52:	6832      	ldr	r2, [r6, #0]
 8005f54:	f003 0306 	and.w	r3, r3, #6
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	bf08      	it	eq
 8005f5c:	1aad      	subeq	r5, r5, r2
 8005f5e:	68a3      	ldr	r3, [r4, #8]
 8005f60:	6922      	ldr	r2, [r4, #16]
 8005f62:	bf0c      	ite	eq
 8005f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f68:	2500      	movne	r5, #0
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	bfc4      	itt	gt
 8005f6e:	1a9b      	subgt	r3, r3, r2
 8005f70:	18ed      	addgt	r5, r5, r3
 8005f72:	2600      	movs	r6, #0
 8005f74:	341a      	adds	r4, #26
 8005f76:	42b5      	cmp	r5, r6
 8005f78:	d11a      	bne.n	8005fb0 <_printf_common+0xc8>
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	e008      	b.n	8005f90 <_printf_common+0xa8>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4652      	mov	r2, sl
 8005f82:	4649      	mov	r1, r9
 8005f84:	4638      	mov	r0, r7
 8005f86:	47c0      	blx	r8
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d103      	bne.n	8005f94 <_printf_common+0xac>
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f94:	3501      	adds	r5, #1
 8005f96:	e7c6      	b.n	8005f26 <_printf_common+0x3e>
 8005f98:	18e1      	adds	r1, r4, r3
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	2030      	movs	r0, #48	; 0x30
 8005f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fa2:	4422      	add	r2, r4
 8005fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fac:	3302      	adds	r3, #2
 8005fae:	e7c7      	b.n	8005f40 <_printf_common+0x58>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	47c0      	blx	r8
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d0e6      	beq.n	8005f8c <_printf_common+0xa4>
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7d9      	b.n	8005f76 <_printf_common+0x8e>
	...

08005fc4 <_printf_i>:
 8005fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	460c      	mov	r4, r1
 8005fca:	4691      	mov	r9, r2
 8005fcc:	7e27      	ldrb	r7, [r4, #24]
 8005fce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fd0:	2f78      	cmp	r7, #120	; 0x78
 8005fd2:	4680      	mov	r8, r0
 8005fd4:	469a      	mov	sl, r3
 8005fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fda:	d807      	bhi.n	8005fec <_printf_i+0x28>
 8005fdc:	2f62      	cmp	r7, #98	; 0x62
 8005fde:	d80a      	bhi.n	8005ff6 <_printf_i+0x32>
 8005fe0:	2f00      	cmp	r7, #0
 8005fe2:	f000 80d8 	beq.w	8006196 <_printf_i+0x1d2>
 8005fe6:	2f58      	cmp	r7, #88	; 0x58
 8005fe8:	f000 80a3 	beq.w	8006132 <_printf_i+0x16e>
 8005fec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ff4:	e03a      	b.n	800606c <_printf_i+0xa8>
 8005ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ffa:	2b15      	cmp	r3, #21
 8005ffc:	d8f6      	bhi.n	8005fec <_printf_i+0x28>
 8005ffe:	a001      	add	r0, pc, #4	; (adr r0, 8006004 <_printf_i+0x40>)
 8006000:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006004:	0800605d 	.word	0x0800605d
 8006008:	08006071 	.word	0x08006071
 800600c:	08005fed 	.word	0x08005fed
 8006010:	08005fed 	.word	0x08005fed
 8006014:	08005fed 	.word	0x08005fed
 8006018:	08005fed 	.word	0x08005fed
 800601c:	08006071 	.word	0x08006071
 8006020:	08005fed 	.word	0x08005fed
 8006024:	08005fed 	.word	0x08005fed
 8006028:	08005fed 	.word	0x08005fed
 800602c:	08005fed 	.word	0x08005fed
 8006030:	0800617d 	.word	0x0800617d
 8006034:	080060a1 	.word	0x080060a1
 8006038:	0800615f 	.word	0x0800615f
 800603c:	08005fed 	.word	0x08005fed
 8006040:	08005fed 	.word	0x08005fed
 8006044:	0800619f 	.word	0x0800619f
 8006048:	08005fed 	.word	0x08005fed
 800604c:	080060a1 	.word	0x080060a1
 8006050:	08005fed 	.word	0x08005fed
 8006054:	08005fed 	.word	0x08005fed
 8006058:	08006167 	.word	0x08006167
 800605c:	680b      	ldr	r3, [r1, #0]
 800605e:	1d1a      	adds	r2, r3, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	600a      	str	r2, [r1, #0]
 8006064:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800606c:	2301      	movs	r3, #1
 800606e:	e0a3      	b.n	80061b8 <_printf_i+0x1f4>
 8006070:	6825      	ldr	r5, [r4, #0]
 8006072:	6808      	ldr	r0, [r1, #0]
 8006074:	062e      	lsls	r6, r5, #24
 8006076:	f100 0304 	add.w	r3, r0, #4
 800607a:	d50a      	bpl.n	8006092 <_printf_i+0xce>
 800607c:	6805      	ldr	r5, [r0, #0]
 800607e:	600b      	str	r3, [r1, #0]
 8006080:	2d00      	cmp	r5, #0
 8006082:	da03      	bge.n	800608c <_printf_i+0xc8>
 8006084:	232d      	movs	r3, #45	; 0x2d
 8006086:	426d      	negs	r5, r5
 8006088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800608c:	485e      	ldr	r0, [pc, #376]	; (8006208 <_printf_i+0x244>)
 800608e:	230a      	movs	r3, #10
 8006090:	e019      	b.n	80060c6 <_printf_i+0x102>
 8006092:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006096:	6805      	ldr	r5, [r0, #0]
 8006098:	600b      	str	r3, [r1, #0]
 800609a:	bf18      	it	ne
 800609c:	b22d      	sxthne	r5, r5
 800609e:	e7ef      	b.n	8006080 <_printf_i+0xbc>
 80060a0:	680b      	ldr	r3, [r1, #0]
 80060a2:	6825      	ldr	r5, [r4, #0]
 80060a4:	1d18      	adds	r0, r3, #4
 80060a6:	6008      	str	r0, [r1, #0]
 80060a8:	0628      	lsls	r0, r5, #24
 80060aa:	d501      	bpl.n	80060b0 <_printf_i+0xec>
 80060ac:	681d      	ldr	r5, [r3, #0]
 80060ae:	e002      	b.n	80060b6 <_printf_i+0xf2>
 80060b0:	0669      	lsls	r1, r5, #25
 80060b2:	d5fb      	bpl.n	80060ac <_printf_i+0xe8>
 80060b4:	881d      	ldrh	r5, [r3, #0]
 80060b6:	4854      	ldr	r0, [pc, #336]	; (8006208 <_printf_i+0x244>)
 80060b8:	2f6f      	cmp	r7, #111	; 0x6f
 80060ba:	bf0c      	ite	eq
 80060bc:	2308      	moveq	r3, #8
 80060be:	230a      	movne	r3, #10
 80060c0:	2100      	movs	r1, #0
 80060c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060c6:	6866      	ldr	r6, [r4, #4]
 80060c8:	60a6      	str	r6, [r4, #8]
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	bfa2      	ittt	ge
 80060ce:	6821      	ldrge	r1, [r4, #0]
 80060d0:	f021 0104 	bicge.w	r1, r1, #4
 80060d4:	6021      	strge	r1, [r4, #0]
 80060d6:	b90d      	cbnz	r5, 80060dc <_printf_i+0x118>
 80060d8:	2e00      	cmp	r6, #0
 80060da:	d04d      	beq.n	8006178 <_printf_i+0x1b4>
 80060dc:	4616      	mov	r6, r2
 80060de:	fbb5 f1f3 	udiv	r1, r5, r3
 80060e2:	fb03 5711 	mls	r7, r3, r1, r5
 80060e6:	5dc7      	ldrb	r7, [r0, r7]
 80060e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060ec:	462f      	mov	r7, r5
 80060ee:	42bb      	cmp	r3, r7
 80060f0:	460d      	mov	r5, r1
 80060f2:	d9f4      	bls.n	80060de <_printf_i+0x11a>
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d10b      	bne.n	8006110 <_printf_i+0x14c>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	07df      	lsls	r7, r3, #31
 80060fc:	d508      	bpl.n	8006110 <_printf_i+0x14c>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	6861      	ldr	r1, [r4, #4]
 8006102:	4299      	cmp	r1, r3
 8006104:	bfde      	ittt	le
 8006106:	2330      	movle	r3, #48	; 0x30
 8006108:	f806 3c01 	strble.w	r3, [r6, #-1]
 800610c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006110:	1b92      	subs	r2, r2, r6
 8006112:	6122      	str	r2, [r4, #16]
 8006114:	f8cd a000 	str.w	sl, [sp]
 8006118:	464b      	mov	r3, r9
 800611a:	aa03      	add	r2, sp, #12
 800611c:	4621      	mov	r1, r4
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fee2 	bl	8005ee8 <_printf_common>
 8006124:	3001      	adds	r0, #1
 8006126:	d14c      	bne.n	80061c2 <_printf_i+0x1fe>
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	b004      	add	sp, #16
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	4835      	ldr	r0, [pc, #212]	; (8006208 <_printf_i+0x244>)
 8006134:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	680e      	ldr	r6, [r1, #0]
 800613c:	061f      	lsls	r7, r3, #24
 800613e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006142:	600e      	str	r6, [r1, #0]
 8006144:	d514      	bpl.n	8006170 <_printf_i+0x1ac>
 8006146:	07d9      	lsls	r1, r3, #31
 8006148:	bf44      	itt	mi
 800614a:	f043 0320 	orrmi.w	r3, r3, #32
 800614e:	6023      	strmi	r3, [r4, #0]
 8006150:	b91d      	cbnz	r5, 800615a <_printf_i+0x196>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	f023 0320 	bic.w	r3, r3, #32
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	2310      	movs	r3, #16
 800615c:	e7b0      	b.n	80060c0 <_printf_i+0xfc>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	f043 0320 	orr.w	r3, r3, #32
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	2378      	movs	r3, #120	; 0x78
 8006168:	4828      	ldr	r0, [pc, #160]	; (800620c <_printf_i+0x248>)
 800616a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800616e:	e7e3      	b.n	8006138 <_printf_i+0x174>
 8006170:	065e      	lsls	r6, r3, #25
 8006172:	bf48      	it	mi
 8006174:	b2ad      	uxthmi	r5, r5
 8006176:	e7e6      	b.n	8006146 <_printf_i+0x182>
 8006178:	4616      	mov	r6, r2
 800617a:	e7bb      	b.n	80060f4 <_printf_i+0x130>
 800617c:	680b      	ldr	r3, [r1, #0]
 800617e:	6826      	ldr	r6, [r4, #0]
 8006180:	6960      	ldr	r0, [r4, #20]
 8006182:	1d1d      	adds	r5, r3, #4
 8006184:	600d      	str	r5, [r1, #0]
 8006186:	0635      	lsls	r5, r6, #24
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	d501      	bpl.n	8006190 <_printf_i+0x1cc>
 800618c:	6018      	str	r0, [r3, #0]
 800618e:	e002      	b.n	8006196 <_printf_i+0x1d2>
 8006190:	0671      	lsls	r1, r6, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0x1c8>
 8006194:	8018      	strh	r0, [r3, #0]
 8006196:	2300      	movs	r3, #0
 8006198:	6123      	str	r3, [r4, #16]
 800619a:	4616      	mov	r6, r2
 800619c:	e7ba      	b.n	8006114 <_printf_i+0x150>
 800619e:	680b      	ldr	r3, [r1, #0]
 80061a0:	1d1a      	adds	r2, r3, #4
 80061a2:	600a      	str	r2, [r1, #0]
 80061a4:	681e      	ldr	r6, [r3, #0]
 80061a6:	6862      	ldr	r2, [r4, #4]
 80061a8:	2100      	movs	r1, #0
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7fa f810 	bl	80001d0 <memchr>
 80061b0:	b108      	cbz	r0, 80061b6 <_printf_i+0x1f2>
 80061b2:	1b80      	subs	r0, r0, r6
 80061b4:	6060      	str	r0, [r4, #4]
 80061b6:	6863      	ldr	r3, [r4, #4]
 80061b8:	6123      	str	r3, [r4, #16]
 80061ba:	2300      	movs	r3, #0
 80061bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c0:	e7a8      	b.n	8006114 <_printf_i+0x150>
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	4632      	mov	r2, r6
 80061c6:	4649      	mov	r1, r9
 80061c8:	4640      	mov	r0, r8
 80061ca:	47d0      	blx	sl
 80061cc:	3001      	adds	r0, #1
 80061ce:	d0ab      	beq.n	8006128 <_printf_i+0x164>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	079b      	lsls	r3, r3, #30
 80061d4:	d413      	bmi.n	80061fe <_printf_i+0x23a>
 80061d6:	68e0      	ldr	r0, [r4, #12]
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	4298      	cmp	r0, r3
 80061dc:	bfb8      	it	lt
 80061de:	4618      	movlt	r0, r3
 80061e0:	e7a4      	b.n	800612c <_printf_i+0x168>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4632      	mov	r2, r6
 80061e6:	4649      	mov	r1, r9
 80061e8:	4640      	mov	r0, r8
 80061ea:	47d0      	blx	sl
 80061ec:	3001      	adds	r0, #1
 80061ee:	d09b      	beq.n	8006128 <_printf_i+0x164>
 80061f0:	3501      	adds	r5, #1
 80061f2:	68e3      	ldr	r3, [r4, #12]
 80061f4:	9903      	ldr	r1, [sp, #12]
 80061f6:	1a5b      	subs	r3, r3, r1
 80061f8:	42ab      	cmp	r3, r5
 80061fa:	dcf2      	bgt.n	80061e2 <_printf_i+0x21e>
 80061fc:	e7eb      	b.n	80061d6 <_printf_i+0x212>
 80061fe:	2500      	movs	r5, #0
 8006200:	f104 0619 	add.w	r6, r4, #25
 8006204:	e7f5      	b.n	80061f2 <_printf_i+0x22e>
 8006206:	bf00      	nop
 8006208:	08006581 	.word	0x08006581
 800620c:	08006592 	.word	0x08006592

08006210 <memcpy>:
 8006210:	440a      	add	r2, r1
 8006212:	4291      	cmp	r1, r2
 8006214:	f100 33ff 	add.w	r3, r0, #4294967295
 8006218:	d100      	bne.n	800621c <memcpy+0xc>
 800621a:	4770      	bx	lr
 800621c:	b510      	push	{r4, lr}
 800621e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006226:	4291      	cmp	r1, r2
 8006228:	d1f9      	bne.n	800621e <memcpy+0xe>
 800622a:	bd10      	pop	{r4, pc}

0800622c <memmove>:
 800622c:	4288      	cmp	r0, r1
 800622e:	b510      	push	{r4, lr}
 8006230:	eb01 0402 	add.w	r4, r1, r2
 8006234:	d902      	bls.n	800623c <memmove+0x10>
 8006236:	4284      	cmp	r4, r0
 8006238:	4623      	mov	r3, r4
 800623a:	d807      	bhi.n	800624c <memmove+0x20>
 800623c:	1e43      	subs	r3, r0, #1
 800623e:	42a1      	cmp	r1, r4
 8006240:	d008      	beq.n	8006254 <memmove+0x28>
 8006242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800624a:	e7f8      	b.n	800623e <memmove+0x12>
 800624c:	4402      	add	r2, r0
 800624e:	4601      	mov	r1, r0
 8006250:	428a      	cmp	r2, r1
 8006252:	d100      	bne.n	8006256 <memmove+0x2a>
 8006254:	bd10      	pop	{r4, pc}
 8006256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800625a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800625e:	e7f7      	b.n	8006250 <memmove+0x24>

08006260 <_free_r>:
 8006260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006262:	2900      	cmp	r1, #0
 8006264:	d048      	beq.n	80062f8 <_free_r+0x98>
 8006266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800626a:	9001      	str	r0, [sp, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f1a1 0404 	sub.w	r4, r1, #4
 8006272:	bfb8      	it	lt
 8006274:	18e4      	addlt	r4, r4, r3
 8006276:	f000 f8d3 	bl	8006420 <__malloc_lock>
 800627a:	4a20      	ldr	r2, [pc, #128]	; (80062fc <_free_r+0x9c>)
 800627c:	9801      	ldr	r0, [sp, #4]
 800627e:	6813      	ldr	r3, [r2, #0]
 8006280:	4615      	mov	r5, r2
 8006282:	b933      	cbnz	r3, 8006292 <_free_r+0x32>
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	6014      	str	r4, [r2, #0]
 8006288:	b003      	add	sp, #12
 800628a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800628e:	f000 b8cd 	b.w	800642c <__malloc_unlock>
 8006292:	42a3      	cmp	r3, r4
 8006294:	d90b      	bls.n	80062ae <_free_r+0x4e>
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	1862      	adds	r2, r4, r1
 800629a:	4293      	cmp	r3, r2
 800629c:	bf04      	itt	eq
 800629e:	681a      	ldreq	r2, [r3, #0]
 80062a0:	685b      	ldreq	r3, [r3, #4]
 80062a2:	6063      	str	r3, [r4, #4]
 80062a4:	bf04      	itt	eq
 80062a6:	1852      	addeq	r2, r2, r1
 80062a8:	6022      	streq	r2, [r4, #0]
 80062aa:	602c      	str	r4, [r5, #0]
 80062ac:	e7ec      	b.n	8006288 <_free_r+0x28>
 80062ae:	461a      	mov	r2, r3
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	b10b      	cbz	r3, 80062b8 <_free_r+0x58>
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	d9fa      	bls.n	80062ae <_free_r+0x4e>
 80062b8:	6811      	ldr	r1, [r2, #0]
 80062ba:	1855      	adds	r5, r2, r1
 80062bc:	42a5      	cmp	r5, r4
 80062be:	d10b      	bne.n	80062d8 <_free_r+0x78>
 80062c0:	6824      	ldr	r4, [r4, #0]
 80062c2:	4421      	add	r1, r4
 80062c4:	1854      	adds	r4, r2, r1
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	d1dd      	bne.n	8006288 <_free_r+0x28>
 80062cc:	681c      	ldr	r4, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	6053      	str	r3, [r2, #4]
 80062d2:	4421      	add	r1, r4
 80062d4:	6011      	str	r1, [r2, #0]
 80062d6:	e7d7      	b.n	8006288 <_free_r+0x28>
 80062d8:	d902      	bls.n	80062e0 <_free_r+0x80>
 80062da:	230c      	movs	r3, #12
 80062dc:	6003      	str	r3, [r0, #0]
 80062de:	e7d3      	b.n	8006288 <_free_r+0x28>
 80062e0:	6825      	ldr	r5, [r4, #0]
 80062e2:	1961      	adds	r1, r4, r5
 80062e4:	428b      	cmp	r3, r1
 80062e6:	bf04      	itt	eq
 80062e8:	6819      	ldreq	r1, [r3, #0]
 80062ea:	685b      	ldreq	r3, [r3, #4]
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	bf04      	itt	eq
 80062f0:	1949      	addeq	r1, r1, r5
 80062f2:	6021      	streq	r1, [r4, #0]
 80062f4:	6054      	str	r4, [r2, #4]
 80062f6:	e7c7      	b.n	8006288 <_free_r+0x28>
 80062f8:	b003      	add	sp, #12
 80062fa:	bd30      	pop	{r4, r5, pc}
 80062fc:	200000ec 	.word	0x200000ec

08006300 <_malloc_r>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	1ccd      	adds	r5, r1, #3
 8006304:	f025 0503 	bic.w	r5, r5, #3
 8006308:	3508      	adds	r5, #8
 800630a:	2d0c      	cmp	r5, #12
 800630c:	bf38      	it	cc
 800630e:	250c      	movcc	r5, #12
 8006310:	2d00      	cmp	r5, #0
 8006312:	4606      	mov	r6, r0
 8006314:	db01      	blt.n	800631a <_malloc_r+0x1a>
 8006316:	42a9      	cmp	r1, r5
 8006318:	d903      	bls.n	8006322 <_malloc_r+0x22>
 800631a:	230c      	movs	r3, #12
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	2000      	movs	r0, #0
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006322:	f000 f87d 	bl	8006420 <__malloc_lock>
 8006326:	4921      	ldr	r1, [pc, #132]	; (80063ac <_malloc_r+0xac>)
 8006328:	680a      	ldr	r2, [r1, #0]
 800632a:	4614      	mov	r4, r2
 800632c:	b99c      	cbnz	r4, 8006356 <_malloc_r+0x56>
 800632e:	4f20      	ldr	r7, [pc, #128]	; (80063b0 <_malloc_r+0xb0>)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	b923      	cbnz	r3, 800633e <_malloc_r+0x3e>
 8006334:	4621      	mov	r1, r4
 8006336:	4630      	mov	r0, r6
 8006338:	f000 f862 	bl	8006400 <_sbrk_r>
 800633c:	6038      	str	r0, [r7, #0]
 800633e:	4629      	mov	r1, r5
 8006340:	4630      	mov	r0, r6
 8006342:	f000 f85d 	bl	8006400 <_sbrk_r>
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	d123      	bne.n	8006392 <_malloc_r+0x92>
 800634a:	230c      	movs	r3, #12
 800634c:	6033      	str	r3, [r6, #0]
 800634e:	4630      	mov	r0, r6
 8006350:	f000 f86c 	bl	800642c <__malloc_unlock>
 8006354:	e7e3      	b.n	800631e <_malloc_r+0x1e>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	1b5b      	subs	r3, r3, r5
 800635a:	d417      	bmi.n	800638c <_malloc_r+0x8c>
 800635c:	2b0b      	cmp	r3, #11
 800635e:	d903      	bls.n	8006368 <_malloc_r+0x68>
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	441c      	add	r4, r3
 8006364:	6025      	str	r5, [r4, #0]
 8006366:	e004      	b.n	8006372 <_malloc_r+0x72>
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	42a2      	cmp	r2, r4
 800636c:	bf0c      	ite	eq
 800636e:	600b      	streq	r3, [r1, #0]
 8006370:	6053      	strne	r3, [r2, #4]
 8006372:	4630      	mov	r0, r6
 8006374:	f000 f85a 	bl	800642c <__malloc_unlock>
 8006378:	f104 000b 	add.w	r0, r4, #11
 800637c:	1d23      	adds	r3, r4, #4
 800637e:	f020 0007 	bic.w	r0, r0, #7
 8006382:	1ac2      	subs	r2, r0, r3
 8006384:	d0cc      	beq.n	8006320 <_malloc_r+0x20>
 8006386:	1a1b      	subs	r3, r3, r0
 8006388:	50a3      	str	r3, [r4, r2]
 800638a:	e7c9      	b.n	8006320 <_malloc_r+0x20>
 800638c:	4622      	mov	r2, r4
 800638e:	6864      	ldr	r4, [r4, #4]
 8006390:	e7cc      	b.n	800632c <_malloc_r+0x2c>
 8006392:	1cc4      	adds	r4, r0, #3
 8006394:	f024 0403 	bic.w	r4, r4, #3
 8006398:	42a0      	cmp	r0, r4
 800639a:	d0e3      	beq.n	8006364 <_malloc_r+0x64>
 800639c:	1a21      	subs	r1, r4, r0
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 f82e 	bl	8006400 <_sbrk_r>
 80063a4:	3001      	adds	r0, #1
 80063a6:	d1dd      	bne.n	8006364 <_malloc_r+0x64>
 80063a8:	e7cf      	b.n	800634a <_malloc_r+0x4a>
 80063aa:	bf00      	nop
 80063ac:	200000ec 	.word	0x200000ec
 80063b0:	200000f0 	.word	0x200000f0

080063b4 <_realloc_r>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	4607      	mov	r7, r0
 80063b8:	4614      	mov	r4, r2
 80063ba:	460e      	mov	r6, r1
 80063bc:	b921      	cbnz	r1, 80063c8 <_realloc_r+0x14>
 80063be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063c2:	4611      	mov	r1, r2
 80063c4:	f7ff bf9c 	b.w	8006300 <_malloc_r>
 80063c8:	b922      	cbnz	r2, 80063d4 <_realloc_r+0x20>
 80063ca:	f7ff ff49 	bl	8006260 <_free_r>
 80063ce:	4625      	mov	r5, r4
 80063d0:	4628      	mov	r0, r5
 80063d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d4:	f000 f830 	bl	8006438 <_malloc_usable_size_r>
 80063d8:	42a0      	cmp	r0, r4
 80063da:	d20f      	bcs.n	80063fc <_realloc_r+0x48>
 80063dc:	4621      	mov	r1, r4
 80063de:	4638      	mov	r0, r7
 80063e0:	f7ff ff8e 	bl	8006300 <_malloc_r>
 80063e4:	4605      	mov	r5, r0
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d0f2      	beq.n	80063d0 <_realloc_r+0x1c>
 80063ea:	4631      	mov	r1, r6
 80063ec:	4622      	mov	r2, r4
 80063ee:	f7ff ff0f 	bl	8006210 <memcpy>
 80063f2:	4631      	mov	r1, r6
 80063f4:	4638      	mov	r0, r7
 80063f6:	f7ff ff33 	bl	8006260 <_free_r>
 80063fa:	e7e9      	b.n	80063d0 <_realloc_r+0x1c>
 80063fc:	4635      	mov	r5, r6
 80063fe:	e7e7      	b.n	80063d0 <_realloc_r+0x1c>

08006400 <_sbrk_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d06      	ldr	r5, [pc, #24]	; (800641c <_sbrk_r+0x1c>)
 8006404:	2300      	movs	r3, #0
 8006406:	4604      	mov	r4, r0
 8006408:	4608      	mov	r0, r1
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	f7fa fbfc 	bl	8000c08 <_sbrk>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_sbrk_r+0x1a>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_sbrk_r+0x1a>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	20000a70 	.word	0x20000a70

08006420 <__malloc_lock>:
 8006420:	4801      	ldr	r0, [pc, #4]	; (8006428 <__malloc_lock+0x8>)
 8006422:	f000 b811 	b.w	8006448 <__retarget_lock_acquire_recursive>
 8006426:	bf00      	nop
 8006428:	20000a78 	.word	0x20000a78

0800642c <__malloc_unlock>:
 800642c:	4801      	ldr	r0, [pc, #4]	; (8006434 <__malloc_unlock+0x8>)
 800642e:	f000 b80c 	b.w	800644a <__retarget_lock_release_recursive>
 8006432:	bf00      	nop
 8006434:	20000a78 	.word	0x20000a78

08006438 <_malloc_usable_size_r>:
 8006438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800643c:	1f18      	subs	r0, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	bfbc      	itt	lt
 8006442:	580b      	ldrlt	r3, [r1, r0]
 8006444:	18c0      	addlt	r0, r0, r3
 8006446:	4770      	bx	lr

08006448 <__retarget_lock_acquire_recursive>:
 8006448:	4770      	bx	lr

0800644a <__retarget_lock_release_recursive>:
 800644a:	4770      	bx	lr

0800644c <_init>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr

08006458 <_fini>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr
